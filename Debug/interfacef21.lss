
interfacef21.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000037f0  00003884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000a8  008000a8  000038cc  2**0
                  ALLOC
  3 .stab         00003f30  00000000  00000000  000038cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001def  00000000  00000000  000077fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_1>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_2>
       c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 28 02 	jmp	0x450	; 0x450 <__vector_10>
      2c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <main>
      8a:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_INT0>:
void(*p2f_INT0)(void);
void(*p2f_INT1)(void);
void(*p2f_INT2)(void);

void init_INT0()
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT0);
      9a:	ab e5       	ldi	r26, 0x5B	; 91
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	eb e5       	ldi	r30, 0x5B	; 91
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	80 81       	ld	r24, Z
      a4:	80 64       	ori	r24, 0x40	; 64
      a6:	8c 93       	st	X, r24

	SET_BIT(MCUCR,ISC00);
      a8:	a5 e5       	ldi	r26, 0x55	; 85
      aa:	b0 e0       	ldi	r27, 0x00	; 0
      ac:	e5 e5       	ldi	r30, 0x55	; 85
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	81 60       	ori	r24, 0x01	; 1
      b4:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC01);
      b6:	a5 e5       	ldi	r26, 0x55	; 85
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e5 e5       	ldi	r30, 0x55	; 85
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	8d 7f       	andi	r24, 0xFD	; 253
      c2:	8c 93       	st	X, r24
}
      c4:	cf 91       	pop	r28
      c6:	df 91       	pop	r29
      c8:	08 95       	ret

000000ca <__vector_1>:
ISR(INT0_vect)
{
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	2f 93       	push	r18
      d6:	3f 93       	push	r19
      d8:	4f 93       	push	r20
      da:	5f 93       	push	r21
      dc:	6f 93       	push	r22
      de:	7f 93       	push	r23
      e0:	8f 93       	push	r24
      e2:	9f 93       	push	r25
      e4:	af 93       	push	r26
      e6:	bf 93       	push	r27
      e8:	ef 93       	push	r30
      ea:	ff 93       	push	r31
      ec:	df 93       	push	r29
      ee:	cf 93       	push	r28
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
	p2f_INT0();
      f4:	e0 91 ac 00 	lds	r30, 0x00AC
      f8:	f0 91 ad 00 	lds	r31, 0x00AD
      fc:	09 95       	icall
}
      fe:	cf 91       	pop	r28
     100:	df 91       	pop	r29
     102:	ff 91       	pop	r31
     104:	ef 91       	pop	r30
     106:	bf 91       	pop	r27
     108:	af 91       	pop	r26
     10a:	9f 91       	pop	r25
     10c:	8f 91       	pop	r24
     10e:	7f 91       	pop	r23
     110:	6f 91       	pop	r22
     112:	5f 91       	pop	r21
     114:	4f 91       	pop	r20
     116:	3f 91       	pop	r19
     118:	2f 91       	pop	r18
     11a:	0f 90       	pop	r0
     11c:	0f be       	out	0x3f, r0	; 63
     11e:	0f 90       	pop	r0
     120:	1f 90       	pop	r1
     122:	18 95       	reti

00000124 <__vector_2>:
ISR(INT1_vect)
{
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	2f 93       	push	r18
     130:	3f 93       	push	r19
     132:	4f 93       	push	r20
     134:	5f 93       	push	r21
     136:	6f 93       	push	r22
     138:	7f 93       	push	r23
     13a:	8f 93       	push	r24
     13c:	9f 93       	push	r25
     13e:	af 93       	push	r26
     140:	bf 93       	push	r27
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
	p2f_INT1();
     14e:	e0 91 a8 00 	lds	r30, 0x00A8
     152:	f0 91 a9 00 	lds	r31, 0x00A9
     156:	09 95       	icall
}
     158:	cf 91       	pop	r28
     15a:	df 91       	pop	r29
     15c:	ff 91       	pop	r31
     15e:	ef 91       	pop	r30
     160:	bf 91       	pop	r27
     162:	af 91       	pop	r26
     164:	9f 91       	pop	r25
     166:	8f 91       	pop	r24
     168:	7f 91       	pop	r23
     16a:	6f 91       	pop	r22
     16c:	5f 91       	pop	r21
     16e:	4f 91       	pop	r20
     170:	3f 91       	pop	r19
     172:	2f 91       	pop	r18
     174:	0f 90       	pop	r0
     176:	0f be       	out	0x3f, r0	; 63
     178:	0f 90       	pop	r0
     17a:	1f 90       	pop	r1
     17c:	18 95       	reti

0000017e <__vector_3>:
ISR(INT2_vect)
{
     17e:	1f 92       	push	r1
     180:	0f 92       	push	r0
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	0f 92       	push	r0
     186:	11 24       	eor	r1, r1
     188:	2f 93       	push	r18
     18a:	3f 93       	push	r19
     18c:	4f 93       	push	r20
     18e:	5f 93       	push	r21
     190:	6f 93       	push	r22
     192:	7f 93       	push	r23
     194:	8f 93       	push	r24
     196:	9f 93       	push	r25
     198:	af 93       	push	r26
     19a:	bf 93       	push	r27
     19c:	ef 93       	push	r30
     19e:	ff 93       	push	r31
     1a0:	df 93       	push	r29
     1a2:	cf 93       	push	r28
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
	p2f_INT2();
     1a8:	e0 91 aa 00 	lds	r30, 0x00AA
     1ac:	f0 91 ab 00 	lds	r31, 0x00AB
     1b0:	09 95       	icall
}
     1b2:	cf 91       	pop	r28
     1b4:	df 91       	pop	r29
     1b6:	ff 91       	pop	r31
     1b8:	ef 91       	pop	r30
     1ba:	bf 91       	pop	r27
     1bc:	af 91       	pop	r26
     1be:	9f 91       	pop	r25
     1c0:	8f 91       	pop	r24
     1c2:	7f 91       	pop	r23
     1c4:	6f 91       	pop	r22
     1c6:	5f 91       	pop	r21
     1c8:	4f 91       	pop	r20
     1ca:	3f 91       	pop	r19
     1cc:	2f 91       	pop	r18
     1ce:	0f 90       	pop	r0
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	0f 90       	pop	r0
     1d4:	1f 90       	pop	r1
     1d6:	18 95       	reti

000001d8 <setcallback_INT0>:

void setcallback_INT0(void(*p2func)(void))
{
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	00 d0       	rcall	.+0      	; 0x1de <setcallback_INT0+0x6>
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	9a 83       	std	Y+2, r25	; 0x02
     1e4:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT0=p2func;
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ea:	90 93 ad 00 	sts	0x00AD, r25
     1ee:	80 93 ac 00 	sts	0x00AC, r24
}
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <setcallback_INT1>:
void setcallback_INT1(void(*p2func)(void))
{
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <setcallback_INT1+0x6>
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	9a 83       	std	Y+2, r25	; 0x02
     208:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT1=p2func;
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	9a 81       	ldd	r25, Y+2	; 0x02
     20e:	90 93 a9 00 	sts	0x00A9, r25
     212:	80 93 a8 00 	sts	0x00A8, r24
}
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	cf 91       	pop	r28
     21c:	df 91       	pop	r29
     21e:	08 95       	ret

00000220 <setcallback_INT2>:
void setcallback_INT2(void(*p2func)(void))
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	00 d0       	rcall	.+0      	; 0x226 <setcallback_INT2+0x6>
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	9a 83       	std	Y+2, r25	; 0x02
     22c:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT2=p2func;
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	9a 81       	ldd	r25, Y+2	; 0x02
     232:	90 93 ab 00 	sts	0x00AB, r25
     236:	80 93 aa 00 	sts	0x00AA, r24
}
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	cf 91       	pop	r28
     240:	df 91       	pop	r29
     242:	08 95       	ret

00000244 <UART_init>:
 *      Author: Ali Ehab
 */
#include "UART.h"

void UART_init()
{
     244:	df 93       	push	r29
     246:	cf 93       	push	r28
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
#if RX_MODE == ENABLE
	UCSRB|=(1<<RXEN);
     24c:	aa e2       	ldi	r26, 0x2A	; 42
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	ea e2       	ldi	r30, 0x2A	; 42
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	80 81       	ld	r24, Z
     256:	80 61       	ori	r24, 0x10	; 16
     258:	8c 93       	st	X, r24
#endif

#if TX_MODE == ENABLE
	UCSRB|=((1<<URSEL)|(1<<TXEN));
     25a:	aa e2       	ldi	r26, 0x2A	; 42
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	ea e2       	ldi	r30, 0x2A	; 42
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	88 68       	ori	r24, 0x88	; 136
     266:	8c 93       	st	X, r24
#endif

#if PARITY_MODE == PARITY_MODE_DISABLED
	UCSRC&=~(1<<UPM0);
     268:	a0 e4       	ldi	r26, 0x40	; 64
     26a:	b0 e0       	ldi	r27, 0x00	; 0
     26c:	e0 e4       	ldi	r30, 0x40	; 64
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	8f 7e       	andi	r24, 0xEF	; 239
     274:	8c 93       	st	X, r24
    UCSRC&=~(1<<UPM1);
     276:	a0 e4       	ldi	r26, 0x40	; 64
     278:	b0 e0       	ldi	r27, 0x00	; 0
     27a:	e0 e4       	ldi	r30, 0x40	; 64
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	80 81       	ld	r24, Z
     280:	8f 7d       	andi	r24, 0xDF	; 223
     282:	8c 93       	st	X, r24
//#elif STOP_BIT_MODE == STOP_BIT_TWO
//    UCSRC|=(1<<URSEL|1<<USBS);
//#endif

#if BIT_DATA_SIZE == BIT_SIZE_EIGHT
   UCSRC|=((1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1));
     284:	a0 e4       	ldi	r26, 0x40	; 64
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	e0 e4       	ldi	r30, 0x40	; 64
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	86 68       	ori	r24, 0x86	; 134
     290:	8c 93       	st	X, r24

#endif
   UBRRL = BAUD_RATE_NORMAL;
     292:	e9 e2       	ldi	r30, 0x29	; 41
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	87 e6       	ldi	r24, 0x67	; 103
     298:	80 83       	st	Z, r24
   UBRRH = (BAUD_RATE_NORMAL >> 8);
     29a:	e0 e4       	ldi	r30, 0x40	; 64
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	10 82       	st	Z, r1

}
     2a0:	cf 91       	pop	r28
     2a2:	df 91       	pop	r29
     2a4:	08 95       	ret

000002a6 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	0f 92       	push	r0
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	89 83       	std	Y+1, r24	; 0x01
/* Wait for empty transmit buffer */
while ( !( UCSRA & (1<<UDRE)) )
     2b2:	eb e2       	ldi	r30, 0x2B	; 43
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	88 2f       	mov	r24, r24
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	80 72       	andi	r24, 0x20	; 32
     2be:	90 70       	andi	r25, 0x00	; 0
     2c0:	00 97       	sbiw	r24, 0x00	; 0
     2c2:	b9 f3       	breq	.-18     	; 0x2b2 <USART_Transmit+0xc>
;
/* Put data into buffer, sends the data */
UDR = data;
     2c4:	ec e2       	ldi	r30, 0x2C	; 44
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	89 81       	ldd	r24, Y+1	; 0x01
     2ca:	80 83       	st	Z, r24
}
     2cc:	0f 90       	pop	r0
     2ce:	cf 91       	pop	r28
     2d0:	df 91       	pop	r29
     2d2:	08 95       	ret

000002d4 <USART_Receive>:


unsigned char USART_Receive( void )
{
     2d4:	df 93       	push	r29
     2d6:	cf 93       	push	r28
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
/* Wait for data to be received */
while ( !(UCSRA & (1<<RXC)) )
     2dc:	eb e2       	ldi	r30, 0x2B	; 43
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	80 81       	ld	r24, Z
     2e2:	88 23       	and	r24, r24
     2e4:	dc f7       	brge	.-10     	; 0x2dc <USART_Receive+0x8>
;
/* Get and return received data from buffer */
return UDR;
     2e6:	ec e2       	ldi	r30, 0x2C	; 44
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
}
     2ec:	cf 91       	pop	r28
     2ee:	df 91       	pop	r29
     2f0:	08 95       	ret

000002f2 <TIMER0_SET_OCR>:
#include "TIMER0.h"

void (*p2f_T0_OVF)(void);
void (*p2f_T0_OCF)(void);
void TIMER0_SET_OCR(unsigned char duty_cycle)
{
     2f2:	df 93       	push	r29
     2f4:	cf 93       	push	r28
     2f6:	0f 92       	push	r0
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	89 83       	std	Y+1, r24	; 0x01
	OCR0=duty_cycle;
     2fe:	ec e5       	ldi	r30, 0x5C	; 92
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	80 83       	st	Z, r24
}
     306:	0f 90       	pop	r0
     308:	cf 91       	pop	r28
     30a:	df 91       	pop	r29
     30c:	08 95       	ret

0000030e <T0_INIT>:

void T0_INIT()
{
     30e:	df 93       	push	r29
     310:	cf 93       	push	r28
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
	TCNT0=T0_TCNT0_VAL;
     316:	e2 e5       	ldi	r30, 0x52	; 82
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	10 82       	st	Z, r1
#elif T0_MODE == CTCMODE
   CLR_BIT(TCCR0,WGM00);
   SET_BIT(TCCR0,WGM01);

#elif T0_MODE == FASTPWMMODE
   SET_BIT(TCCR0,WGM00);
     31c:	a3 e5       	ldi	r26, 0x53	; 83
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	e3 e5       	ldi	r30, 0x53	; 83
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	80 64       	ori	r24, 0x40	; 64
     328:	8c 93       	st	X, r24
   SET_BIT(TCCR0,WGM01);
     32a:	a3 e5       	ldi	r26, 0x53	; 83
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	e3 e5       	ldi	r30, 0x53	; 83
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	88 60       	ori	r24, 0x08	; 8
     336:	8c 93       	st	X, r24

#endif


#if COM_MODE == NORMAL
   CLR_BIT(TCCR0,COM00);
     338:	a3 e5       	ldi	r26, 0x53	; 83
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	e3 e5       	ldi	r30, 0x53	; 83
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	80 81       	ld	r24, Z
     342:	8f 7e       	andi	r24, 0xEF	; 239
     344:	8c 93       	st	X, r24
   CLR_BIT(TCCR0,COM01);
     346:	a3 e5       	ldi	r26, 0x53	; 83
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	e3 e5       	ldi	r30, 0x53	; 83
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	8f 7d       	andi	r24, 0xDF	; 223
     352:	8c 93       	st	X, r24
#elif MODE_PWM_ON_COMPARE == NON_INVERTED_PWM
   CLR_BIT(TCCR0,COM00);
   SET_BIT(TCCR0,COM01);

#elif MODE_PWM_ON_COMPARE == INVERTED_PWM
   SET_BIT(TCCR0,COM00);
     354:	a3 e5       	ldi	r26, 0x53	; 83
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	e3 e5       	ldi	r30, 0x53	; 83
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	80 61       	ori	r24, 0x10	; 16
     360:	8c 93       	st	X, r24
   SET_BIT(TCCR0,COM01);
     362:	a3 e5       	ldi	r26, 0x53	; 83
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	e3 e5       	ldi	r30, 0x53	; 83
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	80 62       	ori	r24, 0x20	; 32
     36e:	8c 93       	st	X, r24
   CLR_BIT(TCCR0,CS00);
   CLR_BIT(TCCR0,CS01);
   SET_BIT(TCCR0,CS02);

#elif CLKSELBIT == PRE1024
   SET_BIT(TCCR0,CS00);
     370:	a3 e5       	ldi	r26, 0x53	; 83
     372:	b0 e0       	ldi	r27, 0x00	; 0
     374:	e3 e5       	ldi	r30, 0x53	; 83
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	80 81       	ld	r24, Z
     37a:	81 60       	ori	r24, 0x01	; 1
     37c:	8c 93       	st	X, r24
   CLR_BIT(TCCR0,CS01);
     37e:	a3 e5       	ldi	r26, 0x53	; 83
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	e3 e5       	ldi	r30, 0x53	; 83
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	8d 7f       	andi	r24, 0xFD	; 253
     38a:	8c 93       	st	X, r24
   SET_BIT(TCCR0,CS02);
     38c:	a3 e5       	ldi	r26, 0x53	; 83
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	e3 e5       	ldi	r30, 0x53	; 83
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	84 60       	ori	r24, 0x04	; 4
     398:	8c 93       	st	X, r24
#endif

#if T0_INT_MSK_NORMAL == ENABLE
   SET_BIT(TIMSK,TOIE0);
#elif T0_INT_MSK_NORMAL == DISABLE
   CLR_BIT(TIMSK,TOIE0);
     39a:	a9 e5       	ldi	r26, 0x59	; 89
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	e9 e5       	ldi	r30, 0x59	; 89
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 81       	ld	r24, Z
     3a4:	8e 7f       	andi	r24, 0xFE	; 254
     3a6:	8c 93       	st	X, r24
   CLR_BIT(TIMSK,OCIE0);
#endif



}
     3a8:	cf 91       	pop	r28
     3aa:	df 91       	pop	r29
     3ac:	08 95       	ret

000003ae <setcallback_T0_TOV>:


void setcallback_T0_TOV(void(*p2f)(void))
{
     3ae:	df 93       	push	r29
     3b0:	cf 93       	push	r28
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <setcallback_T0_TOV+0x6>
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	9a 83       	std	Y+2, r25	; 0x02
     3ba:	89 83       	std	Y+1, r24	; 0x01
	p2f_T0_OVF=p2f;
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	9a 81       	ldd	r25, Y+2	; 0x02
     3c0:	90 93 af 00 	sts	0x00AF, r25
     3c4:	80 93 ae 00 	sts	0x00AE, r24
}
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	cf 91       	pop	r28
     3ce:	df 91       	pop	r29
     3d0:	08 95       	ret

000003d2 <setcallback_T0_OCF>:
void setcallback_T0_OCF(void(*p2f)(void))
{
     3d2:	df 93       	push	r29
     3d4:	cf 93       	push	r28
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <setcallback_T0_OCF+0x6>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
	p2f_T0_OCF=p2f;
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
     3e4:	90 93 b1 00 	sts	0x00B1, r25
     3e8:	80 93 b0 00 	sts	0x00B0, r24
}
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	cf 91       	pop	r28
     3f2:	df 91       	pop	r29
     3f4:	08 95       	ret

000003f6 <__vector_11>:
ISR(TIMER0_OVF_vect)
{
     3f6:	1f 92       	push	r1
     3f8:	0f 92       	push	r0
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	0f 92       	push	r0
     3fe:	11 24       	eor	r1, r1
     400:	2f 93       	push	r18
     402:	3f 93       	push	r19
     404:	4f 93       	push	r20
     406:	5f 93       	push	r21
     408:	6f 93       	push	r22
     40a:	7f 93       	push	r23
     40c:	8f 93       	push	r24
     40e:	9f 93       	push	r25
     410:	af 93       	push	r26
     412:	bf 93       	push	r27
     414:	ef 93       	push	r30
     416:	ff 93       	push	r31
     418:	df 93       	push	r29
     41a:	cf 93       	push	r28
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
	p2f_T0_OVF();
     420:	e0 91 ae 00 	lds	r30, 0x00AE
     424:	f0 91 af 00 	lds	r31, 0x00AF
     428:	09 95       	icall
}
     42a:	cf 91       	pop	r28
     42c:	df 91       	pop	r29
     42e:	ff 91       	pop	r31
     430:	ef 91       	pop	r30
     432:	bf 91       	pop	r27
     434:	af 91       	pop	r26
     436:	9f 91       	pop	r25
     438:	8f 91       	pop	r24
     43a:	7f 91       	pop	r23
     43c:	6f 91       	pop	r22
     43e:	5f 91       	pop	r21
     440:	4f 91       	pop	r20
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     450:	1f 92       	push	r1
     452:	0f 92       	push	r0
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	0f 92       	push	r0
     458:	11 24       	eor	r1, r1
     45a:	2f 93       	push	r18
     45c:	3f 93       	push	r19
     45e:	4f 93       	push	r20
     460:	5f 93       	push	r21
     462:	6f 93       	push	r22
     464:	7f 93       	push	r23
     466:	8f 93       	push	r24
     468:	9f 93       	push	r25
     46a:	af 93       	push	r26
     46c:	bf 93       	push	r27
     46e:	ef 93       	push	r30
     470:	ff 93       	push	r31
     472:	df 93       	push	r29
     474:	cf 93       	push	r28
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
	p2f_T0_OCF();
     47a:	e0 91 b0 00 	lds	r30, 0x00B0
     47e:	f0 91 b1 00 	lds	r31, 0x00B1
     482:	09 95       	icall
}
     484:	cf 91       	pop	r28
     486:	df 91       	pop	r29
     488:	ff 91       	pop	r31
     48a:	ef 91       	pop	r30
     48c:	bf 91       	pop	r27
     48e:	af 91       	pop	r26
     490:	9f 91       	pop	r25
     492:	8f 91       	pop	r24
     494:	7f 91       	pop	r23
     496:	6f 91       	pop	r22
     498:	5f 91       	pop	r21
     49a:	4f 91       	pop	r20
     49c:	3f 91       	pop	r19
     49e:	2f 91       	pop	r18
     4a0:	0f 90       	pop	r0
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	0f 90       	pop	r0
     4a6:	1f 90       	pop	r1
     4a8:	18 95       	reti

000004aa <SPI_init>:
 *  Created on: Oct 22, 2021
 *      Author: Ali Ehab
 */

#include "SPI.h"
void SPI_init(void) {
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
#if SPI_ENABLE == ENABLE
	SET_BIT(SPCR, SPE);
     4b2:	ad e2       	ldi	r26, 0x2D	; 45
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	ed e2       	ldi	r30, 0x2D	; 45
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	80 64       	ori	r24, 0x40	; 64
     4be:	8c 93       	st	X, r24
#endif


#if SPI_MODE == SLAVE
	CLR_BIT(SPCR, MSTR);
     4c0:	ad e2       	ldi	r26, 0x2D	; 45
     4c2:	b0 e0       	ldi	r27, 0x00	; 0
     4c4:	ed e2       	ldi	r30, 0x2D	; 45
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	8f 7e       	andi	r24, 0xEF	; 239
     4cc:	8c 93       	st	X, r24
#endif


#if CLK_POLARITY_LEADING_RISING == ENABLE
	CLR_BIT(SPCR, CPOL);
     4ce:	ad e2       	ldi	r26, 0x2D	; 45
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	ed e2       	ldi	r30, 0x2D	; 45
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	87 7f       	andi	r24, 0xF7	; 247
     4da:	8c 93       	st	X, r24
	SET_BIT(SPCR, CPOL);
#endif


#if CLK_PHASE_LEADING_SAMPLE == ENABLE
	CLR_BIT(SPCR, CPHA);
     4dc:	ad e2       	ldi	r26, 0x2D	; 45
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	ed e2       	ldi	r30, 0x2D	; 45
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	8b 7f       	andi	r24, 0xFB	; 251
     4e8:	8c 93       	st	X, r24
#elif CLK_PHASE_LEADING_SETUP == ENABLE
	SET_BIT(SPCR, CPHA);
#endif

#if SPI_CLK_RATE == SPI_CLK_RATE_16
	SET_BIT(SPCR, SPR0);
     4ea:	ad e2       	ldi	r26, 0x2D	; 45
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	ed e2       	ldi	r30, 0x2D	; 45
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	81 60       	ori	r24, 0x01	; 1
     4f6:	8c 93       	st	X, r24


#endif

}
     4f8:	cf 91       	pop	r28
     4fa:	df 91       	pop	r29
     4fc:	08 95       	ret

000004fe <SPI_SlaveReceive>:
unsigned char SPI_SlaveReceive(void) {
     4fe:	df 93       	push	r29
     500:	cf 93       	push	r28
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
	/* Wait for reception complete */
	while (!(SPSR & (1 << SPIF)))
     506:	ee e2       	ldi	r30, 0x2E	; 46
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	88 23       	and	r24, r24
     50e:	dc f7       	brge	.-10     	; 0x506 <SPI_SlaveReceive+0x8>
		;
	/* Return data register */
	return SPDR;
     510:	ef e2       	ldi	r30, 0x2F	; 47
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
}
     516:	cf 91       	pop	r28
     518:	df 91       	pop	r29
     51a:	08 95       	ret

0000051c <I2C_Slave_Init>:
 */

#include "I2C_SALVE.h"

void I2C_Slave_Init(uint8_t slave_address)
{
     51c:	df 93       	push	r29
     51e:	cf 93       	push	r28
     520:	0f 92       	push	r0
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	89 83       	std	Y+1, r24	; 0x01
	TWAR = slave_address;						/* Assign address in TWI address register */
     528:	e2 e2       	ldi	r30, 0x22	; 34
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	80 83       	st	Z, r24
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);	/* Enable TWI, Enable ack generation, clear TWI interrupt */
     530:	e6 e5       	ldi	r30, 0x56	; 86
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	84 ec       	ldi	r24, 0xC4	; 196
     536:	80 83       	st	Z, r24
}
     538:	0f 90       	pop	r0
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	08 95       	ret

00000540 <I2C_Slave_Listen>:

int8_t I2C_Slave_Listen()
{
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	00 d0       	rcall	.+0      	; 0x546 <I2C_Slave_Listen+0x6>
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
//	while(1)
//	{
		uint8_t status;							/* Declare variable */
		while (!(TWCR & (1<<TWINT)));			/* Wait to be addressed */
     54a:	e6 e5       	ldi	r30, 0x56	; 86
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	88 23       	and	r24, r24
     552:	dc f7       	brge	.-10     	; 0x54a <I2C_Slave_Listen+0xa>
//		if (status == 0x70 || status == 0x78)	/* Check weather general call received & ack returned (TWEA = 1) */
//		return 2;								/* If yes then return 2 to indicate ack returned */
//		else
//		continue;								/* Else continue */
//	}
}
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	08 95       	ret

0000055e <I2C_Slave_Transmit>:

int8_t I2C_Slave_Transmit(char data)
{
     55e:	df 93       	push	r29
     560:	cf 93       	push	r28
     562:	00 d0       	rcall	.+0      	; 0x564 <I2C_Slave_Transmit+0x6>
     564:	0f 92       	push	r0
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;
	TWDR = data;								/* Write data to TWDR to be transmitted */
     56c:	e3 e2       	ldi	r30, 0x23	; 35
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	8a 81       	ldd	r24, Y+2	; 0x02
     572:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);		/* Enable TWI and clear interrupt flag */
     574:	e6 e5       	ldi	r30, 0x56	; 86
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	84 ec       	ldi	r24, 0xC4	; 196
     57a:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (Write operation) */
     57c:	e6 e5       	ldi	r30, 0x56	; 86
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	88 23       	and	r24, r24
     584:	dc f7       	brge	.-10     	; 0x57c <I2C_Slave_Transmit+0x1e>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
     586:	e1 e2       	ldi	r30, 0x21	; 33
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	88 7f       	andi	r24, 0xF8	; 248
     58e:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	80 3a       	cpi	r24, 0xA0	; 160
     594:	51 f4       	brne	.+20     	; 0x5aa <I2C_Slave_Transmit+0x4c>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -1 */
     596:	a6 e5       	ldi	r26, 0x56	; 86
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e6 e5       	ldi	r30, 0x56	; 86
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	80 68       	ori	r24, 0x80	; 128
     5a2:	8c 93       	st	X, r24
		return -1;
     5a4:	8f ef       	ldi	r24, 0xFF	; 255
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	1a c0       	rjmp	.+52     	; 0x5de <I2C_Slave_Transmit+0x80>
	}
	if (status == 0xB8)							/* Check weather data transmitted & ack received */
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	88 3b       	cpi	r24, 0xB8	; 184
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <I2C_Slave_Transmit+0x56>
		return 0;									/* If yes then return 0 */
     5b0:	1b 82       	std	Y+3, r1	; 0x03
     5b2:	15 c0       	rjmp	.+42     	; 0x5de <I2C_Slave_Transmit+0x80>
	if (status == 0xC0)							/* Check weather data transmitted & nack received */
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	80 3c       	cpi	r24, 0xC0	; 192
     5b8:	51 f4       	brne	.+20     	; 0x5ce <I2C_Slave_Transmit+0x70>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return -2 */
     5ba:	a6 e5       	ldi	r26, 0x56	; 86
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e6 e5       	ldi	r30, 0x56	; 86
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	80 81       	ld	r24, Z
     5c4:	80 68       	ori	r24, 0x80	; 128
     5c6:	8c 93       	st	X, r24
		return -2;
     5c8:	8e ef       	ldi	r24, 0xFE	; 254
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	08 c0       	rjmp	.+16     	; 0x5de <I2C_Slave_Transmit+0x80>
	}
	if (status == 0xC8)							/* If last data byte transmitted with ack received TWEA = 0 */
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	88 3c       	cpi	r24, 0xC8	; 200
     5d2:	19 f4       	brne	.+6      	; 0x5da <I2C_Slave_Transmit+0x7c>
	return -3;									/* If yes then return -3 */
     5d4:	8d ef       	ldi	r24, 0xFD	; 253
     5d6:	8b 83       	std	Y+3, r24	; 0x03
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <I2C_Slave_Transmit+0x80>
	else										/* else return -4 */
	return -4;
     5da:	8c ef       	ldi	r24, 0xFC	; 252
     5dc:	8b 83       	std	Y+3, r24	; 0x03
     5de:	8b 81       	ldd	r24, Y+3	; 0x03
}
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	cf 91       	pop	r28
     5e8:	df 91       	pop	r29
     5ea:	08 95       	ret

000005ec <I2C_Slave_Receive>:

char I2C_Slave_Receive()
{
     5ec:	df 93       	push	r29
     5ee:	cf 93       	push	r28
     5f0:	00 d0       	rcall	.+0      	; 0x5f2 <I2C_Slave_Receive+0x6>
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t status;								/* Declare variable */
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);		/* Enable TWI, generation of ack and clear interrupt flag */
     5f6:	e6 e5       	ldi	r30, 0x56	; 86
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	84 ec       	ldi	r24, 0xC4	; 196
     5fc:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));				/* Wait until TWI finish its current job (read operation) */
     5fe:	e6 e5       	ldi	r30, 0x56	; 86
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	88 23       	and	r24, r24
     606:	dc f7       	brge	.-10     	; 0x5fe <I2C_Slave_Receive+0x12>
	status = TWSR & 0xF8;						/* Read TWI status register with masking lower three bits */
     608:	e1 e2       	ldi	r30, 0x21	; 33
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	88 7f       	andi	r24, 0xF8	; 248
     610:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x80 || status == 0x90)		/* Check weather data received & ack returned (TWEA = 1) */
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	80 38       	cpi	r24, 0x80	; 128
     616:	19 f0       	breq	.+6      	; 0x61e <I2C_Slave_Receive+0x32>
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	80 39       	cpi	r24, 0x90	; 144
     61c:	29 f4       	brne	.+10     	; 0x628 <I2C_Slave_Receive+0x3c>
	return TWDR;								/* If yes then return received data */
     61e:	e3 e2       	ldi	r30, 0x23	; 35
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	8a 83       	std	Y+2, r24	; 0x02
     626:	1a c0       	rjmp	.+52     	; 0x65c <I2C_Slave_Receive+0x70>
	if (status == 0x88 || status == 0x98)		/* Check weather data received, nack returned and switched to not addressed slave mode */
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	88 38       	cpi	r24, 0x88	; 136
     62c:	19 f0       	breq	.+6      	; 0x634 <I2C_Slave_Receive+0x48>
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	88 39       	cpi	r24, 0x98	; 152
     632:	29 f4       	brne	.+10     	; 0x63e <I2C_Slave_Receive+0x52>
	return TWDR;								/* If yes then return received data */
     634:	e3 e2       	ldi	r30, 0x23	; 35
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	8a 83       	std	Y+2, r24	; 0x02
     63c:	0f c0       	rjmp	.+30     	; 0x65c <I2C_Slave_Receive+0x70>
	if (status == 0xA0)							/* Check weather STOP/REPEATED START received */
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	80 3a       	cpi	r24, 0xA0	; 160
     642:	51 f4       	brne	.+20     	; 0x658 <I2C_Slave_Receive+0x6c>
	{
		TWCR |= (1<<TWINT);						/* If yes then clear interrupt flag & return 0 */
     644:	a6 e5       	ldi	r26, 0x56	; 86
     646:	b0 e0       	ldi	r27, 0x00	; 0
     648:	e6 e5       	ldi	r30, 0x56	; 86
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	80 81       	ld	r24, Z
     64e:	80 68       	ori	r24, 0x80	; 128
     650:	8c 93       	st	X, r24
		return -1;
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	8a 83       	std	Y+2, r24	; 0x02
     656:	02 c0       	rjmp	.+4      	; 0x65c <I2C_Slave_Receive+0x70>
	}
	else
	return -2;									/* Else return 1 */
     658:	8e ef       	ldi	r24, 0xFE	; 254
     65a:	8a 83       	std	Y+2, r24	; 0x02
     65c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	cf 91       	pop	r28
     664:	df 91       	pop	r29
     666:	08 95       	ret

00000668 <I2C_Init>:


#include "I2C_MASTER.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	df 93       	push	r29
     66e:	cf 93       	push	r28
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
     674:	00 e2       	ldi	r16, 0x20	; 32
     676:	10 e0       	ldi	r17, 0x00	; 0
     678:	e1 e2       	ldi	r30, 0x21	; 33
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	10 82       	st	Z, r1
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e4       	ldi	r21, 0x40	; 64
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e1       	ldi	r24, 0x10	; 16
     68c:	93 e4       	ldi	r25, 0x43	; 67
     68e:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	bc 01       	movw	r22, r24
     698:	cd 01       	movw	r24, r26
     69a:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
     69e:	dc 01       	movw	r26, r24
     6a0:	cb 01       	movw	r24, r22
     6a2:	f8 01       	movw	r30, r16
     6a4:	80 83       	st	Z, r24
}
     6a6:	cf 91       	pop	r28
     6a8:	df 91       	pop	r29
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	08 95       	ret

000006b0 <I2C_Start>:


uint8_t I2C_Start(char write_address)						/* I2C start function */
{
     6b0:	df 93       	push	r29
     6b2:	cf 93       	push	r28
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <I2C_Start+0x6>
     6b6:	0f 92       	push	r0
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     6be:	e6 e5       	ldi	r30, 0x56	; 86
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	84 ea       	ldi	r24, 0xA4	; 164
     6c4:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     6c6:	e6 e5       	ldi	r30, 0x56	; 86
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	80 81       	ld	r24, Z
     6cc:	88 23       	and	r24, r24
     6ce:	dc f7       	brge	.-10     	; 0x6c6 <I2C_Start+0x16>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     6d0:	e1 e2       	ldi	r30, 0x21	; 33
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	88 7f       	andi	r24, 0xF8	; 248
     6d8:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	88 30       	cpi	r24, 0x08	; 8
     6de:	11 f0       	breq	.+4      	; 0x6e4 <I2C_Start+0x34>
	return 0;												/* If not then return 0 to indicate start condition fail */
     6e0:	1b 82       	std	Y+3, r1	; 0x03
     6e2:	20 c0       	rjmp	.+64     	; 0x724 <I2C_Start+0x74>
	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
     6e4:	e3 e2       	ldi	r30, 0x23	; 35
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ea:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     6ec:	e6 e5       	ldi	r30, 0x56	; 86
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	84 e8       	ldi	r24, 0x84	; 132
     6f2:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     6f4:	e6 e5       	ldi	r30, 0x56	; 86
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	80 81       	ld	r24, Z
     6fa:	88 23       	and	r24, r24
     6fc:	dc f7       	brge	.-10     	; 0x6f4 <I2C_Start+0x44>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     6fe:	e1 e2       	ldi	r30, 0x21	; 33
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	88 7f       	andi	r24, 0xF8	; 248
     706:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	88 31       	cpi	r24, 0x18	; 24
     70c:	19 f4       	brne	.+6      	; 0x714 <I2C_Start+0x64>
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	8b 83       	std	Y+3, r24	; 0x03
     712:	08 c0       	rjmp	.+16     	; 0x724 <I2C_Start+0x74>
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	80 32       	cpi	r24, 0x20	; 32
     718:	19 f4       	brne	.+6      	; 0x720 <I2C_Start+0x70>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	8b 83       	std	Y+3, r24	; 0x03
     71e:	02 c0       	rjmp	.+4      	; 0x724 <I2C_Start+0x74>
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     720:	83 e0       	ldi	r24, 0x03	; 3
     722:	8b 83       	std	Y+3, r24	; 0x03
     724:	8b 81       	ldd	r24, Y+3	; 0x03
}
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	cf 91       	pop	r28
     72e:	df 91       	pop	r29
     730:	08 95       	ret

00000732 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char read_address)				/* I2C repeated start function */
{
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	00 d0       	rcall	.+0      	; 0x738 <I2C_Repeated_Start+0x6>
     738:	0f 92       	push	r0
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     740:	e6 e5       	ldi	r30, 0x56	; 86
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	84 ea       	ldi	r24, 0xA4	; 164
     746:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     748:	e6 e5       	ldi	r30, 0x56	; 86
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	88 23       	and	r24, r24
     750:	dc f7       	brge	.-10     	; 0x748 <I2C_Repeated_Start+0x16>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     752:	e1 e2       	ldi	r30, 0x21	; 33
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	88 7f       	andi	r24, 0xF8	; 248
     75a:	89 83       	std	Y+1, r24	; 0x01
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	80 31       	cpi	r24, 0x10	; 16
     760:	11 f0       	breq	.+4      	; 0x766 <I2C_Repeated_Start+0x34>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     762:	1b 82       	std	Y+3, r1	; 0x03
     764:	20 c0       	rjmp	.+64     	; 0x7a6 <I2C_Repeated_Start+0x74>
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
     766:	e3 e2       	ldi	r30, 0x23	; 35
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     76e:	e6 e5       	ldi	r30, 0x56	; 86
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	84 e8       	ldi	r24, 0x84	; 132
     774:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     776:	e6 e5       	ldi	r30, 0x56	; 86
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	88 23       	and	r24, r24
     77e:	dc f7       	brge	.-10     	; 0x776 <I2C_Repeated_Start+0x44>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     780:	e1 e2       	ldi	r30, 0x21	; 33
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 81       	ld	r24, Z
     786:	88 7f       	andi	r24, 0xF8	; 248
     788:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	80 34       	cpi	r24, 0x40	; 64
     78e:	19 f4       	brne	.+6      	; 0x796 <I2C_Repeated_Start+0x64>
	return 1;												/* If yes then return 1 to indicate ack received */
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	8b 83       	std	Y+3, r24	; 0x03
     794:	08 c0       	rjmp	.+16     	; 0x7a6 <I2C_Repeated_Start+0x74>
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	80 32       	cpi	r24, 0x20	; 32
     79a:	19 f4       	brne	.+6      	; 0x7a2 <I2C_Repeated_Start+0x70>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	8b 83       	std	Y+3, r24	; 0x03
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <I2C_Repeated_Start+0x74>
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	8b 83       	std	Y+3, r24	; 0x03
     7a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	cf 91       	pop	r28
     7b0:	df 91       	pop	r29
     7b2:	08 95       	ret

000007b4 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     7bc:	e6 e5       	ldi	r30, 0x56	; 86
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	84 e9       	ldi	r24, 0x94	; 148
     7c2:	80 83       	st	Z, r24
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */
     7c4:	e6 e5       	ldi	r30, 0x56	; 86
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	88 2f       	mov	r24, r24
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	80 71       	andi	r24, 0x10	; 16
     7d0:	90 70       	andi	r25, 0x00	; 0
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	b9 f7       	brne	.-18     	; 0x7c4 <I2C_Stop+0x10>
}
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	08 95       	ret

000007dc <I2C_Start_Wait>:

void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <I2C_Start_Wait+0x6>
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
     7e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     7e8:	e6 e5       	ldi	r30, 0x56	; 86
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	84 ea       	ldi	r24, 0xA4	; 164
     7ee:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     7f0:	e6 e5       	ldi	r30, 0x56	; 86
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	88 23       	and	r24, r24
     7f8:	dc f7       	brge	.-10     	; 0x7f0 <I2C_Start_Wait+0x14>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     7fa:	e1 e2       	ldi	r30, 0x21	; 33
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	88 7f       	andi	r24, 0xF8	; 248
     802:	89 83       	std	Y+1, r24	; 0x01
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	88 30       	cpi	r24, 0x08	; 8
     808:	79 f7       	brne	.-34     	; 0x7e8 <I2C_Start_Wait+0xc>
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
     80a:	e3 e2       	ldi	r30, 0x23	; 35
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	8a 81       	ldd	r24, Y+2	; 0x02
     810:	80 83       	st	Z, r24
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     812:	e6 e5       	ldi	r30, 0x56	; 86
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	84 e8       	ldi	r24, 0x84	; 132
     818:	80 83       	st	Z, r24
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     81a:	e6 e5       	ldi	r30, 0x56	; 86
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	88 23       	and	r24, r24
     822:	dc f7       	brge	.-10     	; 0x81a <I2C_Start_Wait+0x3e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     824:	e1 e2       	ldi	r30, 0x21	; 33
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	88 7f       	andi	r24, 0xF8	; 248
     82c:	89 83       	std	Y+1, r24	; 0x01
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	88 31       	cpi	r24, 0x18	; 24
     832:	19 f0       	breq	.+6      	; 0x83a <I2C_Start_Wait+0x5e>
		{
			I2C_Stop();										/* If not then generate stop condition */
     834:	0e 94 da 03 	call	0x7b4	; 0x7b4 <I2C_Stop>
     838:	d7 cf       	rjmp	.-82     	; 0x7e8 <I2C_Start_Wait+0xc>
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	cf 91       	pop	r28
     840:	df 91       	pop	r29
     842:	08 95       	ret

00000844 <I2C_Write>:
}

uint8_t I2C_Write(char data)								/* I2C write function */
{
     844:	df 93       	push	r29
     846:	cf 93       	push	r28
     848:	00 d0       	rcall	.+0      	; 0x84a <I2C_Write+0x6>
     84a:	0f 92       	push	r0
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     852:	e3 e2       	ldi	r30, 0x23	; 35
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	8a 81       	ldd	r24, Y+2	; 0x02
     858:	80 83       	st	Z, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     85a:	e6 e5       	ldi	r30, 0x56	; 86
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	84 e8       	ldi	r24, 0x84	; 132
     860:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     862:	e6 e5       	ldi	r30, 0x56	; 86
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	88 23       	and	r24, r24
     86a:	dc f7       	brge	.-10     	; 0x862 <__stack+0x3>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     86c:	e1 e2       	ldi	r30, 0x21	; 33
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	88 7f       	andi	r24, 0xF8	; 248
     874:	89 83       	std	Y+1, r24	; 0x01
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	88 32       	cpi	r24, 0x28	; 40
     87a:	11 f4       	brne	.+4      	; 0x880 <__stack+0x21>
	return 0;												/* If yes then return 0 to indicate ack received */
     87c:	1b 82       	std	Y+3, r1	; 0x03
     87e:	08 c0       	rjmp	.+16     	; 0x890 <__stack+0x31>
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	80 33       	cpi	r24, 0x30	; 48
     884:	19 f4       	brne	.+6      	; 0x88c <__stack+0x2d>
	return 1;												/* If yes then return 1 to indicate nack received */
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	8b 83       	std	Y+3, r24	; 0x03
     88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	8b 83       	std	Y+3, r24	; 0x03
     890:	8b 81       	ldd	r24, Y+3	; 0x03
}
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	cf 91       	pop	r28
     89a:	df 91       	pop	r29
     89c:	08 95       	ret

0000089e <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
     89e:	df 93       	push	r29
     8a0:	cf 93       	push	r28
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     8a6:	e6 e5       	ldi	r30, 0x56	; 86
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	84 ec       	ldi	r24, 0xC4	; 196
     8ac:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     8ae:	e6 e5       	ldi	r30, 0x56	; 86
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	88 23       	and	r24, r24
     8b6:	dc f7       	brge	.-10     	; 0x8ae <I2C_Read_Ack+0x10>
	return TWDR;											/* Return received data */
     8b8:	e3 e2       	ldi	r30, 0x23	; 35
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
}
     8be:	cf 91       	pop	r28
     8c0:	df 91       	pop	r29
     8c2:	08 95       	ret

000008c4 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
     8c4:	df 93       	push	r29
     8c6:	cf 93       	push	r28
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     8cc:	e6 e5       	ldi	r30, 0x56	; 86
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	84 e8       	ldi	r24, 0x84	; 132
     8d2:	80 83       	st	Z, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     8d4:	e6 e5       	ldi	r30, 0x56	; 86
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	88 23       	and	r24, r24
     8dc:	dc f7       	brge	.-10     	; 0x8d4 <I2C_Read_Nack+0x10>
	return TWDR;											/* Return received data */
     8de:	e3 e2       	ldi	r30, 0x23	; 35
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
}
     8e4:	cf 91       	pop	r28
     8e6:	df 91       	pop	r29
     8e8:	08 95       	ret

000008ea <DIO_write>:
 */
#include "DIO.h"


void DIO_write(Channel_Type channel,State_Type state)
{
     8ea:	df 93       	push	r29
     8ec:	cf 93       	push	r28
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <DIO_write+0x6>
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
     8f4:	89 83       	std	Y+1, r24	; 0x01
     8f6:	6a 83       	std	Y+2, r22	; 0x02
	if(channel>=0&&channel<=7)
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	88 30       	cpi	r24, 0x08	; 8
     8fc:	60 f5       	brcc	.+88     	; 0x956 <DIO_write+0x6c>
	{
		if(state==1)
     8fe:	8a 81       	ldd	r24, Y+2	; 0x02
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	a1 f4       	brne	.+40     	; 0x92c <DIO_write+0x42>
		{
			SET_BIT(PORTA,channel);
     904:	ab e3       	ldi	r26, 0x3B	; 59
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	eb e3       	ldi	r30, 0x3B	; 59
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	48 2f       	mov	r20, r24
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	28 2f       	mov	r18, r24
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	02 2e       	mov	r0, r18
     91c:	02 c0       	rjmp	.+4      	; 0x922 <DIO_write+0x38>
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	0a 94       	dec	r0
     924:	e2 f7       	brpl	.-8      	; 0x91e <DIO_write+0x34>
     926:	84 2b       	or	r24, r20
     928:	8c 93       	st	X, r24
     92a:	bc c0       	rjmp	.+376    	; 0xaa4 <DIO_write+0x1ba>
		}
		else
		{
			CLR_BIT(PORTA,channel);
     92c:	ab e3       	ldi	r26, 0x3B	; 59
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	eb e3       	ldi	r30, 0x3B	; 59
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	48 2f       	mov	r20, r24
     938:	89 81       	ldd	r24, Y+1	; 0x01
     93a:	28 2f       	mov	r18, r24
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	02 2e       	mov	r0, r18
     944:	02 c0       	rjmp	.+4      	; 0x94a <DIO_write+0x60>
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	0a 94       	dec	r0
     94c:	e2 f7       	brpl	.-8      	; 0x946 <DIO_write+0x5c>
     94e:	80 95       	com	r24
     950:	84 23       	and	r24, r20
     952:	8c 93       	st	X, r24
     954:	a7 c0       	rjmp	.+334    	; 0xaa4 <DIO_write+0x1ba>
		}
	}
	else if(channel>=8&&channel<=15)
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	88 30       	cpi	r24, 0x08	; 8
     95a:	a8 f1       	brcs	.+106    	; 0x9c6 <DIO_write+0xdc>
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	80 31       	cpi	r24, 0x10	; 16
     960:	90 f5       	brcc	.+100    	; 0x9c6 <DIO_write+0xdc>
		{
			if(state==1)
     962:	8a 81       	ldd	r24, Y+2	; 0x02
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	b9 f4       	brne	.+46     	; 0x996 <DIO_write+0xac>
			{
				SET_BIT(PORTB,(channel-8));
     968:	a8 e3       	ldi	r26, 0x38	; 56
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	e8 e3       	ldi	r30, 0x38	; 56
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	48 2f       	mov	r20, r24
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	88 2f       	mov	r24, r24
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	9c 01       	movw	r18, r24
     97c:	28 50       	subi	r18, 0x08	; 8
     97e:	30 40       	sbci	r19, 0x00	; 0
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	02 2e       	mov	r0, r18
     986:	02 c0       	rjmp	.+4      	; 0x98c <DIO_write+0xa2>
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	0a 94       	dec	r0
     98e:	e2 f7       	brpl	.-8      	; 0x988 <DIO_write+0x9e>
     990:	84 2b       	or	r24, r20
     992:	8c 93       	st	X, r24
     994:	87 c0       	rjmp	.+270    	; 0xaa4 <DIO_write+0x1ba>
			}
			else
			{
				CLR_BIT(PORTB,(channel-8));
     996:	a8 e3       	ldi	r26, 0x38	; 56
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	e8 e3       	ldi	r30, 0x38	; 56
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	48 2f       	mov	r20, r24
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	88 2f       	mov	r24, r24
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	9c 01       	movw	r18, r24
     9aa:	28 50       	subi	r18, 0x08	; 8
     9ac:	30 40       	sbci	r19, 0x00	; 0
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	02 2e       	mov	r0, r18
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <DIO_write+0xd0>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	0a 94       	dec	r0
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <DIO_write+0xcc>
     9be:	80 95       	com	r24
     9c0:	84 23       	and	r24, r20
     9c2:	8c 93       	st	X, r24
     9c4:	6f c0       	rjmp	.+222    	; 0xaa4 <DIO_write+0x1ba>
			}
		}
	else if(channel>=16&&channel<=23)
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	80 31       	cpi	r24, 0x10	; 16
     9ca:	a8 f1       	brcs	.+106    	; 0xa36 <DIO_write+0x14c>
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	88 31       	cpi	r24, 0x18	; 24
     9d0:	90 f5       	brcc	.+100    	; 0xa36 <DIO_write+0x14c>
			{
				if(state==1)
     9d2:	8a 81       	ldd	r24, Y+2	; 0x02
     9d4:	81 30       	cpi	r24, 0x01	; 1
     9d6:	b9 f4       	brne	.+46     	; 0xa06 <DIO_write+0x11c>
				{
					SET_BIT(PORTC,(channel-16));
     9d8:	a5 e3       	ldi	r26, 0x35	; 53
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	e5 e3       	ldi	r30, 0x35	; 53
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	48 2f       	mov	r20, r24
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	88 2f       	mov	r24, r24
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	9c 01       	movw	r18, r24
     9ec:	20 51       	subi	r18, 0x10	; 16
     9ee:	30 40       	sbci	r19, 0x00	; 0
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	02 2e       	mov	r0, r18
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <DIO_write+0x112>
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	0a 94       	dec	r0
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <DIO_write+0x10e>
     a00:	84 2b       	or	r24, r20
     a02:	8c 93       	st	X, r24
     a04:	4f c0       	rjmp	.+158    	; 0xaa4 <DIO_write+0x1ba>
				}
				else
				{
					CLR_BIT(PORTC,(channel-16));
     a06:	a5 e3       	ldi	r26, 0x35	; 53
     a08:	b0 e0       	ldi	r27, 0x00	; 0
     a0a:	e5 e3       	ldi	r30, 0x35	; 53
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	80 81       	ld	r24, Z
     a10:	48 2f       	mov	r20, r24
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	88 2f       	mov	r24, r24
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	9c 01       	movw	r18, r24
     a1a:	20 51       	subi	r18, 0x10	; 16
     a1c:	30 40       	sbci	r19, 0x00	; 0
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	02 2e       	mov	r0, r18
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <DIO_write+0x140>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	0a 94       	dec	r0
     a2c:	e2 f7       	brpl	.-8      	; 0xa26 <DIO_write+0x13c>
     a2e:	80 95       	com	r24
     a30:	84 23       	and	r24, r20
     a32:	8c 93       	st	X, r24
     a34:	37 c0       	rjmp	.+110    	; 0xaa4 <DIO_write+0x1ba>
				}
			}
	else if(channel>=24&&channel<=31)
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	88 31       	cpi	r24, 0x18	; 24
     a3a:	a0 f1       	brcs	.+104    	; 0xaa4 <DIO_write+0x1ba>
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	80 32       	cpi	r24, 0x20	; 32
     a40:	88 f5       	brcc	.+98     	; 0xaa4 <DIO_write+0x1ba>
			{
				if(state==1)
     a42:	8a 81       	ldd	r24, Y+2	; 0x02
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	b9 f4       	brne	.+46     	; 0xa76 <DIO_write+0x18c>
				{
					SET_BIT(PORTD,(channel-24));
     a48:	a2 e3       	ldi	r26, 0x32	; 50
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	e2 e3       	ldi	r30, 0x32	; 50
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	48 2f       	mov	r20, r24
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	88 2f       	mov	r24, r24
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	9c 01       	movw	r18, r24
     a5c:	28 51       	subi	r18, 0x18	; 24
     a5e:	30 40       	sbci	r19, 0x00	; 0
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	02 2e       	mov	r0, r18
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <DIO_write+0x182>
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	0a 94       	dec	r0
     a6e:	e2 f7       	brpl	.-8      	; 0xa68 <DIO_write+0x17e>
     a70:	84 2b       	or	r24, r20
     a72:	8c 93       	st	X, r24
     a74:	17 c0       	rjmp	.+46     	; 0xaa4 <DIO_write+0x1ba>
				}
				else
				{
					CLR_BIT(PORTD,(channel-24));
     a76:	a2 e3       	ldi	r26, 0x32	; 50
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	e2 e3       	ldi	r30, 0x32	; 50
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	48 2f       	mov	r20, r24
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	88 2f       	mov	r24, r24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	9c 01       	movw	r18, r24
     a8a:	28 51       	subi	r18, 0x18	; 24
     a8c:	30 40       	sbci	r19, 0x00	; 0
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	02 2e       	mov	r0, r18
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <DIO_write+0x1b0>
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	0a 94       	dec	r0
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <DIO_write+0x1ac>
     a9e:	80 95       	com	r24
     aa0:	84 23       	and	r24, r20
     aa2:	8c 93       	st	X, r24
				}
			}
}
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	cf 91       	pop	r28
     aaa:	df 91       	pop	r29
     aac:	08 95       	ret

00000aae <DIO_read>:

int DIO_read(Channel_Type channel)
{
     aae:	df 93       	push	r29
     ab0:	cf 93       	push	r28
     ab2:	00 d0       	rcall	.+0      	; 0xab4 <DIO_read+0x6>
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	8a 83       	std	Y+2, r24	; 0x02
	State_Type state =0;
     aba:	19 82       	std	Y+1, r1	; 0x01
	if(channel>=0&&channel<=7)
     abc:	8a 81       	ldd	r24, Y+2	; 0x02
     abe:	88 30       	cpi	r24, 0x08	; 8
     ac0:	90 f4       	brcc	.+36     	; 0xae6 <DIO_read+0x38>
	{
		state=GET_BIT(PINA,channel);
     ac2:	e9 e3       	ldi	r30, 0x39	; 57
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	28 2f       	mov	r18, r24
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	88 2f       	mov	r24, r24
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a9 01       	movw	r20, r18
     ad4:	02 c0       	rjmp	.+4      	; 0xada <DIO_read+0x2c>
     ad6:	55 95       	asr	r21
     ad8:	47 95       	ror	r20
     ada:	8a 95       	dec	r24
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <DIO_read+0x28>
     ade:	ca 01       	movw	r24, r20
     ae0:	81 70       	andi	r24, 0x01	; 1
     ae2:	89 83       	std	Y+1, r24	; 0x01
     ae4:	4a c0       	rjmp	.+148    	; 0xb7a <DIO_read+0xcc>

	}
	else if(channel>=8&&channel<=15)
     ae6:	8a 81       	ldd	r24, Y+2	; 0x02
     ae8:	88 30       	cpi	r24, 0x08	; 8
     aea:	b0 f0       	brcs	.+44     	; 0xb18 <DIO_read+0x6a>
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	80 31       	cpi	r24, 0x10	; 16
     af0:	98 f4       	brcc	.+38     	; 0xb18 <DIO_read+0x6a>
	{
		state=GET_BIT(PINB,(channel-8));
     af2:	e6 e3       	ldi	r30, 0x36	; 54
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	28 2f       	mov	r18, r24
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	8a 81       	ldd	r24, Y+2	; 0x02
     afe:	88 2f       	mov	r24, r24
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	08 97       	sbiw	r24, 0x08	; 8
     b04:	a9 01       	movw	r20, r18
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <DIO_read+0x5e>
     b08:	55 95       	asr	r21
     b0a:	47 95       	ror	r20
     b0c:	8a 95       	dec	r24
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <DIO_read+0x5a>
     b10:	ca 01       	movw	r24, r20
     b12:	81 70       	andi	r24, 0x01	; 1
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	31 c0       	rjmp	.+98     	; 0xb7a <DIO_read+0xcc>

	}
	else if(channel>=16&&channel<=23)
     b18:	8a 81       	ldd	r24, Y+2	; 0x02
     b1a:	80 31       	cpi	r24, 0x10	; 16
     b1c:	b0 f0       	brcs	.+44     	; 0xb4a <DIO_read+0x9c>
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	88 31       	cpi	r24, 0x18	; 24
     b22:	98 f4       	brcc	.+38     	; 0xb4a <DIO_read+0x9c>
	{
			state=GET_BIT(PINC,(channel-16));
     b24:	e3 e3       	ldi	r30, 0x33	; 51
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	28 2f       	mov	r18, r24
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	8a 81       	ldd	r24, Y+2	; 0x02
     b30:	88 2f       	mov	r24, r24
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	40 97       	sbiw	r24, 0x10	; 16
     b36:	a9 01       	movw	r20, r18
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <DIO_read+0x90>
     b3a:	55 95       	asr	r21
     b3c:	47 95       	ror	r20
     b3e:	8a 95       	dec	r24
     b40:	e2 f7       	brpl	.-8      	; 0xb3a <DIO_read+0x8c>
     b42:	ca 01       	movw	r24, r20
     b44:	81 70       	andi	r24, 0x01	; 1
     b46:	89 83       	std	Y+1, r24	; 0x01
     b48:	18 c0       	rjmp	.+48     	; 0xb7a <DIO_read+0xcc>
	}
	else if(channel>=24&&channel<=31)
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	88 31       	cpi	r24, 0x18	; 24
     b4e:	a8 f0       	brcs	.+42     	; 0xb7a <DIO_read+0xcc>
     b50:	8a 81       	ldd	r24, Y+2	; 0x02
     b52:	80 32       	cpi	r24, 0x20	; 32
     b54:	90 f4       	brcc	.+36     	; 0xb7a <DIO_read+0xcc>
	{
			state=GET_BIT(PIND,(channel-24));
     b56:	e0 e3       	ldi	r30, 0x30	; 48
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	8a 81       	ldd	r24, Y+2	; 0x02
     b62:	88 2f       	mov	r24, r24
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	48 97       	sbiw	r24, 0x18	; 24
     b68:	a9 01       	movw	r20, r18
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <DIO_read+0xc2>
     b6c:	55 95       	asr	r21
     b6e:	47 95       	ror	r20
     b70:	8a 95       	dec	r24
     b72:	e2 f7       	brpl	.-8      	; 0xb6c <DIO_read+0xbe>
     b74:	ca 01       	movw	r24, r20
     b76:	81 70       	andi	r24, 0x01	; 1
     b78:	89 83       	std	Y+1, r24	; 0x01

	}
	return state;
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	88 2f       	mov	r24, r24
     b7e:	90 e0       	ldi	r25, 0x00	; 0
}
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <DIO_init>:
		{PORT_C, PIN_7,OUTPUT},
		{PORT_C, PIN_2,OUTPUT}
};

void DIO_init(void)
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <DIO_init+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <DIO_init+0x8>
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	int i=0;
     b96:	1a 82       	std	Y+2, r1	; 0x02
     b98:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<sizeof(pin_config)/sizeof(pin_config[0]);i++)
     b9a:	1a 82       	std	Y+2, r1	; 0x02
     b9c:	19 82       	std	Y+1, r1	; 0x01
     b9e:	58 c1       	rjmp	.+688    	; 0xe50 <DIO_init+0x2c6>
	{
		switch (pin_config[i].PORT){
     ba0:	29 81       	ldd	r18, Y+1	; 0x01
     ba2:	3a 81       	ldd	r19, Y+2	; 0x02
     ba4:	c9 01       	movw	r24, r18
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	82 0f       	add	r24, r18
     bac:	93 1f       	adc	r25, r19
     bae:	fc 01       	movw	r30, r24
     bb0:	e0 5a       	subi	r30, 0xA0	; 160
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	80 81       	ld	r24, Z
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	3c 83       	std	Y+4, r19	; 0x04
     bbc:	2b 83       	std	Y+3, r18	; 0x03
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	91 05       	cpc	r25, r1
     bc6:	09 f4       	brne	.+2      	; 0xbca <DIO_init+0x40>
     bc8:	61 c0       	rjmp	.+194    	; 0xc8c <DIO_init+0x102>
     bca:	2b 81       	ldd	r18, Y+3	; 0x03
     bcc:	3c 81       	ldd	r19, Y+4	; 0x04
     bce:	22 30       	cpi	r18, 0x02	; 2
     bd0:	31 05       	cpc	r19, r1
     bd2:	2c f4       	brge	.+10     	; 0xbde <DIO_init+0x54>
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	71 f0       	breq	.+28     	; 0xbf8 <DIO_init+0x6e>
     bdc:	34 c1       	rjmp	.+616    	; 0xe46 <DIO_init+0x2bc>
     bde:	2b 81       	ldd	r18, Y+3	; 0x03
     be0:	3c 81       	ldd	r19, Y+4	; 0x04
     be2:	22 30       	cpi	r18, 0x02	; 2
     be4:	31 05       	cpc	r19, r1
     be6:	09 f4       	brne	.+2      	; 0xbea <DIO_init+0x60>
     be8:	9b c0       	rjmp	.+310    	; 0xd20 <DIO_init+0x196>
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	9c 81       	ldd	r25, Y+4	; 0x04
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	91 05       	cpc	r25, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <DIO_init+0x6c>
     bf4:	df c0       	rjmp	.+446    	; 0xdb4 <DIO_init+0x22a>
     bf6:	27 c1       	rjmp	.+590    	; 0xe46 <DIO_init+0x2bc>
		case PORT_A:
			if(pin_config[i].IO==OUTPUT)
     bf8:	29 81       	ldd	r18, Y+1	; 0x01
     bfa:	3a 81       	ldd	r19, Y+2	; 0x02
     bfc:	c9 01       	movw	r24, r18
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	82 0f       	add	r24, r18
     c04:	93 1f       	adc	r25, r19
     c06:	fc 01       	movw	r30, r24
     c08:	ee 59       	subi	r30, 0x9E	; 158
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	80 81       	ld	r24, Z
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	f1 f4       	brne	.+60     	; 0xc4e <DIO_init+0xc4>
			{
				SET_BIT(DDRA,pin_config[i].PIN);
     c12:	aa e3       	ldi	r26, 0x3A	; 58
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ea e3       	ldi	r30, 0x3A	; 58
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	48 2f       	mov	r20, r24
     c1e:	29 81       	ldd	r18, Y+1	; 0x01
     c20:	3a 81       	ldd	r19, Y+2	; 0x02
     c22:	c9 01       	movw	r24, r18
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	82 0f       	add	r24, r18
     c2a:	93 1f       	adc	r25, r19
     c2c:	fc 01       	movw	r30, r24
     c2e:	ef 59       	subi	r30, 0x9F	; 159
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	80 81       	ld	r24, Z
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_init+0xba>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_init+0xb6>
     c48:	84 2b       	or	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	fc c0       	rjmp	.+504    	; 0xe46 <DIO_init+0x2bc>
			}
			else
			{
				CLR_BIT(DDRA,pin_config[i].PIN);
     c4e:	aa e3       	ldi	r26, 0x3A	; 58
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	ea e3       	ldi	r30, 0x3A	; 58
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	48 2f       	mov	r20, r24
     c5a:	29 81       	ldd	r18, Y+1	; 0x01
     c5c:	3a 81       	ldd	r19, Y+2	; 0x02
     c5e:	c9 01       	movw	r24, r18
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	82 0f       	add	r24, r18
     c66:	93 1f       	adc	r25, r19
     c68:	fc 01       	movw	r30, r24
     c6a:	ef 59       	subi	r30, 0x9F	; 159
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	80 81       	ld	r24, Z
     c70:	28 2f       	mov	r18, r24
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 2e       	mov	r0, r18
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_init+0xf6>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	0a 94       	dec	r0
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <DIO_init+0xf2>
     c84:	80 95       	com	r24
     c86:	84 23       	and	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	dd c0       	rjmp	.+442    	; 0xe46 <DIO_init+0x2bc>
			}
			break;
		case PORT_B:
					if(pin_config[i].IO==OUTPUT)
     c8c:	29 81       	ldd	r18, Y+1	; 0x01
     c8e:	3a 81       	ldd	r19, Y+2	; 0x02
     c90:	c9 01       	movw	r24, r18
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	82 0f       	add	r24, r18
     c98:	93 1f       	adc	r25, r19
     c9a:	fc 01       	movw	r30, r24
     c9c:	ee 59       	subi	r30, 0x9E	; 158
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	80 81       	ld	r24, Z
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	f1 f4       	brne	.+60     	; 0xce2 <DIO_init+0x158>
					{
						SET_BIT(DDRB,pin_config[i].PIN);
     ca6:	a7 e3       	ldi	r26, 0x37	; 55
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e3       	ldi	r30, 0x37	; 55
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	29 81       	ldd	r18, Y+1	; 0x01
     cb4:	3a 81       	ldd	r19, Y+2	; 0x02
     cb6:	c9 01       	movw	r24, r18
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	82 0f       	add	r24, r18
     cbe:	93 1f       	adc	r25, r19
     cc0:	fc 01       	movw	r30, r24
     cc2:	ef 59       	subi	r30, 0x9F	; 159
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	80 81       	ld	r24, Z
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_init+0x14e>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_init+0x14a>
     cdc:	84 2b       	or	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	b2 c0       	rjmp	.+356    	; 0xe46 <DIO_init+0x2bc>
					}
					else
					{
						CLR_BIT(DDRB,pin_config[i].PIN);
     ce2:	a7 e3       	ldi	r26, 0x37	; 55
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e7 e3       	ldi	r30, 0x37	; 55
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	29 81       	ldd	r18, Y+1	; 0x01
     cf0:	3a 81       	ldd	r19, Y+2	; 0x02
     cf2:	c9 01       	movw	r24, r18
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	82 0f       	add	r24, r18
     cfa:	93 1f       	adc	r25, r19
     cfc:	fc 01       	movw	r30, r24
     cfe:	ef 59       	subi	r30, 0x9F	; 159
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	80 81       	ld	r24, Z
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_init+0x18a>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_init+0x186>
     d18:	80 95       	com	r24
     d1a:	84 23       	and	r24, r20
     d1c:	8c 93       	st	X, r24
     d1e:	93 c0       	rjmp	.+294    	; 0xe46 <DIO_init+0x2bc>
					}
			break;

		case PORT_C:
					if(pin_config[i].IO==OUTPUT)
     d20:	29 81       	ldd	r18, Y+1	; 0x01
     d22:	3a 81       	ldd	r19, Y+2	; 0x02
     d24:	c9 01       	movw	r24, r18
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	82 0f       	add	r24, r18
     d2c:	93 1f       	adc	r25, r19
     d2e:	fc 01       	movw	r30, r24
     d30:	ee 59       	subi	r30, 0x9E	; 158
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	80 81       	ld	r24, Z
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	f1 f4       	brne	.+60     	; 0xd76 <DIO_init+0x1ec>
					{
						SET_BIT(DDRC,pin_config[i].PIN);
     d3a:	a4 e3       	ldi	r26, 0x34	; 52
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e4 e3       	ldi	r30, 0x34	; 52
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	48 2f       	mov	r20, r24
     d46:	29 81       	ldd	r18, Y+1	; 0x01
     d48:	3a 81       	ldd	r19, Y+2	; 0x02
     d4a:	c9 01       	movw	r24, r18
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	82 0f       	add	r24, r18
     d52:	93 1f       	adc	r25, r19
     d54:	fc 01       	movw	r30, r24
     d56:	ef 59       	subi	r30, 0x9F	; 159
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	80 81       	ld	r24, Z
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <DIO_init+0x1e2>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <DIO_init+0x1de>
     d70:	84 2b       	or	r24, r20
     d72:	8c 93       	st	X, r24
     d74:	68 c0       	rjmp	.+208    	; 0xe46 <DIO_init+0x2bc>
					}
					else
					{
						CLR_BIT(DDRC,pin_config[i].PIN);
     d76:	a4 e3       	ldi	r26, 0x34	; 52
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e4 e3       	ldi	r30, 0x34	; 52
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	29 81       	ldd	r18, Y+1	; 0x01
     d84:	3a 81       	ldd	r19, Y+2	; 0x02
     d86:	c9 01       	movw	r24, r18
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	82 0f       	add	r24, r18
     d8e:	93 1f       	adc	r25, r19
     d90:	fc 01       	movw	r30, r24
     d92:	ef 59       	subi	r30, 0x9F	; 159
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	80 81       	ld	r24, Z
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_init+0x21e>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_init+0x21a>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	49 c0       	rjmp	.+146    	; 0xe46 <DIO_init+0x2bc>
					}
			break;
		case PORT_D:
					if(pin_config[i].IO==OUTPUT)
     db4:	29 81       	ldd	r18, Y+1	; 0x01
     db6:	3a 81       	ldd	r19, Y+2	; 0x02
     db8:	c9 01       	movw	r24, r18
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	82 0f       	add	r24, r18
     dc0:	93 1f       	adc	r25, r19
     dc2:	fc 01       	movw	r30, r24
     dc4:	ee 59       	subi	r30, 0x9E	; 158
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	80 81       	ld	r24, Z
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	f1 f4       	brne	.+60     	; 0xe0a <DIO_init+0x280>
					{
						SET_BIT(DDRD,pin_config[i].PIN);
     dce:	a1 e3       	ldi	r26, 0x31	; 49
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e1 e3       	ldi	r30, 0x31	; 49
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	29 81       	ldd	r18, Y+1	; 0x01
     ddc:	3a 81       	ldd	r19, Y+2	; 0x02
     dde:	c9 01       	movw	r24, r18
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	82 0f       	add	r24, r18
     de6:	93 1f       	adc	r25, r19
     de8:	fc 01       	movw	r30, r24
     dea:	ef 59       	subi	r30, 0x9F	; 159
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	80 81       	ld	r24, Z
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <DIO_init+0x276>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <DIO_init+0x272>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	1e c0       	rjmp	.+60     	; 0xe46 <DIO_init+0x2bc>
					}
					else
					{
						CLR_BIT(DDRD,pin_config[i].PIN);
     e0a:	a1 e3       	ldi	r26, 0x31	; 49
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e1 e3       	ldi	r30, 0x31	; 49
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	29 81       	ldd	r18, Y+1	; 0x01
     e18:	3a 81       	ldd	r19, Y+2	; 0x02
     e1a:	c9 01       	movw	r24, r18
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	82 0f       	add	r24, r18
     e22:	93 1f       	adc	r25, r19
     e24:	fc 01       	movw	r30, r24
     e26:	ef 59       	subi	r30, 0x9F	; 159
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	80 81       	ld	r24, Z
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_init+0x2b2>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_init+0x2ae>
     e40:	80 95       	com	r24
     e42:	84 23       	and	r24, r20
     e44:	8c 93       	st	X, r24
};

void DIO_init(void)
{
	int i=0;
	for(i=0;i<sizeof(pin_config)/sizeof(pin_config[0]);i++)
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	89 83       	std	Y+1, r24	; 0x01
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	85 31       	cpi	r24, 0x15	; 21
     e56:	91 05       	cpc	r25, r1
     e58:	08 f4       	brcc	.+2      	; 0xe5c <DIO_init+0x2d2>
     e5a:	a2 ce       	rjmp	.-700    	; 0xba0 <DIO_init+0x16>



		}
	}
}
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <ADC_Init>:
 *  Created on: Oct 2, 2021
 *      Author: Ali Ehab
 */
#include "ADC.h"

void ADC_Init(){
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
#if ADC_ENABLE_MODE == ENABLED
	SET_BIT(ADCSRA,ADEN);
     e72:	a6 e2       	ldi	r26, 0x26	; 38
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e6 e2       	ldi	r30, 0x26	; 38
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADEN);
#endif


#if ADC_MODE == ADC_AREF_VOLTAGE
	CLR_BIT(ADMUX, REFS0);
     e80:	a7 e2       	ldi	r26, 0x27	; 39
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e7 e2       	ldi	r30, 0x27	; 39
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	8f 7b       	andi	r24, 0xBF	; 191
     e8c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
     e8e:	a7 e2       	ldi	r26, 0x27	; 39
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e7 e2       	ldi	r30, 0x27	; 39
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8f 77       	andi	r24, 0x7F	; 127
     e9a:	8c 93       	st	X, r24
		SET_BIT(ADMUX, REFS1);
#endif


#if READING_LEFT_ADJUST == ENBALE
		SET_BIT(ADMUX,ADLAR);
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 62       	ori	r24, 0x20	; 32
     ea8:	8c 93       	st	X, r24


#if ADC_Interrupt_Enable == ENABLE
//		SET_BIT()
#endif
}
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <adc_read>:

uint16 adc_read(uint8 channel)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	0f 92       	push	r0
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	89 83       	std	Y+1, r24	; 0x01
    ADMUX =(ADMUX & 0b1110000)|channel;
     ebc:	a7 e2       	ldi	r26, 0x27	; 39
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e2       	ldi	r30, 0x27	; 39
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	98 2f       	mov	r25, r24
     ec8:	90 77       	andi	r25, 0x70	; 112
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	89 2b       	or	r24, r25
     ece:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
     ed0:	a6 e2       	ldi	r26, 0x26	; 38
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e6 e2       	ldi	r30, 0x26	; 38
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 64       	ori	r24, 0x40	; 64
     edc:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA,ADIF)==0);
     ede:	e6 e2       	ldi	r30, 0x26	; 38
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	82 95       	swap	r24
     ee6:	8f 70       	andi	r24, 0x0F	; 15
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	81 70       	andi	r24, 0x01	; 1
     eee:	90 70       	andi	r25, 0x00	; 0
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	a9 f3       	breq	.-22     	; 0xede <adc_read+0x2e>
	SET_BIT(ADCSRA,ADIF);
     ef4:	a6 e2       	ldi	r26, 0x26	; 38
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e6 e2       	ldi	r30, 0x26	; 38
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 61       	ori	r24, 0x10	; 16
     f00:	8c 93       	st	X, r24
	return ADC;
     f02:	e4 e2       	ldi	r30, 0x24	; 36
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
}
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <steppermotor>:
 *  Created on: Sep 25, 2021
 *      Author: Ali Ehab
 */
#include "steppermotor.h"
void steppermotor(void)
{
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	c0 56       	subi	r28, 0x60	; 96
     f20:	d0 40       	sbci	r29, 0x00	; 0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
	DIO_write(stepper_org_1,HIGH);
     f2c:	83 e1       	ldi	r24, 0x13	; 19
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(stepper_yel_2,LOW);
     f34:	84 e1       	ldi	r24, 0x14	; 20
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(stepper_pink_3,LOW);
     f3c:	85 e1       	ldi	r24, 0x15	; 21
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(stepper_blu_4,LOW);
     f44:	86 e1       	ldi	r24, 0x16	; 22
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
     f4c:	fe 01       	movw	r30, r28
     f4e:	e3 5a       	subi	r30, 0xA3	; 163
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a8 ec       	ldi	r26, 0xC8	; 200
     f58:	b2 e4       	ldi	r27, 0x42	; 66
     f5a:	80 83       	st	Z, r24
     f5c:	91 83       	std	Z+1, r25	; 0x01
     f5e:	a2 83       	std	Z+2, r26	; 0x02
     f60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f62:	8e 01       	movw	r16, r28
     f64:	07 5a       	subi	r16, 0xA7	; 167
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
     f68:	fe 01       	movw	r30, r28
     f6a:	e3 5a       	subi	r30, 0xA3	; 163
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	60 81       	ld	r22, Z
     f70:	71 81       	ldd	r23, Z+1	; 0x01
     f72:	82 81       	ldd	r24, Z+2	; 0x02
     f74:	93 81       	ldd	r25, Z+3	; 0x03
     f76:	2b ea       	ldi	r18, 0xAB	; 171
     f78:	3a ea       	ldi	r19, 0xAA	; 170
     f7a:	4a ea       	ldi	r20, 0xAA	; 170
     f7c:	50 e4       	ldi	r21, 0x40	; 64
     f7e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	f8 01       	movw	r30, r16
     f88:	80 83       	st	Z, r24
     f8a:	91 83       	std	Z+1, r25	; 0x01
     f8c:	a2 83       	std	Z+2, r26	; 0x02
     f8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f90:	fe 01       	movw	r30, r28
     f92:	e7 5a       	subi	r30, 0xA7	; 167
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	60 81       	ld	r22, Z
     f98:	71 81       	ldd	r23, Z+1	; 0x01
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e8       	ldi	r20, 0x80	; 128
     fa4:	5f e3       	ldi	r21, 0x3F	; 63
     fa6:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
     faa:	88 23       	and	r24, r24
     fac:	34 f4       	brge	.+12     	; 0xfba <steppermotor+0xa8>
		__ticks = 1;
     fae:	fe 01       	movw	r30, r28
     fb0:	e8 5a       	subi	r30, 0xA8	; 168
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	80 83       	st	Z, r24
     fb8:	e0 c0       	rjmp	.+448    	; 0x117a <steppermotor+0x268>
	else if (__tmp > 255)
     fba:	fe 01       	movw	r30, r28
     fbc:	e7 5a       	subi	r30, 0xA7	; 167
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	60 81       	ld	r22, Z
     fc2:	71 81       	ldd	r23, Z+1	; 0x01
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	93 81       	ldd	r25, Z+3	; 0x03
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	4f e7       	ldi	r20, 0x7F	; 127
     fce:	53 e4       	ldi	r21, 0x43	; 67
     fd0:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
     fd4:	18 16       	cp	r1, r24
     fd6:	0c f0       	brlt	.+2      	; 0xfda <steppermotor+0xc8>
     fd8:	c0 c0       	rjmp	.+384    	; 0x115a <steppermotor+0x248>
	{
		_delay_ms(__us / 1000.0);
     fda:	fe 01       	movw	r30, r28
     fdc:	e3 5a       	subi	r30, 0xA3	; 163
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	60 81       	ld	r22, Z
     fe2:	71 81       	ldd	r23, Z+1	; 0x01
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a e7       	ldi	r20, 0x7A	; 122
     fee:	54 e4       	ldi	r21, 0x44	; 68
     ff0:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	fe 01       	movw	r30, r28
     ffa:	ec 5a       	subi	r30, 0xAC	; 172
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	80 83       	st	Z, r24
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	a2 83       	std	Z+2, r26	; 0x02
    1004:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1006:	8e 01       	movw	r16, r28
    1008:	00 5b       	subi	r16, 0xB0	; 176
    100a:	1f 4f       	sbci	r17, 0xFF	; 255
    100c:	fe 01       	movw	r30, r28
    100e:	ec 5a       	subi	r30, 0xAC	; 172
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	4a e7       	ldi	r20, 0x7A	; 122
    1020:	55 e4       	ldi	r21, 0x45	; 69
    1022:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	f8 01       	movw	r30, r16
    102c:	80 83       	st	Z, r24
    102e:	91 83       	std	Z+1, r25	; 0x01
    1030:	a2 83       	std	Z+2, r26	; 0x02
    1032:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1034:	fe 01       	movw	r30, r28
    1036:	e0 5b       	subi	r30, 0xB0	; 176
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	60 81       	ld	r22, Z
    103c:	71 81       	ldd	r23, Z+1	; 0x01
    103e:	82 81       	ldd	r24, Z+2	; 0x02
    1040:	93 81       	ldd	r25, Z+3	; 0x03
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e8       	ldi	r20, 0x80	; 128
    1048:	5f e3       	ldi	r21, 0x3F	; 63
    104a:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    104e:	88 23       	and	r24, r24
    1050:	44 f4       	brge	.+16     	; 0x1062 <steppermotor+0x150>
		__ticks = 1;
    1052:	fe 01       	movw	r30, r28
    1054:	e2 5b       	subi	r30, 0xB2	; 178
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	80 83       	st	Z, r24
    1060:	64 c0       	rjmp	.+200    	; 0x112a <steppermotor+0x218>
	else if (__tmp > 65535)
    1062:	fe 01       	movw	r30, r28
    1064:	e0 5b       	subi	r30, 0xB0	; 176
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	60 81       	ld	r22, Z
    106a:	71 81       	ldd	r23, Z+1	; 0x01
    106c:	82 81       	ldd	r24, Z+2	; 0x02
    106e:	93 81       	ldd	r25, Z+3	; 0x03
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	3f ef       	ldi	r19, 0xFF	; 255
    1074:	4f e7       	ldi	r20, 0x7F	; 127
    1076:	57 e4       	ldi	r21, 0x47	; 71
    1078:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    107c:	18 16       	cp	r1, r24
    107e:	0c f0       	brlt	.+2      	; 0x1082 <steppermotor+0x170>
    1080:	43 c0       	rjmp	.+134    	; 0x1108 <steppermotor+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1082:	fe 01       	movw	r30, r28
    1084:	ec 5a       	subi	r30, 0xAC	; 172
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	60 81       	ld	r22, Z
    108a:	71 81       	ldd	r23, Z+1	; 0x01
    108c:	82 81       	ldd	r24, Z+2	; 0x02
    108e:	93 81       	ldd	r25, Z+3	; 0x03
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e2       	ldi	r20, 0x20	; 32
    1096:	51 e4       	ldi	r21, 0x41	; 65
    1098:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	8e 01       	movw	r16, r28
    10a2:	02 5b       	subi	r16, 0xB2	; 178
    10a4:	1f 4f       	sbci	r17, 0xFF	; 255
    10a6:	bc 01       	movw	r22, r24
    10a8:	cd 01       	movw	r24, r26
    10aa:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	f8 01       	movw	r30, r16
    10b4:	91 83       	std	Z+1, r25	; 0x01
    10b6:	80 83       	st	Z, r24
    10b8:	1f c0       	rjmp	.+62     	; 0x10f8 <steppermotor+0x1e6>
    10ba:	fe 01       	movw	r30, r28
    10bc:	e4 5b       	subi	r30, 0xB4	; 180
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	80 e9       	ldi	r24, 0x90	; 144
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10c8:	fe 01       	movw	r30, r28
    10ca:	e4 5b       	subi	r30, 0xB4	; 180
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	80 81       	ld	r24, Z
    10d0:	91 81       	ldd	r25, Z+1	; 0x01
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <steppermotor+0x1c0>
    10d6:	fe 01       	movw	r30, r28
    10d8:	e4 5b       	subi	r30, 0xB4	; 180
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	91 83       	std	Z+1, r25	; 0x01
    10de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e0:	de 01       	movw	r26, r28
    10e2:	a2 5b       	subi	r26, 0xB2	; 178
    10e4:	bf 4f       	sbci	r27, 0xFF	; 255
    10e6:	fe 01       	movw	r30, r28
    10e8:	e2 5b       	subi	r30, 0xB2	; 178
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	11 96       	adiw	r26, 0x01	; 1
    10f4:	9c 93       	st	X, r25
    10f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f8:	fe 01       	movw	r30, r28
    10fa:	e2 5b       	subi	r30, 0xB2	; 178
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	80 81       	ld	r24, Z
    1100:	91 81       	ldd	r25, Z+1	; 0x01
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	d1 f6       	brne	.-76     	; 0x10ba <steppermotor+0x1a8>
    1106:	4b c0       	rjmp	.+150    	; 0x119e <steppermotor+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1108:	8e 01       	movw	r16, r28
    110a:	02 5b       	subi	r16, 0xB2	; 178
    110c:	1f 4f       	sbci	r17, 0xFF	; 255
    110e:	fe 01       	movw	r30, r28
    1110:	e0 5b       	subi	r30, 0xB0	; 176
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	60 81       	ld	r22, Z
    1116:	71 81       	ldd	r23, Z+1	; 0x01
    1118:	82 81       	ldd	r24, Z+2	; 0x02
    111a:	93 81       	ldd	r25, Z+3	; 0x03
    111c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	f8 01       	movw	r30, r16
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24
    112a:	de 01       	movw	r26, r28
    112c:	a6 5b       	subi	r26, 0xB6	; 182
    112e:	bf 4f       	sbci	r27, 0xFF	; 255
    1130:	fe 01       	movw	r30, r28
    1132:	e2 5b       	subi	r30, 0xB2	; 178
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	80 81       	ld	r24, Z
    1138:	91 81       	ldd	r25, Z+1	; 0x01
    113a:	11 96       	adiw	r26, 0x01	; 1
    113c:	9c 93       	st	X, r25
    113e:	8e 93       	st	-X, r24
    1140:	fe 01       	movw	r30, r28
    1142:	e6 5b       	subi	r30, 0xB6	; 182
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <steppermotor+0x238>
    114e:	fe 01       	movw	r30, r28
    1150:	e6 5b       	subi	r30, 0xB6	; 182
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24
    1158:	22 c0       	rjmp	.+68     	; 0x119e <steppermotor+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    115a:	8e 01       	movw	r16, r28
    115c:	08 5a       	subi	r16, 0xA8	; 168
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
    1160:	fe 01       	movw	r30, r28
    1162:	e7 5a       	subi	r30, 0xA7	; 167
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	f8 01       	movw	r30, r16
    1178:	80 83       	st	Z, r24
    117a:	de 01       	movw	r26, r28
    117c:	a7 5b       	subi	r26, 0xB7	; 183
    117e:	bf 4f       	sbci	r27, 0xFF	; 255
    1180:	fe 01       	movw	r30, r28
    1182:	e8 5a       	subi	r30, 0xA8	; 168
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	80 81       	ld	r24, Z
    1188:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    118a:	fe 01       	movw	r30, r28
    118c:	e7 5b       	subi	r30, 0xB7	; 183
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	80 81       	ld	r24, Z
    1192:	8a 95       	dec	r24
    1194:	f1 f7       	brne	.-4      	; 0x1192 <steppermotor+0x280>
    1196:	fe 01       	movw	r30, r28
    1198:	e7 5b       	subi	r30, 0xB7	; 183
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	80 83       	st	Z, r24

	_delay_us(100);

	DIO_write(stepper_org_1,LOW);
    119e:	83 e1       	ldi	r24, 0x13	; 19
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(stepper_yel_2,HIGH);
    11a6:	84 e1       	ldi	r24, 0x14	; 20
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(stepper_pink_3,LOW);
    11ae:	85 e1       	ldi	r24, 0x15	; 21
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(stepper_blu_4,LOW);
    11b6:	86 e1       	ldi	r24, 0x16	; 22
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    11be:	fe 01       	movw	r30, r28
    11c0:	eb 5b       	subi	r30, 0xBB	; 187
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a8 ec       	ldi	r26, 0xC8	; 200
    11ca:	b2 e4       	ldi	r27, 0x42	; 66
    11cc:	80 83       	st	Z, r24
    11ce:	91 83       	std	Z+1, r25	; 0x01
    11d0:	a2 83       	std	Z+2, r26	; 0x02
    11d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11d4:	8e 01       	movw	r16, r28
    11d6:	0f 5b       	subi	r16, 0xBF	; 191
    11d8:	1f 4f       	sbci	r17, 0xFF	; 255
    11da:	fe 01       	movw	r30, r28
    11dc:	eb 5b       	subi	r30, 0xBB	; 187
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	60 81       	ld	r22, Z
    11e2:	71 81       	ldd	r23, Z+1	; 0x01
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	93 81       	ldd	r25, Z+3	; 0x03
    11e8:	2b ea       	ldi	r18, 0xAB	; 171
    11ea:	3a ea       	ldi	r19, 0xAA	; 170
    11ec:	4a ea       	ldi	r20, 0xAA	; 170
    11ee:	50 e4       	ldi	r21, 0x40	; 64
    11f0:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	f8 01       	movw	r30, r16
    11fa:	80 83       	st	Z, r24
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	a2 83       	std	Z+2, r26	; 0x02
    1200:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1202:	fe 01       	movw	r30, r28
    1204:	ef 5b       	subi	r30, 0xBF	; 191
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e8       	ldi	r20, 0x80	; 128
    1216:	5f e3       	ldi	r21, 0x3F	; 63
    1218:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    121c:	88 23       	and	r24, r24
    121e:	34 f4       	brge	.+12     	; 0x122c <steppermotor+0x31a>
		__ticks = 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	fe 01       	movw	r30, r28
    1224:	e0 5c       	subi	r30, 0xC0	; 192
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	80 83       	st	Z, r24
    122a:	9d c0       	rjmp	.+314    	; 0x1366 <steppermotor+0x454>
	else if (__tmp > 255)
    122c:	fe 01       	movw	r30, r28
    122e:	ef 5b       	subi	r30, 0xBF	; 191
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	60 81       	ld	r22, Z
    1234:	71 81       	ldd	r23, Z+1	; 0x01
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	93 81       	ldd	r25, Z+3	; 0x03
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	4f e7       	ldi	r20, 0x7F	; 127
    1240:	53 e4       	ldi	r21, 0x43	; 67
    1242:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    1246:	18 16       	cp	r1, r24
    1248:	0c f0       	brlt	.+2      	; 0x124c <steppermotor+0x33a>
    124a:	7e c0       	rjmp	.+252    	; 0x1348 <steppermotor+0x436>
	{
		_delay_ms(__us / 1000.0);
    124c:	fe 01       	movw	r30, r28
    124e:	eb 5b       	subi	r30, 0xBB	; 187
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	60 81       	ld	r22, Z
    1254:	71 81       	ldd	r23, Z+1	; 0x01
    1256:	82 81       	ldd	r24, Z+2	; 0x02
    1258:	93 81       	ldd	r25, Z+3	; 0x03
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	4a e7       	ldi	r20, 0x7A	; 122
    1260:	54 e4       	ldi	r21, 0x44	; 68
    1262:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	8c af       	std	Y+60, r24	; 0x3c
    126c:	9d af       	std	Y+61, r25	; 0x3d
    126e:	ae af       	std	Y+62, r26	; 0x3e
    1270:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1272:	6c ad       	ldd	r22, Y+60	; 0x3c
    1274:	7d ad       	ldd	r23, Y+61	; 0x3d
    1276:	8e ad       	ldd	r24, Y+62	; 0x3e
    1278:	9f ad       	ldd	r25, Y+63	; 0x3f
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	4a e7       	ldi	r20, 0x7A	; 122
    1280:	55 e4       	ldi	r21, 0x45	; 69
    1282:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	88 af       	std	Y+56, r24	; 0x38
    128c:	99 af       	std	Y+57, r25	; 0x39
    128e:	aa af       	std	Y+58, r26	; 0x3a
    1290:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1292:	68 ad       	ldd	r22, Y+56	; 0x38
    1294:	79 ad       	ldd	r23, Y+57	; 0x39
    1296:	8a ad       	ldd	r24, Y+58	; 0x3a
    1298:	9b ad       	ldd	r25, Y+59	; 0x3b
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e8       	ldi	r20, 0x80	; 128
    12a0:	5f e3       	ldi	r21, 0x3F	; 63
    12a2:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    12a6:	88 23       	and	r24, r24
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <steppermotor+0x3a2>
		__ticks = 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9f ab       	std	Y+55, r25	; 0x37
    12b0:	8e ab       	std	Y+54, r24	; 0x36
    12b2:	3f c0       	rjmp	.+126    	; 0x1332 <steppermotor+0x420>
	else if (__tmp > 65535)
    12b4:	68 ad       	ldd	r22, Y+56	; 0x38
    12b6:	79 ad       	ldd	r23, Y+57	; 0x39
    12b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    12ba:	9b ad       	ldd	r25, Y+59	; 0x3b
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	3f ef       	ldi	r19, 0xFF	; 255
    12c0:	4f e7       	ldi	r20, 0x7F	; 127
    12c2:	57 e4       	ldi	r21, 0x47	; 71
    12c4:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    12c8:	18 16       	cp	r1, r24
    12ca:	4c f5       	brge	.+82     	; 0x131e <steppermotor+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12cc:	6c ad       	ldd	r22, Y+60	; 0x3c
    12ce:	7d ad       	ldd	r23, Y+61	; 0x3d
    12d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    12d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e2       	ldi	r20, 0x20	; 32
    12da:	51 e4       	ldi	r21, 0x41	; 65
    12dc:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9f ab       	std	Y+55, r25	; 0x37
    12f2:	8e ab       	std	Y+54, r24	; 0x36
    12f4:	0f c0       	rjmp	.+30     	; 0x1314 <steppermotor+0x402>
    12f6:	80 e9       	ldi	r24, 0x90	; 144
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	9d ab       	std	Y+53, r25	; 0x35
    12fc:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12fe:	8c a9       	ldd	r24, Y+52	; 0x34
    1300:	9d a9       	ldd	r25, Y+53	; 0x35
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	f1 f7       	brne	.-4      	; 0x1302 <steppermotor+0x3f0>
    1306:	9d ab       	std	Y+53, r25	; 0x35
    1308:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130a:	8e a9       	ldd	r24, Y+54	; 0x36
    130c:	9f a9       	ldd	r25, Y+55	; 0x37
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	9f ab       	std	Y+55, r25	; 0x37
    1312:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1314:	8e a9       	ldd	r24, Y+54	; 0x36
    1316:	9f a9       	ldd	r25, Y+55	; 0x37
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	69 f7       	brne	.-38     	; 0x12f6 <steppermotor+0x3e4>
    131c:	2d c0       	rjmp	.+90     	; 0x1378 <steppermotor+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131e:	68 ad       	ldd	r22, Y+56	; 0x38
    1320:	79 ad       	ldd	r23, Y+57	; 0x39
    1322:	8a ad       	ldd	r24, Y+58	; 0x3a
    1324:	9b ad       	ldd	r25, Y+59	; 0x3b
    1326:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	9f ab       	std	Y+55, r25	; 0x37
    1330:	8e ab       	std	Y+54, r24	; 0x36
    1332:	8e a9       	ldd	r24, Y+54	; 0x36
    1334:	9f a9       	ldd	r25, Y+55	; 0x37
    1336:	9b ab       	std	Y+51, r25	; 0x33
    1338:	8a ab       	std	Y+50, r24	; 0x32
    133a:	8a a9       	ldd	r24, Y+50	; 0x32
    133c:	9b a9       	ldd	r25, Y+51	; 0x33
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <steppermotor+0x42c>
    1342:	9b ab       	std	Y+51, r25	; 0x33
    1344:	8a ab       	std	Y+50, r24	; 0x32
    1346:	18 c0       	rjmp	.+48     	; 0x1378 <steppermotor+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1348:	fe 01       	movw	r30, r28
    134a:	ef 5b       	subi	r30, 0xBF	; 191
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	fe 01       	movw	r30, r28
    1360:	e0 5c       	subi	r30, 0xC0	; 192
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	80 83       	st	Z, r24
    1366:	fe 01       	movw	r30, r28
    1368:	e0 5c       	subi	r30, 0xC0	; 192
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	80 81       	ld	r24, Z
    136e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1370:	89 a9       	ldd	r24, Y+49	; 0x31
    1372:	8a 95       	dec	r24
    1374:	f1 f7       	brne	.-4      	; 0x1372 <steppermotor+0x460>
    1376:	89 ab       	std	Y+49, r24	; 0x31

	_delay_us(100);

	DIO_write(stepper_org_1,LOW);
    1378:	83 e1       	ldi	r24, 0x13	; 19
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(stepper_yel_2,LOW);
    1380:	84 e1       	ldi	r24, 0x14	; 20
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(stepper_pink_3,HIGH);
    1388:	85 e1       	ldi	r24, 0x15	; 21
    138a:	61 e0       	ldi	r22, 0x01	; 1
    138c:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(stepper_blu_4,LOW);
    1390:	86 e1       	ldi	r24, 0x16	; 22
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a8 ec       	ldi	r26, 0xC8	; 200
    139e:	b2 e4       	ldi	r27, 0x42	; 66
    13a0:	8d a7       	std	Y+45, r24	; 0x2d
    13a2:	9e a7       	std	Y+46, r25	; 0x2e
    13a4:	af a7       	std	Y+47, r26	; 0x2f
    13a6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13a8:	6d a5       	ldd	r22, Y+45	; 0x2d
    13aa:	7e a5       	ldd	r23, Y+46	; 0x2e
    13ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ae:	98 a9       	ldd	r25, Y+48	; 0x30
    13b0:	2b ea       	ldi	r18, 0xAB	; 171
    13b2:	3a ea       	ldi	r19, 0xAA	; 170
    13b4:	4a ea       	ldi	r20, 0xAA	; 170
    13b6:	50 e4       	ldi	r21, 0x40	; 64
    13b8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	89 a7       	std	Y+41, r24	; 0x29
    13c2:	9a a7       	std	Y+42, r25	; 0x2a
    13c4:	ab a7       	std	Y+43, r26	; 0x2b
    13c6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    13c8:	69 a5       	ldd	r22, Y+41	; 0x29
    13ca:	7a a5       	ldd	r23, Y+42	; 0x2a
    13cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    13ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    13dc:	88 23       	and	r24, r24
    13de:	1c f4       	brge	.+6      	; 0x13e6 <steppermotor+0x4d4>
		__ticks = 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	88 a7       	std	Y+40, r24	; 0x28
    13e4:	91 c0       	rjmp	.+290    	; 0x1508 <steppermotor+0x5f6>
	else if (__tmp > 255)
    13e6:	69 a5       	ldd	r22, Y+41	; 0x29
    13e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    13ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    13ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	4f e7       	ldi	r20, 0x7F	; 127
    13f4:	53 e4       	ldi	r21, 0x43	; 67
    13f6:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    13fa:	18 16       	cp	r1, r24
    13fc:	0c f0       	brlt	.+2      	; 0x1400 <steppermotor+0x4ee>
    13fe:	7b c0       	rjmp	.+246    	; 0x14f6 <steppermotor+0x5e4>
	{
		_delay_ms(__us / 1000.0);
    1400:	6d a5       	ldd	r22, Y+45	; 0x2d
    1402:	7e a5       	ldd	r23, Y+46	; 0x2e
    1404:	8f a5       	ldd	r24, Y+47	; 0x2f
    1406:	98 a9       	ldd	r25, Y+48	; 0x30
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	4a e7       	ldi	r20, 0x7A	; 122
    140e:	54 e4       	ldi	r21, 0x44	; 68
    1410:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	8c a3       	std	Y+36, r24	; 0x24
    141a:	9d a3       	std	Y+37, r25	; 0x25
    141c:	ae a3       	std	Y+38, r26	; 0x26
    141e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1420:	6c a1       	ldd	r22, Y+36	; 0x24
    1422:	7d a1       	ldd	r23, Y+37	; 0x25
    1424:	8e a1       	ldd	r24, Y+38	; 0x26
    1426:	9f a1       	ldd	r25, Y+39	; 0x27
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	4a e7       	ldi	r20, 0x7A	; 122
    142e:	55 e4       	ldi	r21, 0x45	; 69
    1430:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	88 a3       	std	Y+32, r24	; 0x20
    143a:	99 a3       	std	Y+33, r25	; 0x21
    143c:	aa a3       	std	Y+34, r26	; 0x22
    143e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1440:	68 a1       	ldd	r22, Y+32	; 0x20
    1442:	79 a1       	ldd	r23, Y+33	; 0x21
    1444:	8a a1       	ldd	r24, Y+34	; 0x22
    1446:	9b a1       	ldd	r25, Y+35	; 0x23
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e8       	ldi	r20, 0x80	; 128
    144e:	5f e3       	ldi	r21, 0x3F	; 63
    1450:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    1454:	88 23       	and	r24, r24
    1456:	2c f4       	brge	.+10     	; 0x1462 <steppermotor+0x550>
		__ticks = 1;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9f 8f       	std	Y+31, r25	; 0x1f
    145e:	8e 8f       	std	Y+30, r24	; 0x1e
    1460:	3f c0       	rjmp	.+126    	; 0x14e0 <steppermotor+0x5ce>
	else if (__tmp > 65535)
    1462:	68 a1       	ldd	r22, Y+32	; 0x20
    1464:	79 a1       	ldd	r23, Y+33	; 0x21
    1466:	8a a1       	ldd	r24, Y+34	; 0x22
    1468:	9b a1       	ldd	r25, Y+35	; 0x23
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	3f ef       	ldi	r19, 0xFF	; 255
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	57 e4       	ldi	r21, 0x47	; 71
    1472:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    1476:	18 16       	cp	r1, r24
    1478:	4c f5       	brge	.+82     	; 0x14cc <steppermotor+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147a:	6c a1       	ldd	r22, Y+36	; 0x24
    147c:	7d a1       	ldd	r23, Y+37	; 0x25
    147e:	8e a1       	ldd	r24, Y+38	; 0x26
    1480:	9f a1       	ldd	r25, Y+39	; 0x27
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e2       	ldi	r20, 0x20	; 32
    1488:	51 e4       	ldi	r21, 0x41	; 65
    148a:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	9f 8f       	std	Y+31, r25	; 0x1f
    14a0:	8e 8f       	std	Y+30, r24	; 0x1e
    14a2:	0f c0       	rjmp	.+30     	; 0x14c2 <steppermotor+0x5b0>
    14a4:	80 e9       	ldi	r24, 0x90	; 144
    14a6:	91 e0       	ldi	r25, 0x01	; 1
    14a8:	9d 8f       	std	Y+29, r25	; 0x1d
    14aa:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <steppermotor+0x59e>
    14b4:	9d 8f       	std	Y+29, r25	; 0x1d
    14b6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	9f 8f       	std	Y+31, r25	; 0x1f
    14c0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	69 f7       	brne	.-38     	; 0x14a4 <steppermotor+0x592>
    14ca:	24 c0       	rjmp	.+72     	; 0x1514 <steppermotor+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14cc:	68 a1       	ldd	r22, Y+32	; 0x20
    14ce:	79 a1       	ldd	r23, Y+33	; 0x21
    14d0:	8a a1       	ldd	r24, Y+34	; 0x22
    14d2:	9b a1       	ldd	r25, Y+35	; 0x23
    14d4:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	9f 8f       	std	Y+31, r25	; 0x1f
    14de:	8e 8f       	std	Y+30, r24	; 0x1e
    14e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    14e4:	9b 8f       	std	Y+27, r25	; 0x1b
    14e6:	8a 8f       	std	Y+26, r24	; 0x1a
    14e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14ea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <steppermotor+0x5da>
    14f0:	9b 8f       	std	Y+27, r25	; 0x1b
    14f2:	8a 8f       	std	Y+26, r24	; 0x1a
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <steppermotor+0x602>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14f6:	69 a5       	ldd	r22, Y+41	; 0x29
    14f8:	7a a5       	ldd	r23, Y+42	; 0x2a
    14fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    14fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    14fe:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	88 a7       	std	Y+40, r24	; 0x28
    1508:	88 a5       	ldd	r24, Y+40	; 0x28
    150a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    150c:	89 8d       	ldd	r24, Y+25	; 0x19
    150e:	8a 95       	dec	r24
    1510:	f1 f7       	brne	.-4      	; 0x150e <steppermotor+0x5fc>
    1512:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(100);

	DIO_write(stepper_org_1,LOW);
    1514:	83 e1       	ldi	r24, 0x13	; 19
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(stepper_yel_2,LOW);
    151c:	84 e1       	ldi	r24, 0x14	; 20
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(stepper_pink_3,LOW);
    1524:	85 e1       	ldi	r24, 0x15	; 21
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(stepper_blu_4,HIGH);
    152c:	86 e1       	ldi	r24, 0x16	; 22
    152e:	61 e0       	ldi	r22, 0x01	; 1
    1530:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a8 ec       	ldi	r26, 0xC8	; 200
    153a:	b2 e4       	ldi	r27, 0x42	; 66
    153c:	8d 8b       	std	Y+21, r24	; 0x15
    153e:	9e 8b       	std	Y+22, r25	; 0x16
    1540:	af 8b       	std	Y+23, r26	; 0x17
    1542:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1544:	6d 89       	ldd	r22, Y+21	; 0x15
    1546:	7e 89       	ldd	r23, Y+22	; 0x16
    1548:	8f 89       	ldd	r24, Y+23	; 0x17
    154a:	98 8d       	ldd	r25, Y+24	; 0x18
    154c:	2b ea       	ldi	r18, 0xAB	; 171
    154e:	3a ea       	ldi	r19, 0xAA	; 170
    1550:	4a ea       	ldi	r20, 0xAA	; 170
    1552:	50 e4       	ldi	r21, 0x40	; 64
    1554:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	89 8b       	std	Y+17, r24	; 0x11
    155e:	9a 8b       	std	Y+18, r25	; 0x12
    1560:	ab 8b       	std	Y+19, r26	; 0x13
    1562:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1564:	69 89       	ldd	r22, Y+17	; 0x11
    1566:	7a 89       	ldd	r23, Y+18	; 0x12
    1568:	8b 89       	ldd	r24, Y+19	; 0x13
    156a:	9c 89       	ldd	r25, Y+20	; 0x14
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e8       	ldi	r20, 0x80	; 128
    1572:	5f e3       	ldi	r21, 0x3F	; 63
    1574:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    1578:	88 23       	and	r24, r24
    157a:	1c f4       	brge	.+6      	; 0x1582 <steppermotor+0x670>
		__ticks = 1;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	88 8b       	std	Y+16, r24	; 0x10
    1580:	91 c0       	rjmp	.+290    	; 0x16a4 <steppermotor+0x792>
	else if (__tmp > 255)
    1582:	69 89       	ldd	r22, Y+17	; 0x11
    1584:	7a 89       	ldd	r23, Y+18	; 0x12
    1586:	8b 89       	ldd	r24, Y+19	; 0x13
    1588:	9c 89       	ldd	r25, Y+20	; 0x14
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	4f e7       	ldi	r20, 0x7F	; 127
    1590:	53 e4       	ldi	r21, 0x43	; 67
    1592:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    1596:	18 16       	cp	r1, r24
    1598:	0c f0       	brlt	.+2      	; 0x159c <steppermotor+0x68a>
    159a:	7b c0       	rjmp	.+246    	; 0x1692 <steppermotor+0x780>
	{
		_delay_ms(__us / 1000.0);
    159c:	6d 89       	ldd	r22, Y+21	; 0x15
    159e:	7e 89       	ldd	r23, Y+22	; 0x16
    15a0:	8f 89       	ldd	r24, Y+23	; 0x17
    15a2:	98 8d       	ldd	r25, Y+24	; 0x18
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a e7       	ldi	r20, 0x7A	; 122
    15aa:	54 e4       	ldi	r21, 0x44	; 68
    15ac:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	8c 87       	std	Y+12, r24	; 0x0c
    15b6:	9d 87       	std	Y+13, r25	; 0x0d
    15b8:	ae 87       	std	Y+14, r26	; 0x0e
    15ba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    15be:	7d 85       	ldd	r23, Y+13	; 0x0d
    15c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4a e7       	ldi	r20, 0x7A	; 122
    15ca:	55 e4       	ldi	r21, 0x45	; 69
    15cc:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	88 87       	std	Y+8, r24	; 0x08
    15d6:	99 87       	std	Y+9, r25	; 0x09
    15d8:	aa 87       	std	Y+10, r26	; 0x0a
    15da:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    15dc:	68 85       	ldd	r22, Y+8	; 0x08
    15de:	79 85       	ldd	r23, Y+9	; 0x09
    15e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e8       	ldi	r20, 0x80	; 128
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	2c f4       	brge	.+10     	; 0x15fe <steppermotor+0x6ec>
		__ticks = 1;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	9f 83       	std	Y+7, r25	; 0x07
    15fa:	8e 83       	std	Y+6, r24	; 0x06
    15fc:	3f c0       	rjmp	.+126    	; 0x167c <steppermotor+0x76a>
	else if (__tmp > 65535)
    15fe:	68 85       	ldd	r22, Y+8	; 0x08
    1600:	79 85       	ldd	r23, Y+9	; 0x09
    1602:	8a 85       	ldd	r24, Y+10	; 0x0a
    1604:	9b 85       	ldd	r25, Y+11	; 0x0b
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	3f ef       	ldi	r19, 0xFF	; 255
    160a:	4f e7       	ldi	r20, 0x7F	; 127
    160c:	57 e4       	ldi	r21, 0x47	; 71
    160e:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    1612:	18 16       	cp	r1, r24
    1614:	4c f5       	brge	.+82     	; 0x1668 <steppermotor+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1616:	6c 85       	ldd	r22, Y+12	; 0x0c
    1618:	7d 85       	ldd	r23, Y+13	; 0x0d
    161a:	8e 85       	ldd	r24, Y+14	; 0x0e
    161c:	9f 85       	ldd	r25, Y+15	; 0x0f
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e2       	ldi	r20, 0x20	; 32
    1624:	51 e4       	ldi	r21, 0x41	; 65
    1626:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	9f 83       	std	Y+7, r25	; 0x07
    163c:	8e 83       	std	Y+6, r24	; 0x06
    163e:	0f c0       	rjmp	.+30     	; 0x165e <steppermotor+0x74c>
    1640:	80 e9       	ldi	r24, 0x90	; 144
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	9d 83       	std	Y+5, r25	; 0x05
    1646:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	9d 81       	ldd	r25, Y+5	; 0x05
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <steppermotor+0x73a>
    1650:	9d 83       	std	Y+5, r25	; 0x05
    1652:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1654:	8e 81       	ldd	r24, Y+6	; 0x06
    1656:	9f 81       	ldd	r25, Y+7	; 0x07
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	9f 83       	std	Y+7, r25	; 0x07
    165c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165e:	8e 81       	ldd	r24, Y+6	; 0x06
    1660:	9f 81       	ldd	r25, Y+7	; 0x07
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	69 f7       	brne	.-38     	; 0x1640 <steppermotor+0x72e>
    1666:	24 c0       	rjmp	.+72     	; 0x16b0 <steppermotor+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1668:	68 85       	ldd	r22, Y+8	; 0x08
    166a:	79 85       	ldd	r23, Y+9	; 0x09
    166c:	8a 85       	ldd	r24, Y+10	; 0x0a
    166e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1670:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9f 83       	std	Y+7, r25	; 0x07
    167a:	8e 83       	std	Y+6, r24	; 0x06
    167c:	8e 81       	ldd	r24, Y+6	; 0x06
    167e:	9f 81       	ldd	r25, Y+7	; 0x07
    1680:	9b 83       	std	Y+3, r25	; 0x03
    1682:	8a 83       	std	Y+2, r24	; 0x02
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <steppermotor+0x776>
    168c:	9b 83       	std	Y+3, r25	; 0x03
    168e:	8a 83       	std	Y+2, r24	; 0x02
    1690:	0f c0       	rjmp	.+30     	; 0x16b0 <steppermotor+0x79e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1692:	69 89       	ldd	r22, Y+17	; 0x11
    1694:	7a 89       	ldd	r23, Y+18	; 0x12
    1696:	8b 89       	ldd	r24, Y+19	; 0x13
    1698:	9c 89       	ldd	r25, Y+20	; 0x14
    169a:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	88 8b       	std	Y+16, r24	; 0x10
    16a4:	88 89       	ldd	r24, Y+16	; 0x10
    16a6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	8a 95       	dec	r24
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <steppermotor+0x798>
    16ae:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(100);

}
    16b0:	c0 5a       	subi	r28, 0xA0	; 160
    16b2:	df 4f       	sbci	r29, 0xFF	; 255
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	1f 91       	pop	r17
    16c4:	0f 91       	pop	r16
    16c6:	08 95       	ret

000016c8 <getkeypress>:




unsigned char getkeypress(void)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	0f 92       	push	r0
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
	//pullup
	DIO_write(col0,HIGH);
    16d2:	8c e1       	ldi	r24, 0x1C	; 28
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(col1,HIGH);
    16da:	8d e1       	ldi	r24, 0x1D	; 29
    16dc:	61 e0       	ldi	r22, 0x01	; 1
    16de:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(col2,HIGH);
    16e2:	8e e1       	ldi	r24, 0x1E	; 30
    16e4:	61 e0       	ldi	r22, 0x01	; 1
    16e6:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(col3,HIGH);
    16ea:	8f e1       	ldi	r24, 0x1F	; 31
    16ec:	61 e0       	ldi	r22, 0x01	; 1
    16ee:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>


	DIO_write(row0,LOW);
    16f2:	88 e1       	ldi	r24, 0x18	; 24
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(row1,LOW);
    16fa:	89 e1       	ldi	r24, 0x19	; 25
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(row2,LOW);
    1702:	8a e1       	ldi	r24, 0x1A	; 26
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(row3,LOW);
    170a:	8b e1       	ldi	r24, 0x1B	; 27
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>

	if(DIO_read(col0) && DIO_read(col1) && DIO_read(col2) && DIO_read(col3))
    1712:	8c e1       	ldi	r24, 0x1C	; 28
    1714:	0e 94 57 05 	call	0xaae	; 0xaae <DIO_read>
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	91 f0       	breq	.+36     	; 0x1740 <getkeypress+0x78>
    171c:	8d e1       	ldi	r24, 0x1D	; 29
    171e:	0e 94 57 05 	call	0xaae	; 0xaae <DIO_read>
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	69 f0       	breq	.+26     	; 0x1740 <getkeypress+0x78>
    1726:	8e e1       	ldi	r24, 0x1E	; 30
    1728:	0e 94 57 05 	call	0xaae	; 0xaae <DIO_read>
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	41 f0       	breq	.+16     	; 0x1740 <getkeypress+0x78>
    1730:	8f e1       	ldi	r24, 0x1F	; 31
    1732:	0e 94 57 05 	call	0xaae	; 0xaae <DIO_read>
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	19 f0       	breq	.+6      	; 0x1740 <getkeypress+0x78>
	{
		return 1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <getkeypress+0x7a>
	}
	return 0;
    1740:	19 82       	std	Y+1, r1	; 0x01
    1742:	89 81       	ldd	r24, Y+1	; 0x01

}
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <lcd_init>:
 *      Author: Ali Ehab
 */
#include "LCD.h"

void lcd_init(void)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	2e 97       	sbiw	r28, 0x0e	; 14
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a8 e4       	ldi	r26, 0x48	; 72
    1766:	b3 e4       	ldi	r27, 0x43	; 67
    1768:	8b 87       	std	Y+11, r24	; 0x0b
    176a:	9c 87       	std	Y+12, r25	; 0x0c
    176c:	ad 87       	std	Y+13, r26	; 0x0d
    176e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1770:	6b 85       	ldd	r22, Y+11	; 0x0b
    1772:	7c 85       	ldd	r23, Y+12	; 0x0c
    1774:	8d 85       	ldd	r24, Y+13	; 0x0d
    1776:	9e 85       	ldd	r25, Y+14	; 0x0e
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a e7       	ldi	r20, 0x7A	; 122
    177e:	55 e4       	ldi	r21, 0x45	; 69
    1780:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	8f 83       	std	Y+7, r24	; 0x07
    178a:	98 87       	std	Y+8, r25	; 0x08
    178c:	a9 87       	std	Y+9, r26	; 0x09
    178e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1790:	6f 81       	ldd	r22, Y+7	; 0x07
    1792:	78 85       	ldd	r23, Y+8	; 0x08
    1794:	89 85       	ldd	r24, Y+9	; 0x09
    1796:	9a 85       	ldd	r25, Y+10	; 0x0a
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    17a4:	88 23       	and	r24, r24
    17a6:	2c f4       	brge	.+10     	; 0x17b2 <lcd_init+0x66>
		__ticks = 1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9e 83       	std	Y+6, r25	; 0x06
    17ae:	8d 83       	std	Y+5, r24	; 0x05
    17b0:	3f c0       	rjmp	.+126    	; 0x1830 <lcd_init+0xe4>
	else if (__tmp > 65535)
    17b2:	6f 81       	ldd	r22, Y+7	; 0x07
    17b4:	78 85       	ldd	r23, Y+8	; 0x08
    17b6:	89 85       	ldd	r24, Y+9	; 0x09
    17b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f e7       	ldi	r20, 0x7F	; 127
    17c0:	57 e4       	ldi	r21, 0x47	; 71
    17c2:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    17c6:	18 16       	cp	r1, r24
    17c8:	4c f5       	brge	.+82     	; 0x181c <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    17cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e2       	ldi	r20, 0x20	; 32
    17d8:	51 e4       	ldi	r21, 0x41	; 65
    17da:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9e 83       	std	Y+6, r25	; 0x06
    17f0:	8d 83       	std	Y+5, r24	; 0x05
    17f2:	0f c0       	rjmp	.+30     	; 0x1812 <lcd_init+0xc6>
    17f4:	80 e9       	ldi	r24, 0x90	; 144
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <lcd_init+0xb4>
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	9e 81       	ldd	r25, Y+6	; 0x06
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	69 f7       	brne	.-38     	; 0x17f4 <lcd_init+0xa8>
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181c:	6f 81       	ldd	r22, Y+7	; 0x07
    181e:	78 85       	ldd	r23, Y+8	; 0x08
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	9a 85       	ldd	r25, Y+10	; 0x0a
    1824:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	9a 83       	std	Y+2, r25	; 0x02
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <lcd_init+0xf0>
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	lcd_sendcmd(0x33);
    1844:	83 e3       	ldi	r24, 0x33	; 51
    1846:	0e 94 97 10 	call	0x212e	; 0x212e <lcd_sendcmd>
	lcd_sendcmd(0x32);
    184a:	82 e3       	ldi	r24, 0x32	; 50
    184c:	0e 94 97 10 	call	0x212e	; 0x212e <lcd_sendcmd>
	lcd_sendcmd(0x28);
    1850:	88 e2       	ldi	r24, 0x28	; 40
    1852:	0e 94 97 10 	call	0x212e	; 0x212e <lcd_sendcmd>
	lcd_sendcmd(0x0f);
    1856:	8f e0       	ldi	r24, 0x0F	; 15
    1858:	0e 94 97 10 	call	0x212e	; 0x212e <lcd_sendcmd>
	lcd_sendcmd(0x06);
    185c:	86 e0       	ldi	r24, 0x06	; 6
    185e:	0e 94 97 10 	call	0x212e	; 0x212e <lcd_sendcmd>
	lcd_sendcmd(0x01);
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	0e 94 97 10 	call	0x212e	; 0x212e <lcd_sendcmd>


}
    1868:	2e 96       	adiw	r28, 0x0e	; 14
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <lcd_sendchar>:

void lcd_sendchar(unsigned char data)
{
    187a:	0f 93       	push	r16
    187c:	1f 93       	push	r17
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	c1 56       	subi	r28, 0x61	; 97
    1888:	d0 40       	sbci	r29, 0x00	; 0
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	fe 01       	movw	r30, r28
    1896:	ef 59       	subi	r30, 0x9F	; 159
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 83       	st	Z, r24
	DIO_write(LCD_Rs,HIGH);
    189c:	89 e0       	ldi	r24, 0x09	; 9
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(LCD_Rw,LOW);
    18a4:	8a e0       	ldi	r24, 0x0A	; 10
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	if(GET_BIT(data,4)){DIO_write(LCD_D4,HIGH);}else {DIO_write(LCD_D4,LOW);}
    18ac:	fe 01       	movw	r30, r28
    18ae:	ef 59       	subi	r30, 0x9F	; 159
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	80 81       	ld	r24, Z
    18b4:	82 95       	swap	r24
    18b6:	8f 70       	andi	r24, 0x0F	; 15
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	81 70       	andi	r24, 0x01	; 1
    18be:	90 70       	andi	r25, 0x00	; 0
    18c0:	88 23       	and	r24, r24
    18c2:	29 f0       	breq	.+10     	; 0x18ce <lcd_sendchar+0x54>
    18c4:	84 e0       	ldi	r24, 0x04	; 4
    18c6:	61 e0       	ldi	r22, 0x01	; 1
    18c8:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <lcd_sendchar+0x5c>
    18ce:	84 e0       	ldi	r24, 0x04	; 4
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	if(GET_BIT(data,5)){DIO_write(LCD_D5,HIGH);}else {DIO_write(LCD_D5,LOW);}
    18d6:	fe 01       	movw	r30, r28
    18d8:	ef 59       	subi	r30, 0x9F	; 159
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 81       	ld	r24, Z
    18de:	82 95       	swap	r24
    18e0:	86 95       	lsr	r24
    18e2:	87 70       	andi	r24, 0x07	; 7
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	81 70       	andi	r24, 0x01	; 1
    18ea:	90 70       	andi	r25, 0x00	; 0
    18ec:	88 23       	and	r24, r24
    18ee:	29 f0       	breq	.+10     	; 0x18fa <lcd_sendchar+0x80>
    18f0:	85 e0       	ldi	r24, 0x05	; 5
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <lcd_sendchar+0x88>
    18fa:	85 e0       	ldi	r24, 0x05	; 5
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	if(GET_BIT(data,6)){DIO_write(LCD_D6,HIGH);}else {DIO_write(LCD_D6,LOW);}
    1902:	fe 01       	movw	r30, r28
    1904:	ef 59       	subi	r30, 0x9F	; 159
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	80 81       	ld	r24, Z
    190a:	82 95       	swap	r24
    190c:	86 95       	lsr	r24
    190e:	86 95       	lsr	r24
    1910:	83 70       	andi	r24, 0x03	; 3
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	81 70       	andi	r24, 0x01	; 1
    1918:	90 70       	andi	r25, 0x00	; 0
    191a:	88 23       	and	r24, r24
    191c:	29 f0       	breq	.+10     	; 0x1928 <lcd_sendchar+0xae>
    191e:	86 e0       	ldi	r24, 0x06	; 6
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <lcd_sendchar+0xb6>
    1928:	86 e0       	ldi	r24, 0x06	; 6
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	if(GET_BIT(data,7)){DIO_write(LCD_D7,HIGH);}else {DIO_write(LCD_D7,LOW);}
    1930:	fe 01       	movw	r30, r28
    1932:	ef 59       	subi	r30, 0x9F	; 159
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	80 81       	ld	r24, Z
    1938:	88 23       	and	r24, r24
    193a:	2c f4       	brge	.+10     	; 0x1946 <lcd_sendchar+0xcc>
    193c:	87 e0       	ldi	r24, 0x07	; 7
    193e:	61 e0       	ldi	r22, 0x01	; 1
    1940:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    1944:	04 c0       	rjmp	.+8      	; 0x194e <lcd_sendchar+0xd4>
    1946:	87 e0       	ldi	r24, 0x07	; 7
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>

	DIO_write(LCD_E,HIGH);
    194e:	8b e0       	ldi	r24, 0x0B	; 11
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    1956:	fe 01       	movw	r30, r28
    1958:	e3 5a       	subi	r30, 0xA3	; 163
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a0 e2       	ldi	r26, 0x20	; 32
    1962:	b1 e4       	ldi	r27, 0x41	; 65
    1964:	80 83       	st	Z, r24
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	a2 83       	std	Z+2, r26	; 0x02
    196a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    196c:	8e 01       	movw	r16, r28
    196e:	07 5a       	subi	r16, 0xA7	; 167
    1970:	1f 4f       	sbci	r17, 0xFF	; 255
    1972:	fe 01       	movw	r30, r28
    1974:	e3 5a       	subi	r30, 0xA3	; 163
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	2b ea       	ldi	r18, 0xAB	; 171
    1982:	3a ea       	ldi	r19, 0xAA	; 170
    1984:	4a ea       	ldi	r20, 0xAA	; 170
    1986:	50 e4       	ldi	r21, 0x40	; 64
    1988:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	f8 01       	movw	r30, r16
    1992:	80 83       	st	Z, r24
    1994:	91 83       	std	Z+1, r25	; 0x01
    1996:	a2 83       	std	Z+2, r26	; 0x02
    1998:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    199a:	fe 01       	movw	r30, r28
    199c:	e7 5a       	subi	r30, 0xA7	; 167
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	34 f4       	brge	.+12     	; 0x19c4 <lcd_sendchar+0x14a>
		__ticks = 1;
    19b8:	fe 01       	movw	r30, r28
    19ba:	e8 5a       	subi	r30, 0xA8	; 168
    19bc:	ff 4f       	sbci	r31, 0xFF	; 255
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	80 83       	st	Z, r24
    19c2:	e0 c0       	rjmp	.+448    	; 0x1b84 <lcd_sendchar+0x30a>
	else if (__tmp > 255)
    19c4:	fe 01       	movw	r30, r28
    19c6:	e7 5a       	subi	r30, 0xA7	; 167
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	53 e4       	ldi	r21, 0x43	; 67
    19da:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	0c f0       	brlt	.+2      	; 0x19e4 <lcd_sendchar+0x16a>
    19e2:	c0 c0       	rjmp	.+384    	; 0x1b64 <lcd_sendchar+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    19e4:	fe 01       	movw	r30, r28
    19e6:	e3 5a       	subi	r30, 0xA3	; 163
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	60 81       	ld	r22, Z
    19ec:	71 81       	ldd	r23, Z+1	; 0x01
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	93 81       	ldd	r25, Z+3	; 0x03
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4a e7       	ldi	r20, 0x7A	; 122
    19f8:	54 e4       	ldi	r21, 0x44	; 68
    19fa:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	fe 01       	movw	r30, r28
    1a04:	ec 5a       	subi	r30, 0xAC	; 172
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 83       	st	Z, r24
    1a0a:	91 83       	std	Z+1, r25	; 0x01
    1a0c:	a2 83       	std	Z+2, r26	; 0x02
    1a0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a10:	8e 01       	movw	r16, r28
    1a12:	00 5b       	subi	r16, 0xB0	; 176
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	fe 01       	movw	r30, r28
    1a18:	ec 5a       	subi	r30, 0xAC	; 172
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4a e7       	ldi	r20, 0x7A	; 122
    1a2a:	55 e4       	ldi	r21, 0x45	; 69
    1a2c:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	f8 01       	movw	r30, r16
    1a36:	80 83       	st	Z, r24
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	a2 83       	std	Z+2, r26	; 0x02
    1a3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a3e:	fe 01       	movw	r30, r28
    1a40:	e0 5b       	subi	r30, 0xB0	; 176
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	40 e8       	ldi	r20, 0x80	; 128
    1a52:	5f e3       	ldi	r21, 0x3F	; 63
    1a54:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    1a58:	88 23       	and	r24, r24
    1a5a:	44 f4       	brge	.+16     	; 0x1a6c <lcd_sendchar+0x1f2>
		__ticks = 1;
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e2 5b       	subi	r30, 0xB2	; 178
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
    1a6a:	64 c0       	rjmp	.+200    	; 0x1b34 <lcd_sendchar+0x2ba>
	else if (__tmp > 65535)
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e0 5b       	subi	r30, 0xB0	; 176
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	0c f0       	brlt	.+2      	; 0x1a8c <lcd_sendchar+0x212>
    1a8a:	43 c0       	rjmp	.+134    	; 0x1b12 <lcd_sendchar+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	ec 5a       	subi	r30, 0xAC	; 172
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e2       	ldi	r20, 0x20	; 32
    1aa0:	51 e4       	ldi	r21, 0x41	; 65
    1aa2:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	8e 01       	movw	r16, r28
    1aac:	02 5b       	subi	r16, 0xB2	; 178
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	f8 01       	movw	r30, r16
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
    1ac2:	1f c0       	rjmp	.+62     	; 0x1b02 <lcd_sendchar+0x288>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e4 5b       	subi	r30, 0xB4	; 180
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	80 e9       	ldi	r24, 0x90	; 144
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	80 83       	st	Z, r24
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e4 5b       	subi	r30, 0xB4	; 180
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	80 81       	ld	r24, Z
    1ada:	91 81       	ldd	r25, Z+1	; 0x01
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <lcd_sendchar+0x262>
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	e4 5b       	subi	r30, 0xB4	; 180
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aea:	de 01       	movw	r26, r28
    1aec:	a2 5b       	subi	r26, 0xB2	; 178
    1aee:	bf 4f       	sbci	r27, 0xFF	; 255
    1af0:	fe 01       	movw	r30, r28
    1af2:	e2 5b       	subi	r30, 0xB2	; 178
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	11 96       	adiw	r26, 0x01	; 1
    1afe:	9c 93       	st	X, r25
    1b00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b02:	fe 01       	movw	r30, r28
    1b04:	e2 5b       	subi	r30, 0xB2	; 178
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	80 81       	ld	r24, Z
    1b0a:	91 81       	ldd	r25, Z+1	; 0x01
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	d1 f6       	brne	.-76     	; 0x1ac4 <lcd_sendchar+0x24a>
    1b10:	4b c0       	rjmp	.+150    	; 0x1ba8 <lcd_sendchar+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	8e 01       	movw	r16, r28
    1b14:	02 5b       	subi	r16, 0xB2	; 178
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	fe 01       	movw	r30, r28
    1b1a:	e0 5b       	subi	r30, 0xB0	; 176
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	f8 01       	movw	r30, r16
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
    1b34:	de 01       	movw	r26, r28
    1b36:	a6 5b       	subi	r26, 0xB6	; 182
    1b38:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e2 5b       	subi	r30, 0xB2	; 178
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	11 96       	adiw	r26, 0x01	; 1
    1b46:	9c 93       	st	X, r25
    1b48:	8e 93       	st	-X, r24
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e6 5b       	subi	r30, 0xB6	; 182
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <lcd_sendchar+0x2da>
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e6 5b       	subi	r30, 0xB6	; 182
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24
    1b62:	22 c0       	rjmp	.+68     	; 0x1ba8 <lcd_sendchar+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b64:	8e 01       	movw	r16, r28
    1b66:	08 5a       	subi	r16, 0xA8	; 168
    1b68:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e7 5a       	subi	r30, 0xA7	; 167
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	f8 01       	movw	r30, r16
    1b82:	80 83       	st	Z, r24
    1b84:	de 01       	movw	r26, r28
    1b86:	a7 5b       	subi	r26, 0xB7	; 183
    1b88:	bf 4f       	sbci	r27, 0xFF	; 255
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	e8 5a       	subi	r30, 0xA8	; 168
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	80 81       	ld	r24, Z
    1b92:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b94:	fe 01       	movw	r30, r28
    1b96:	e7 5b       	subi	r30, 0xB7	; 183
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8a 95       	dec	r24
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <lcd_sendchar+0x322>
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e7 5b       	subi	r30, 0xB7	; 183
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 83       	st	Z, r24
	_delay_us(10);
	DIO_write(LCD_E,LOW);
    1ba8:	8b e0       	ldi	r24, 0x0B	; 11
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	eb 5b       	subi	r30, 0xBB	; 187
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	a8 e4       	ldi	r26, 0x48	; 72
    1bbc:	b3 e4       	ldi	r27, 0x43	; 67
    1bbe:	80 83       	st	Z, r24
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	a2 83       	std	Z+2, r26	; 0x02
    1bc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bc6:	8e 01       	movw	r16, r28
    1bc8:	0f 5b       	subi	r16, 0xBF	; 191
    1bca:	1f 4f       	sbci	r17, 0xFF	; 255
    1bcc:	fe 01       	movw	r30, r28
    1bce:	eb 5b       	subi	r30, 0xBB	; 187
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	60 81       	ld	r22, Z
    1bd4:	71 81       	ldd	r23, Z+1	; 0x01
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	2b ea       	ldi	r18, 0xAB	; 171
    1bdc:	3a ea       	ldi	r19, 0xAA	; 170
    1bde:	4a ea       	ldi	r20, 0xAA	; 170
    1be0:	50 e4       	ldi	r21, 0x40	; 64
    1be2:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	f8 01       	movw	r30, r16
    1bec:	80 83       	st	Z, r24
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	a2 83       	std	Z+2, r26	; 0x02
    1bf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	ef 5b       	subi	r30, 0xBF	; 191
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	5f e3       	ldi	r21, 0x3F	; 63
    1c0a:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    1c0e:	88 23       	and	r24, r24
    1c10:	34 f4       	brge	.+12     	; 0x1c1e <lcd_sendchar+0x3a4>
		__ticks = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	fe 01       	movw	r30, r28
    1c16:	e0 5c       	subi	r30, 0xC0	; 192
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	80 83       	st	Z, r24
    1c1c:	9d c0       	rjmp	.+314    	; 0x1d58 <lcd_sendchar+0x4de>
	else if (__tmp > 255)
    1c1e:	fe 01       	movw	r30, r28
    1c20:	ef 5b       	subi	r30, 0xBF	; 191
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	60 81       	ld	r22, Z
    1c26:	71 81       	ldd	r23, Z+1	; 0x01
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4f e7       	ldi	r20, 0x7F	; 127
    1c32:	53 e4       	ldi	r21, 0x43	; 67
    1c34:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    1c38:	18 16       	cp	r1, r24
    1c3a:	0c f0       	brlt	.+2      	; 0x1c3e <lcd_sendchar+0x3c4>
    1c3c:	7e c0       	rjmp	.+252    	; 0x1d3a <lcd_sendchar+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    1c3e:	fe 01       	movw	r30, r28
    1c40:	eb 5b       	subi	r30, 0xBB	; 187
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	60 81       	ld	r22, Z
    1c46:	71 81       	ldd	r23, Z+1	; 0x01
    1c48:	82 81       	ldd	r24, Z+2	; 0x02
    1c4a:	93 81       	ldd	r25, Z+3	; 0x03
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	4a e7       	ldi	r20, 0x7A	; 122
    1c52:	54 e4       	ldi	r21, 0x44	; 68
    1c54:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	8c af       	std	Y+60, r24	; 0x3c
    1c5e:	9d af       	std	Y+61, r25	; 0x3d
    1c60:	ae af       	std	Y+62, r26	; 0x3e
    1c62:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c64:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c66:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c68:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	4a e7       	ldi	r20, 0x7A	; 122
    1c72:	55 e4       	ldi	r21, 0x45	; 69
    1c74:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	88 af       	std	Y+56, r24	; 0x38
    1c7e:	99 af       	std	Y+57, r25	; 0x39
    1c80:	aa af       	std	Y+58, r26	; 0x3a
    1c82:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1c84:	68 ad       	ldd	r22, Y+56	; 0x38
    1c86:	79 ad       	ldd	r23, Y+57	; 0x39
    1c88:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c8a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e8       	ldi	r20, 0x80	; 128
    1c92:	5f e3       	ldi	r21, 0x3F	; 63
    1c94:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    1c98:	88 23       	and	r24, r24
    1c9a:	2c f4       	brge	.+10     	; 0x1ca6 <lcd_sendchar+0x42c>
		__ticks = 1;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9f ab       	std	Y+55, r25	; 0x37
    1ca2:	8e ab       	std	Y+54, r24	; 0x36
    1ca4:	3f c0       	rjmp	.+126    	; 0x1d24 <lcd_sendchar+0x4aa>
	else if (__tmp > 65535)
    1ca6:	68 ad       	ldd	r22, Y+56	; 0x38
    1ca8:	79 ad       	ldd	r23, Y+57	; 0x39
    1caa:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cac:	9b ad       	ldd	r25, Y+59	; 0x3b
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	3f ef       	ldi	r19, 0xFF	; 255
    1cb2:	4f e7       	ldi	r20, 0x7F	; 127
    1cb4:	57 e4       	ldi	r21, 0x47	; 71
    1cb6:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    1cba:	18 16       	cp	r1, r24
    1cbc:	4c f5       	brge	.+82     	; 0x1d10 <lcd_sendchar+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbe:	6c ad       	ldd	r22, Y+60	; 0x3c
    1cc0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1cc2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e2       	ldi	r20, 0x20	; 32
    1ccc:	51 e4       	ldi	r21, 0x41	; 65
    1cce:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	bc 01       	movw	r22, r24
    1cd8:	cd 01       	movw	r24, r26
    1cda:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	9f ab       	std	Y+55, r25	; 0x37
    1ce4:	8e ab       	std	Y+54, r24	; 0x36
    1ce6:	0f c0       	rjmp	.+30     	; 0x1d06 <lcd_sendchar+0x48c>
    1ce8:	80 e9       	ldi	r24, 0x90	; 144
    1cea:	91 e0       	ldi	r25, 0x01	; 1
    1cec:	9d ab       	std	Y+53, r25	; 0x35
    1cee:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cf0:	8c a9       	ldd	r24, Y+52	; 0x34
    1cf2:	9d a9       	ldd	r25, Y+53	; 0x35
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <lcd_sendchar+0x47a>
    1cf8:	9d ab       	std	Y+53, r25	; 0x35
    1cfa:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfc:	8e a9       	ldd	r24, Y+54	; 0x36
    1cfe:	9f a9       	ldd	r25, Y+55	; 0x37
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	9f ab       	std	Y+55, r25	; 0x37
    1d04:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d06:	8e a9       	ldd	r24, Y+54	; 0x36
    1d08:	9f a9       	ldd	r25, Y+55	; 0x37
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	69 f7       	brne	.-38     	; 0x1ce8 <lcd_sendchar+0x46e>
    1d0e:	2d c0       	rjmp	.+90     	; 0x1d6a <lcd_sendchar+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d10:	68 ad       	ldd	r22, Y+56	; 0x38
    1d12:	79 ad       	ldd	r23, Y+57	; 0x39
    1d14:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d16:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d18:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9f ab       	std	Y+55, r25	; 0x37
    1d22:	8e ab       	std	Y+54, r24	; 0x36
    1d24:	8e a9       	ldd	r24, Y+54	; 0x36
    1d26:	9f a9       	ldd	r25, Y+55	; 0x37
    1d28:	9b ab       	std	Y+51, r25	; 0x33
    1d2a:	8a ab       	std	Y+50, r24	; 0x32
    1d2c:	8a a9       	ldd	r24, Y+50	; 0x32
    1d2e:	9b a9       	ldd	r25, Y+51	; 0x33
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <lcd_sendchar+0x4b6>
    1d34:	9b ab       	std	Y+51, r25	; 0x33
    1d36:	8a ab       	std	Y+50, r24	; 0x32
    1d38:	18 c0       	rjmp	.+48     	; 0x1d6a <lcd_sendchar+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	ef 5b       	subi	r30, 0xBF	; 191
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	fe 01       	movw	r30, r28
    1d52:	e0 5c       	subi	r30, 0xC0	; 192
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	80 83       	st	Z, r24
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e0 5c       	subi	r30, 0xC0	; 192
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	80 81       	ld	r24, Z
    1d60:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d62:	89 a9       	ldd	r24, Y+49	; 0x31
    1d64:	8a 95       	dec	r24
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <lcd_sendchar+0x4ea>
    1d68:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	if(GET_BIT(data,0)){DIO_write(LCD_D4,HIGH);}else {DIO_write(LCD_D4,LOW);}
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	ef 59       	subi	r30, 0x9F	; 159
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	80 81       	ld	r24, Z
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	81 70       	andi	r24, 0x01	; 1
    1d78:	90 70       	andi	r25, 0x00	; 0
    1d7a:	88 23       	and	r24, r24
    1d7c:	29 f0       	breq	.+10     	; 0x1d88 <lcd_sendchar+0x50e>
    1d7e:	84 e0       	ldi	r24, 0x04	; 4
    1d80:	61 e0       	ldi	r22, 0x01	; 1
    1d82:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    1d86:	04 c0       	rjmp	.+8      	; 0x1d90 <lcd_sendchar+0x516>
    1d88:	84 e0       	ldi	r24, 0x04	; 4
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	if(GET_BIT(data,1)){DIO_write(LCD_D5,HIGH);}else {DIO_write(LCD_D5,LOW);}
    1d90:	fe 01       	movw	r30, r28
    1d92:	ef 59       	subi	r30, 0x9F	; 159
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	80 81       	ld	r24, Z
    1d98:	86 95       	lsr	r24
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	81 70       	andi	r24, 0x01	; 1
    1da0:	90 70       	andi	r25, 0x00	; 0
    1da2:	88 23       	and	r24, r24
    1da4:	29 f0       	breq	.+10     	; 0x1db0 <lcd_sendchar+0x536>
    1da6:	85 e0       	ldi	r24, 0x05	; 5
    1da8:	61 e0       	ldi	r22, 0x01	; 1
    1daa:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    1dae:	04 c0       	rjmp	.+8      	; 0x1db8 <lcd_sendchar+0x53e>
    1db0:	85 e0       	ldi	r24, 0x05	; 5
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	if(GET_BIT(data,2)){DIO_write(LCD_D6,HIGH);}else {DIO_write(LCD_D6,LOW);}
    1db8:	fe 01       	movw	r30, r28
    1dba:	ef 59       	subi	r30, 0x9F	; 159
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 81       	ld	r24, Z
    1dc0:	86 95       	lsr	r24
    1dc2:	86 95       	lsr	r24
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	81 70       	andi	r24, 0x01	; 1
    1dca:	90 70       	andi	r25, 0x00	; 0
    1dcc:	88 23       	and	r24, r24
    1dce:	29 f0       	breq	.+10     	; 0x1dda <lcd_sendchar+0x560>
    1dd0:	86 e0       	ldi	r24, 0x06	; 6
    1dd2:	61 e0       	ldi	r22, 0x01	; 1
    1dd4:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    1dd8:	04 c0       	rjmp	.+8      	; 0x1de2 <lcd_sendchar+0x568>
    1dda:	86 e0       	ldi	r24, 0x06	; 6
    1ddc:	60 e0       	ldi	r22, 0x00	; 0
    1dde:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	if(GET_BIT(data,3)){DIO_write(LCD_D7,HIGH);}else {DIO_write(LCD_D7,LOW);}
    1de2:	fe 01       	movw	r30, r28
    1de4:	ef 59       	subi	r30, 0x9F	; 159
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	86 95       	lsr	r24
    1dec:	86 95       	lsr	r24
    1dee:	86 95       	lsr	r24
    1df0:	88 2f       	mov	r24, r24
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	81 70       	andi	r24, 0x01	; 1
    1df6:	90 70       	andi	r25, 0x00	; 0
    1df8:	88 23       	and	r24, r24
    1dfa:	29 f0       	breq	.+10     	; 0x1e06 <lcd_sendchar+0x58c>
    1dfc:	87 e0       	ldi	r24, 0x07	; 7
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    1e04:	04 c0       	rjmp	.+8      	; 0x1e0e <lcd_sendchar+0x594>
    1e06:	87 e0       	ldi	r24, 0x07	; 7
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>

	DIO_write(LCD_E,HIGH);
    1e0e:	8b e0       	ldi	r24, 0x0B	; 11
    1e10:	61 e0       	ldi	r22, 0x01	; 1
    1e12:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 e2       	ldi	r26, 0x20	; 32
    1e1c:	b1 e4       	ldi	r27, 0x41	; 65
    1e1e:	8d a7       	std	Y+45, r24	; 0x2d
    1e20:	9e a7       	std	Y+46, r25	; 0x2e
    1e22:	af a7       	std	Y+47, r26	; 0x2f
    1e24:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e26:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e28:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e2e:	2b ea       	ldi	r18, 0xAB	; 171
    1e30:	3a ea       	ldi	r19, 0xAA	; 170
    1e32:	4a ea       	ldi	r20, 0xAA	; 170
    1e34:	50 e4       	ldi	r21, 0x40	; 64
    1e36:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	89 a7       	std	Y+41, r24	; 0x29
    1e40:	9a a7       	std	Y+42, r25	; 0x2a
    1e42:	ab a7       	std	Y+43, r26	; 0x2b
    1e44:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e46:	69 a5       	ldd	r22, Y+41	; 0x29
    1e48:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	1c f4       	brge	.+6      	; 0x1e64 <lcd_sendchar+0x5ea>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	88 a7       	std	Y+40, r24	; 0x28
    1e62:	91 c0       	rjmp	.+290    	; 0x1f86 <lcd_sendchar+0x70c>
	else if (__tmp > 255)
    1e64:	69 a5       	ldd	r22, Y+41	; 0x29
    1e66:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	4f e7       	ldi	r20, 0x7F	; 127
    1e72:	53 e4       	ldi	r21, 0x43	; 67
    1e74:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    1e78:	18 16       	cp	r1, r24
    1e7a:	0c f0       	brlt	.+2      	; 0x1e7e <lcd_sendchar+0x604>
    1e7c:	7b c0       	rjmp	.+246    	; 0x1f74 <lcd_sendchar+0x6fa>
	{
		_delay_ms(__us / 1000.0);
    1e7e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e80:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e84:	98 a9       	ldd	r25, Y+48	; 0x30
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a e7       	ldi	r20, 0x7A	; 122
    1e8c:	54 e4       	ldi	r21, 0x44	; 68
    1e8e:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8c a3       	std	Y+36, r24	; 0x24
    1e98:	9d a3       	std	Y+37, r25	; 0x25
    1e9a:	ae a3       	std	Y+38, r26	; 0x26
    1e9c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9e:	6c a1       	ldd	r22, Y+36	; 0x24
    1ea0:	7d a1       	ldd	r23, Y+37	; 0x25
    1ea2:	8e a1       	ldd	r24, Y+38	; 0x26
    1ea4:	9f a1       	ldd	r25, Y+39	; 0x27
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	4a e7       	ldi	r20, 0x7A	; 122
    1eac:	55 e4       	ldi	r21, 0x45	; 69
    1eae:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	88 a3       	std	Y+32, r24	; 0x20
    1eb8:	99 a3       	std	Y+33, r25	; 0x21
    1eba:	aa a3       	std	Y+34, r26	; 0x22
    1ebc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ebe:	68 a1       	ldd	r22, Y+32	; 0x20
    1ec0:	79 a1       	ldd	r23, Y+33	; 0x21
    1ec2:	8a a1       	ldd	r24, Y+34	; 0x22
    1ec4:	9b a1       	ldd	r25, Y+35	; 0x23
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e8       	ldi	r20, 0x80	; 128
    1ecc:	5f e3       	ldi	r21, 0x3F	; 63
    1ece:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    1ed2:	88 23       	and	r24, r24
    1ed4:	2c f4       	brge	.+10     	; 0x1ee0 <lcd_sendchar+0x666>
		__ticks = 1;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9f 8f       	std	Y+31, r25	; 0x1f
    1edc:	8e 8f       	std	Y+30, r24	; 0x1e
    1ede:	3f c0       	rjmp	.+126    	; 0x1f5e <lcd_sendchar+0x6e4>
	else if (__tmp > 65535)
    1ee0:	68 a1       	ldd	r22, Y+32	; 0x20
    1ee2:	79 a1       	ldd	r23, Y+33	; 0x21
    1ee4:	8a a1       	ldd	r24, Y+34	; 0x22
    1ee6:	9b a1       	ldd	r25, Y+35	; 0x23
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	3f ef       	ldi	r19, 0xFF	; 255
    1eec:	4f e7       	ldi	r20, 0x7F	; 127
    1eee:	57 e4       	ldi	r21, 0x47	; 71
    1ef0:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    1ef4:	18 16       	cp	r1, r24
    1ef6:	4c f5       	brge	.+82     	; 0x1f4a <lcd_sendchar+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef8:	6c a1       	ldd	r22, Y+36	; 0x24
    1efa:	7d a1       	ldd	r23, Y+37	; 0x25
    1efc:	8e a1       	ldd	r24, Y+38	; 0x26
    1efe:	9f a1       	ldd	r25, Y+39	; 0x27
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e2       	ldi	r20, 0x20	; 32
    1f06:	51 e4       	ldi	r21, 0x41	; 65
    1f08:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f1e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f20:	0f c0       	rjmp	.+30     	; 0x1f40 <lcd_sendchar+0x6c6>
    1f22:	80 e9       	ldi	r24, 0x90	; 144
    1f24:	91 e0       	ldi	r25, 0x01	; 1
    1f26:	9d 8f       	std	Y+29, r25	; 0x1d
    1f28:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <lcd_sendchar+0x6b4>
    1f32:	9d 8f       	std	Y+29, r25	; 0x1d
    1f34:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f38:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f3e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	69 f7       	brne	.-38     	; 0x1f22 <lcd_sendchar+0x6a8>
    1f48:	24 c0       	rjmp	.+72     	; 0x1f92 <lcd_sendchar+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f4c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f4e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f50:	9b a1       	ldd	r25, Y+35	; 0x23
    1f52:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9f 8f       	std	Y+31, r25	; 0x1f
    1f5c:	8e 8f       	std	Y+30, r24	; 0x1e
    1f5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f60:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f62:	9b 8f       	std	Y+27, r25	; 0x1b
    1f64:	8a 8f       	std	Y+26, r24	; 0x1a
    1f66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f68:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <lcd_sendchar+0x6f0>
    1f6e:	9b 8f       	std	Y+27, r25	; 0x1b
    1f70:	8a 8f       	std	Y+26, r24	; 0x1a
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <lcd_sendchar+0x718>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f74:	69 a5       	ldd	r22, Y+41	; 0x29
    1f76:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f78:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f7c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	88 a7       	std	Y+40, r24	; 0x28
    1f86:	88 a5       	ldd	r24, Y+40	; 0x28
    1f88:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f8a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f8c:	8a 95       	dec	r24
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <lcd_sendchar+0x712>
    1f90:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_write(LCD_E,LOW);
    1f92:	8b e0       	ldi	r24, 0x0B	; 11
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	a8 e4       	ldi	r26, 0x48	; 72
    1fa0:	b3 e4       	ldi	r27, 0x43	; 67
    1fa2:	8d 8b       	std	Y+21, r24	; 0x15
    1fa4:	9e 8b       	std	Y+22, r25	; 0x16
    1fa6:	af 8b       	std	Y+23, r26	; 0x17
    1fa8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1faa:	6d 89       	ldd	r22, Y+21	; 0x15
    1fac:	7e 89       	ldd	r23, Y+22	; 0x16
    1fae:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb2:	2b ea       	ldi	r18, 0xAB	; 171
    1fb4:	3a ea       	ldi	r19, 0xAA	; 170
    1fb6:	4a ea       	ldi	r20, 0xAA	; 170
    1fb8:	50 e4       	ldi	r21, 0x40	; 64
    1fba:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	89 8b       	std	Y+17, r24	; 0x11
    1fc4:	9a 8b       	std	Y+18, r25	; 0x12
    1fc6:	ab 8b       	std	Y+19, r26	; 0x13
    1fc8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fca:	69 89       	ldd	r22, Y+17	; 0x11
    1fcc:	7a 89       	ldd	r23, Y+18	; 0x12
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e8       	ldi	r20, 0x80	; 128
    1fd8:	5f e3       	ldi	r21, 0x3F	; 63
    1fda:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    1fde:	88 23       	and	r24, r24
    1fe0:	1c f4       	brge	.+6      	; 0x1fe8 <lcd_sendchar+0x76e>
		__ticks = 1;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	88 8b       	std	Y+16, r24	; 0x10
    1fe6:	91 c0       	rjmp	.+290    	; 0x210a <lcd_sendchar+0x890>
	else if (__tmp > 255)
    1fe8:	69 89       	ldd	r22, Y+17	; 0x11
    1fea:	7a 89       	ldd	r23, Y+18	; 0x12
    1fec:	8b 89       	ldd	r24, Y+19	; 0x13
    1fee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	53 e4       	ldi	r21, 0x43	; 67
    1ff8:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	0c f0       	brlt	.+2      	; 0x2002 <lcd_sendchar+0x788>
    2000:	7b c0       	rjmp	.+246    	; 0x20f8 <lcd_sendchar+0x87e>
	{
		_delay_ms(__us / 1000.0);
    2002:	6d 89       	ldd	r22, Y+21	; 0x15
    2004:	7e 89       	ldd	r23, Y+22	; 0x16
    2006:	8f 89       	ldd	r24, Y+23	; 0x17
    2008:	98 8d       	ldd	r25, Y+24	; 0x18
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	4a e7       	ldi	r20, 0x7A	; 122
    2010:	54 e4       	ldi	r21, 0x44	; 68
    2012:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	8c 87       	std	Y+12, r24	; 0x0c
    201c:	9d 87       	std	Y+13, r25	; 0x0d
    201e:	ae 87       	std	Y+14, r26	; 0x0e
    2020:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	6c 85       	ldd	r22, Y+12	; 0x0c
    2024:	7d 85       	ldd	r23, Y+13	; 0x0d
    2026:	8e 85       	ldd	r24, Y+14	; 0x0e
    2028:	9f 85       	ldd	r25, Y+15	; 0x0f
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	4a e7       	ldi	r20, 0x7A	; 122
    2030:	55 e4       	ldi	r21, 0x45	; 69
    2032:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	88 87       	std	Y+8, r24	; 0x08
    203c:	99 87       	std	Y+9, r25	; 0x09
    203e:	aa 87       	std	Y+10, r26	; 0x0a
    2040:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2042:	68 85       	ldd	r22, Y+8	; 0x08
    2044:	79 85       	ldd	r23, Y+9	; 0x09
    2046:	8a 85       	ldd	r24, Y+10	; 0x0a
    2048:	9b 85       	ldd	r25, Y+11	; 0x0b
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	2c f4       	brge	.+10     	; 0x2064 <lcd_sendchar+0x7ea>
		__ticks = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9f 83       	std	Y+7, r25	; 0x07
    2060:	8e 83       	std	Y+6, r24	; 0x06
    2062:	3f c0       	rjmp	.+126    	; 0x20e2 <lcd_sendchar+0x868>
	else if (__tmp > 65535)
    2064:	68 85       	ldd	r22, Y+8	; 0x08
    2066:	79 85       	ldd	r23, Y+9	; 0x09
    2068:	8a 85       	ldd	r24, Y+10	; 0x0a
    206a:	9b 85       	ldd	r25, Y+11	; 0x0b
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	3f ef       	ldi	r19, 0xFF	; 255
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	57 e4       	ldi	r21, 0x47	; 71
    2074:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    2078:	18 16       	cp	r1, r24
    207a:	4c f5       	brge	.+82     	; 0x20ce <lcd_sendchar+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207c:	6c 85       	ldd	r22, Y+12	; 0x0c
    207e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2080:	8e 85       	ldd	r24, Y+14	; 0x0e
    2082:	9f 85       	ldd	r25, Y+15	; 0x0f
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9f 83       	std	Y+7, r25	; 0x07
    20a2:	8e 83       	std	Y+6, r24	; 0x06
    20a4:	0f c0       	rjmp	.+30     	; 0x20c4 <lcd_sendchar+0x84a>
    20a6:	80 e9       	ldi	r24, 0x90	; 144
    20a8:	91 e0       	ldi	r25, 0x01	; 1
    20aa:	9d 83       	std	Y+5, r25	; 0x05
    20ac:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ae:	8c 81       	ldd	r24, Y+4	; 0x04
    20b0:	9d 81       	ldd	r25, Y+5	; 0x05
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <lcd_sendchar+0x838>
    20b6:	9d 83       	std	Y+5, r25	; 0x05
    20b8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ba:	8e 81       	ldd	r24, Y+6	; 0x06
    20bc:	9f 81       	ldd	r25, Y+7	; 0x07
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	9f 83       	std	Y+7, r25	; 0x07
    20c2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c4:	8e 81       	ldd	r24, Y+6	; 0x06
    20c6:	9f 81       	ldd	r25, Y+7	; 0x07
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	69 f7       	brne	.-38     	; 0x20a6 <lcd_sendchar+0x82c>
    20cc:	24 c0       	rjmp	.+72     	; 0x2116 <lcd_sendchar+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ce:	68 85       	ldd	r22, Y+8	; 0x08
    20d0:	79 85       	ldd	r23, Y+9	; 0x09
    20d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d6:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9f 83       	std	Y+7, r25	; 0x07
    20e0:	8e 83       	std	Y+6, r24	; 0x06
    20e2:	8e 81       	ldd	r24, Y+6	; 0x06
    20e4:	9f 81       	ldd	r25, Y+7	; 0x07
    20e6:	9b 83       	std	Y+3, r25	; 0x03
    20e8:	8a 83       	std	Y+2, r24	; 0x02
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	9b 81       	ldd	r25, Y+3	; 0x03
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <lcd_sendchar+0x874>
    20f2:	9b 83       	std	Y+3, r25	; 0x03
    20f4:	8a 83       	std	Y+2, r24	; 0x02
    20f6:	0f c0       	rjmp	.+30     	; 0x2116 <lcd_sendchar+0x89c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20f8:	69 89       	ldd	r22, Y+17	; 0x11
    20fa:	7a 89       	ldd	r23, Y+18	; 0x12
    20fc:	8b 89       	ldd	r24, Y+19	; 0x13
    20fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2100:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	88 8b       	std	Y+16, r24	; 0x10
    210a:	88 89       	ldd	r24, Y+16	; 0x10
    210c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	8a 95       	dec	r24
    2112:	f1 f7       	brne	.-4      	; 0x2110 <lcd_sendchar+0x896>
    2114:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    2116:	cf 59       	subi	r28, 0x9F	; 159
    2118:	df 4f       	sbci	r29, 0xFF	; 255
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	08 95       	ret

0000212e <lcd_sendcmd>:

void lcd_sendcmd(unsigned char cmd)
{
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	c1 56       	subi	r28, 0x61	; 97
    213c:	d0 40       	sbci	r29, 0x00	; 0
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	fe 01       	movw	r30, r28
    214a:	ef 59       	subi	r30, 0x9F	; 159
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	80 83       	st	Z, r24
	DIO_write(LCD_Rs,LOW);
    2150:	89 e0       	ldi	r24, 0x09	; 9
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
	DIO_write(LCD_Rw,LOW);
    2158:	8a e0       	ldi	r24, 0x0A	; 10
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
		if(GET_BIT(cmd,4)){DIO_write(LCD_D4,HIGH);}else {DIO_write(LCD_D4,LOW);}
    2160:	fe 01       	movw	r30, r28
    2162:	ef 59       	subi	r30, 0x9F	; 159
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	82 95       	swap	r24
    216a:	8f 70       	andi	r24, 0x0F	; 15
    216c:	88 2f       	mov	r24, r24
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	81 70       	andi	r24, 0x01	; 1
    2172:	90 70       	andi	r25, 0x00	; 0
    2174:	88 23       	and	r24, r24
    2176:	29 f0       	breq	.+10     	; 0x2182 <lcd_sendcmd+0x54>
    2178:	84 e0       	ldi	r24, 0x04	; 4
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    2180:	04 c0       	rjmp	.+8      	; 0x218a <lcd_sendcmd+0x5c>
    2182:	84 e0       	ldi	r24, 0x04	; 4
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
		if(GET_BIT(cmd,5)){DIO_write(LCD_D5,HIGH);}else {DIO_write(LCD_D5,LOW);}
    218a:	fe 01       	movw	r30, r28
    218c:	ef 59       	subi	r30, 0x9F	; 159
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 81       	ld	r24, Z
    2192:	82 95       	swap	r24
    2194:	86 95       	lsr	r24
    2196:	87 70       	andi	r24, 0x07	; 7
    2198:	88 2f       	mov	r24, r24
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	81 70       	andi	r24, 0x01	; 1
    219e:	90 70       	andi	r25, 0x00	; 0
    21a0:	88 23       	and	r24, r24
    21a2:	29 f0       	breq	.+10     	; 0x21ae <lcd_sendcmd+0x80>
    21a4:	85 e0       	ldi	r24, 0x05	; 5
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    21ac:	04 c0       	rjmp	.+8      	; 0x21b6 <lcd_sendcmd+0x88>
    21ae:	85 e0       	ldi	r24, 0x05	; 5
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
		if(GET_BIT(cmd,6)){DIO_write(LCD_D6,HIGH);}else {DIO_write(LCD_D6,LOW);}
    21b6:	fe 01       	movw	r30, r28
    21b8:	ef 59       	subi	r30, 0x9F	; 159
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 81       	ld	r24, Z
    21be:	82 95       	swap	r24
    21c0:	86 95       	lsr	r24
    21c2:	86 95       	lsr	r24
    21c4:	83 70       	andi	r24, 0x03	; 3
    21c6:	88 2f       	mov	r24, r24
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	81 70       	andi	r24, 0x01	; 1
    21cc:	90 70       	andi	r25, 0x00	; 0
    21ce:	88 23       	and	r24, r24
    21d0:	29 f0       	breq	.+10     	; 0x21dc <lcd_sendcmd+0xae>
    21d2:	86 e0       	ldi	r24, 0x06	; 6
    21d4:	61 e0       	ldi	r22, 0x01	; 1
    21d6:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    21da:	04 c0       	rjmp	.+8      	; 0x21e4 <lcd_sendcmd+0xb6>
    21dc:	86 e0       	ldi	r24, 0x06	; 6
    21de:	60 e0       	ldi	r22, 0x00	; 0
    21e0:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
		if(GET_BIT(cmd,7)){DIO_write(LCD_D7,HIGH);}else {DIO_write(LCD_D7,LOW);}
    21e4:	fe 01       	movw	r30, r28
    21e6:	ef 59       	subi	r30, 0x9F	; 159
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	80 81       	ld	r24, Z
    21ec:	88 23       	and	r24, r24
    21ee:	2c f4       	brge	.+10     	; 0x21fa <lcd_sendcmd+0xcc>
    21f0:	87 e0       	ldi	r24, 0x07	; 7
    21f2:	61 e0       	ldi	r22, 0x01	; 1
    21f4:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    21f8:	04 c0       	rjmp	.+8      	; 0x2202 <lcd_sendcmd+0xd4>
    21fa:	87 e0       	ldi	r24, 0x07	; 7
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>

		DIO_write(LCD_E,HIGH);
    2202:	8b e0       	ldi	r24, 0x0B	; 11
    2204:	61 e0       	ldi	r22, 0x01	; 1
    2206:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    220a:	fe 01       	movw	r30, r28
    220c:	e3 5a       	subi	r30, 0xA3	; 163
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e2       	ldi	r26, 0x20	; 32
    2216:	b1 e4       	ldi	r27, 0x41	; 65
    2218:	80 83       	st	Z, r24
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	a2 83       	std	Z+2, r26	; 0x02
    221e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2220:	8e 01       	movw	r16, r28
    2222:	07 5a       	subi	r16, 0xA7	; 167
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	fe 01       	movw	r30, r28
    2228:	e3 5a       	subi	r30, 0xA3	; 163
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	60 81       	ld	r22, Z
    222e:	71 81       	ldd	r23, Z+1	; 0x01
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	93 81       	ldd	r25, Z+3	; 0x03
    2234:	2b ea       	ldi	r18, 0xAB	; 171
    2236:	3a ea       	ldi	r19, 0xAA	; 170
    2238:	4a ea       	ldi	r20, 0xAA	; 170
    223a:	50 e4       	ldi	r21, 0x40	; 64
    223c:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	f8 01       	movw	r30, r16
    2246:	80 83       	st	Z, r24
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	a2 83       	std	Z+2, r26	; 0x02
    224c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    224e:	fe 01       	movw	r30, r28
    2250:	e7 5a       	subi	r30, 0xA7	; 167
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e8       	ldi	r20, 0x80	; 128
    2262:	5f e3       	ldi	r21, 0x3F	; 63
    2264:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    2268:	88 23       	and	r24, r24
    226a:	34 f4       	brge	.+12     	; 0x2278 <lcd_sendcmd+0x14a>
		__ticks = 1;
    226c:	fe 01       	movw	r30, r28
    226e:	e8 5a       	subi	r30, 0xA8	; 168
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	80 83       	st	Z, r24
    2276:	e0 c0       	rjmp	.+448    	; 0x2438 <lcd_sendcmd+0x30a>
	else if (__tmp > 255)
    2278:	fe 01       	movw	r30, r28
    227a:	e7 5a       	subi	r30, 0xA7	; 167
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	60 81       	ld	r22, Z
    2280:	71 81       	ldd	r23, Z+1	; 0x01
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	4f e7       	ldi	r20, 0x7F	; 127
    228c:	53 e4       	ldi	r21, 0x43	; 67
    228e:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    2292:	18 16       	cp	r1, r24
    2294:	0c f0       	brlt	.+2      	; 0x2298 <lcd_sendcmd+0x16a>
    2296:	c0 c0       	rjmp	.+384    	; 0x2418 <lcd_sendcmd+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    2298:	fe 01       	movw	r30, r28
    229a:	e3 5a       	subi	r30, 0xA3	; 163
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	60 81       	ld	r22, Z
    22a0:	71 81       	ldd	r23, Z+1	; 0x01
    22a2:	82 81       	ldd	r24, Z+2	; 0x02
    22a4:	93 81       	ldd	r25, Z+3	; 0x03
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4a e7       	ldi	r20, 0x7A	; 122
    22ac:	54 e4       	ldi	r21, 0x44	; 68
    22ae:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	fe 01       	movw	r30, r28
    22b8:	ec 5a       	subi	r30, 0xAC	; 172
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	80 83       	st	Z, r24
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	a2 83       	std	Z+2, r26	; 0x02
    22c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c4:	8e 01       	movw	r16, r28
    22c6:	00 5b       	subi	r16, 0xB0	; 176
    22c8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ca:	fe 01       	movw	r30, r28
    22cc:	ec 5a       	subi	r30, 0xAC	; 172
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	60 81       	ld	r22, Z
    22d2:	71 81       	ldd	r23, Z+1	; 0x01
    22d4:	82 81       	ldd	r24, Z+2	; 0x02
    22d6:	93 81       	ldd	r25, Z+3	; 0x03
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4a e7       	ldi	r20, 0x7A	; 122
    22de:	55 e4       	ldi	r21, 0x45	; 69
    22e0:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	f8 01       	movw	r30, r16
    22ea:	80 83       	st	Z, r24
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	a2 83       	std	Z+2, r26	; 0x02
    22f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22f2:	fe 01       	movw	r30, r28
    22f4:	e0 5b       	subi	r30, 0xB0	; 176
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	60 81       	ld	r22, Z
    22fa:	71 81       	ldd	r23, Z+1	; 0x01
    22fc:	82 81       	ldd	r24, Z+2	; 0x02
    22fe:	93 81       	ldd	r25, Z+3	; 0x03
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e8       	ldi	r20, 0x80	; 128
    2306:	5f e3       	ldi	r21, 0x3F	; 63
    2308:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    230c:	88 23       	and	r24, r24
    230e:	44 f4       	brge	.+16     	; 0x2320 <lcd_sendcmd+0x1f2>
		__ticks = 1;
    2310:	fe 01       	movw	r30, r28
    2312:	e2 5b       	subi	r30, 0xB2	; 178
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	80 83       	st	Z, r24
    231e:	64 c0       	rjmp	.+200    	; 0x23e8 <lcd_sendcmd+0x2ba>
	else if (__tmp > 65535)
    2320:	fe 01       	movw	r30, r28
    2322:	e0 5b       	subi	r30, 0xB0	; 176
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	60 81       	ld	r22, Z
    2328:	71 81       	ldd	r23, Z+1	; 0x01
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	93 81       	ldd	r25, Z+3	; 0x03
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	3f ef       	ldi	r19, 0xFF	; 255
    2332:	4f e7       	ldi	r20, 0x7F	; 127
    2334:	57 e4       	ldi	r21, 0x47	; 71
    2336:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    233a:	18 16       	cp	r1, r24
    233c:	0c f0       	brlt	.+2      	; 0x2340 <lcd_sendcmd+0x212>
    233e:	43 c0       	rjmp	.+134    	; 0x23c6 <lcd_sendcmd+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2340:	fe 01       	movw	r30, r28
    2342:	ec 5a       	subi	r30, 0xAC	; 172
    2344:	ff 4f       	sbci	r31, 0xFF	; 255
    2346:	60 81       	ld	r22, Z
    2348:	71 81       	ldd	r23, Z+1	; 0x01
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	93 81       	ldd	r25, Z+3	; 0x03
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e2       	ldi	r20, 0x20	; 32
    2354:	51 e4       	ldi	r21, 0x41	; 65
    2356:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	8e 01       	movw	r16, r28
    2360:	02 5b       	subi	r16, 0xB2	; 178
    2362:	1f 4f       	sbci	r17, 0xFF	; 255
    2364:	bc 01       	movw	r22, r24
    2366:	cd 01       	movw	r24, r26
    2368:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	f8 01       	movw	r30, r16
    2372:	91 83       	std	Z+1, r25	; 0x01
    2374:	80 83       	st	Z, r24
    2376:	1f c0       	rjmp	.+62     	; 0x23b6 <lcd_sendcmd+0x288>
    2378:	fe 01       	movw	r30, r28
    237a:	e4 5b       	subi	r30, 0xB4	; 180
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 e9       	ldi	r24, 0x90	; 144
    2380:	91 e0       	ldi	r25, 0x01	; 1
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2386:	fe 01       	movw	r30, r28
    2388:	e4 5b       	subi	r30, 0xB4	; 180
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	80 81       	ld	r24, Z
    238e:	91 81       	ldd	r25, Z+1	; 0x01
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <lcd_sendcmd+0x262>
    2394:	fe 01       	movw	r30, r28
    2396:	e4 5b       	subi	r30, 0xB4	; 180
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	91 83       	std	Z+1, r25	; 0x01
    239c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	de 01       	movw	r26, r28
    23a0:	a2 5b       	subi	r26, 0xB2	; 178
    23a2:	bf 4f       	sbci	r27, 0xFF	; 255
    23a4:	fe 01       	movw	r30, r28
    23a6:	e2 5b       	subi	r30, 0xB2	; 178
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	91 81       	ldd	r25, Z+1	; 0x01
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	11 96       	adiw	r26, 0x01	; 1
    23b2:	9c 93       	st	X, r25
    23b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b6:	fe 01       	movw	r30, r28
    23b8:	e2 5b       	subi	r30, 0xB2	; 178
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 81       	ld	r24, Z
    23be:	91 81       	ldd	r25, Z+1	; 0x01
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	d1 f6       	brne	.-76     	; 0x2378 <lcd_sendcmd+0x24a>
    23c4:	4b c0       	rjmp	.+150    	; 0x245c <lcd_sendcmd+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c6:	8e 01       	movw	r16, r28
    23c8:	02 5b       	subi	r16, 0xB2	; 178
    23ca:	1f 4f       	sbci	r17, 0xFF	; 255
    23cc:	fe 01       	movw	r30, r28
    23ce:	e0 5b       	subi	r30, 0xB0	; 176
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	60 81       	ld	r22, Z
    23d4:	71 81       	ldd	r23, Z+1	; 0x01
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	93 81       	ldd	r25, Z+3	; 0x03
    23da:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	f8 01       	movw	r30, r16
    23e4:	91 83       	std	Z+1, r25	; 0x01
    23e6:	80 83       	st	Z, r24
    23e8:	de 01       	movw	r26, r28
    23ea:	a6 5b       	subi	r26, 0xB6	; 182
    23ec:	bf 4f       	sbci	r27, 0xFF	; 255
    23ee:	fe 01       	movw	r30, r28
    23f0:	e2 5b       	subi	r30, 0xB2	; 178
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	11 96       	adiw	r26, 0x01	; 1
    23fa:	9c 93       	st	X, r25
    23fc:	8e 93       	st	-X, r24
    23fe:	fe 01       	movw	r30, r28
    2400:	e6 5b       	subi	r30, 0xB6	; 182
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <lcd_sendcmd+0x2da>
    240c:	fe 01       	movw	r30, r28
    240e:	e6 5b       	subi	r30, 0xB6	; 182
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
    2416:	22 c0       	rjmp	.+68     	; 0x245c <lcd_sendcmd+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2418:	8e 01       	movw	r16, r28
    241a:	08 5a       	subi	r16, 0xA8	; 168
    241c:	1f 4f       	sbci	r17, 0xFF	; 255
    241e:	fe 01       	movw	r30, r28
    2420:	e7 5a       	subi	r30, 0xA7	; 167
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	f8 01       	movw	r30, r16
    2436:	80 83       	st	Z, r24
    2438:	de 01       	movw	r26, r28
    243a:	a7 5b       	subi	r26, 0xB7	; 183
    243c:	bf 4f       	sbci	r27, 0xFF	; 255
    243e:	fe 01       	movw	r30, r28
    2440:	e8 5a       	subi	r30, 0xA8	; 168
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	80 81       	ld	r24, Z
    2446:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2448:	fe 01       	movw	r30, r28
    244a:	e7 5b       	subi	r30, 0xB7	; 183
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	80 81       	ld	r24, Z
    2450:	8a 95       	dec	r24
    2452:	f1 f7       	brne	.-4      	; 0x2450 <lcd_sendcmd+0x322>
    2454:	fe 01       	movw	r30, r28
    2456:	e7 5b       	subi	r30, 0xB7	; 183
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	80 83       	st	Z, r24
		_delay_us(10);
		DIO_write(LCD_E,LOW);
    245c:	8b e0       	ldi	r24, 0x0B	; 11
    245e:	60 e0       	ldi	r22, 0x00	; 0
    2460:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    2464:	fe 01       	movw	r30, r28
    2466:	eb 5b       	subi	r30, 0xBB	; 187
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	aa ef       	ldi	r26, 0xFA	; 250
    2470:	b4 e4       	ldi	r27, 0x44	; 68
    2472:	80 83       	st	Z, r24
    2474:	91 83       	std	Z+1, r25	; 0x01
    2476:	a2 83       	std	Z+2, r26	; 0x02
    2478:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    247a:	8e 01       	movw	r16, r28
    247c:	0f 5b       	subi	r16, 0xBF	; 191
    247e:	1f 4f       	sbci	r17, 0xFF	; 255
    2480:	fe 01       	movw	r30, r28
    2482:	eb 5b       	subi	r30, 0xBB	; 187
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	60 81       	ld	r22, Z
    2488:	71 81       	ldd	r23, Z+1	; 0x01
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	2b ea       	ldi	r18, 0xAB	; 171
    2490:	3a ea       	ldi	r19, 0xAA	; 170
    2492:	4a ea       	ldi	r20, 0xAA	; 170
    2494:	50 e4       	ldi	r21, 0x40	; 64
    2496:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	f8 01       	movw	r30, r16
    24a0:	80 83       	st	Z, r24
    24a2:	91 83       	std	Z+1, r25	; 0x01
    24a4:	a2 83       	std	Z+2, r26	; 0x02
    24a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24a8:	fe 01       	movw	r30, r28
    24aa:	ef 5b       	subi	r30, 0xBF	; 191
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	60 81       	ld	r22, Z
    24b0:	71 81       	ldd	r23, Z+1	; 0x01
    24b2:	82 81       	ldd	r24, Z+2	; 0x02
    24b4:	93 81       	ldd	r25, Z+3	; 0x03
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e8       	ldi	r20, 0x80	; 128
    24bc:	5f e3       	ldi	r21, 0x3F	; 63
    24be:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    24c2:	88 23       	and	r24, r24
    24c4:	34 f4       	brge	.+12     	; 0x24d2 <lcd_sendcmd+0x3a4>
		__ticks = 1;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	fe 01       	movw	r30, r28
    24ca:	e0 5c       	subi	r30, 0xC0	; 192
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 83       	st	Z, r24
    24d0:	9d c0       	rjmp	.+314    	; 0x260c <lcd_sendcmd+0x4de>
	else if (__tmp > 255)
    24d2:	fe 01       	movw	r30, r28
    24d4:	ef 5b       	subi	r30, 0xBF	; 191
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	60 81       	ld	r22, Z
    24da:	71 81       	ldd	r23, Z+1	; 0x01
    24dc:	82 81       	ldd	r24, Z+2	; 0x02
    24de:	93 81       	ldd	r25, Z+3	; 0x03
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	4f e7       	ldi	r20, 0x7F	; 127
    24e6:	53 e4       	ldi	r21, 0x43	; 67
    24e8:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    24ec:	18 16       	cp	r1, r24
    24ee:	0c f0       	brlt	.+2      	; 0x24f2 <lcd_sendcmd+0x3c4>
    24f0:	7e c0       	rjmp	.+252    	; 0x25ee <lcd_sendcmd+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    24f2:	fe 01       	movw	r30, r28
    24f4:	eb 5b       	subi	r30, 0xBB	; 187
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	4a e7       	ldi	r20, 0x7A	; 122
    2506:	54 e4       	ldi	r21, 0x44	; 68
    2508:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	8c af       	std	Y+60, r24	; 0x3c
    2512:	9d af       	std	Y+61, r25	; 0x3d
    2514:	ae af       	std	Y+62, r26	; 0x3e
    2516:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	6c ad       	ldd	r22, Y+60	; 0x3c
    251a:	7d ad       	ldd	r23, Y+61	; 0x3d
    251c:	8e ad       	ldd	r24, Y+62	; 0x3e
    251e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a e7       	ldi	r20, 0x7A	; 122
    2526:	55 e4       	ldi	r21, 0x45	; 69
    2528:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	88 af       	std	Y+56, r24	; 0x38
    2532:	99 af       	std	Y+57, r25	; 0x39
    2534:	aa af       	std	Y+58, r26	; 0x3a
    2536:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2538:	68 ad       	ldd	r22, Y+56	; 0x38
    253a:	79 ad       	ldd	r23, Y+57	; 0x39
    253c:	8a ad       	ldd	r24, Y+58	; 0x3a
    253e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	2c f4       	brge	.+10     	; 0x255a <lcd_sendcmd+0x42c>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9f ab       	std	Y+55, r25	; 0x37
    2556:	8e ab       	std	Y+54, r24	; 0x36
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <lcd_sendcmd+0x4aa>
	else if (__tmp > 65535)
    255a:	68 ad       	ldd	r22, Y+56	; 0x38
    255c:	79 ad       	ldd	r23, Y+57	; 0x39
    255e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2560:	9b ad       	ldd	r25, Y+59	; 0x3b
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	3f ef       	ldi	r19, 0xFF	; 255
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	57 e4       	ldi	r21, 0x47	; 71
    256a:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	4c f5       	brge	.+82     	; 0x25c4 <lcd_sendcmd+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	6c ad       	ldd	r22, Y+60	; 0x3c
    2574:	7d ad       	ldd	r23, Y+61	; 0x3d
    2576:	8e ad       	ldd	r24, Y+62	; 0x3e
    2578:	9f ad       	ldd	r25, Y+63	; 0x3f
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9f ab       	std	Y+55, r25	; 0x37
    2598:	8e ab       	std	Y+54, r24	; 0x36
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <lcd_sendcmd+0x48c>
    259c:	80 e9       	ldi	r24, 0x90	; 144
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	9d ab       	std	Y+53, r25	; 0x35
    25a2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25a4:	8c a9       	ldd	r24, Y+52	; 0x34
    25a6:	9d a9       	ldd	r25, Y+53	; 0x35
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <lcd_sendcmd+0x47a>
    25ac:	9d ab       	std	Y+53, r25	; 0x35
    25ae:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	8e a9       	ldd	r24, Y+54	; 0x36
    25b2:	9f a9       	ldd	r25, Y+55	; 0x37
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	9f ab       	std	Y+55, r25	; 0x37
    25b8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ba:	8e a9       	ldd	r24, Y+54	; 0x36
    25bc:	9f a9       	ldd	r25, Y+55	; 0x37
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f7       	brne	.-38     	; 0x259c <lcd_sendcmd+0x46e>
    25c2:	2d c0       	rjmp	.+90     	; 0x261e <lcd_sendcmd+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	68 ad       	ldd	r22, Y+56	; 0x38
    25c6:	79 ad       	ldd	r23, Y+57	; 0x39
    25c8:	8a ad       	ldd	r24, Y+58	; 0x3a
    25ca:	9b ad       	ldd	r25, Y+59	; 0x3b
    25cc:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9f ab       	std	Y+55, r25	; 0x37
    25d6:	8e ab       	std	Y+54, r24	; 0x36
    25d8:	8e a9       	ldd	r24, Y+54	; 0x36
    25da:	9f a9       	ldd	r25, Y+55	; 0x37
    25dc:	9b ab       	std	Y+51, r25	; 0x33
    25de:	8a ab       	std	Y+50, r24	; 0x32
    25e0:	8a a9       	ldd	r24, Y+50	; 0x32
    25e2:	9b a9       	ldd	r25, Y+51	; 0x33
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <lcd_sendcmd+0x4b6>
    25e8:	9b ab       	std	Y+51, r25	; 0x33
    25ea:	8a ab       	std	Y+50, r24	; 0x32
    25ec:	18 c0       	rjmp	.+48     	; 0x261e <lcd_sendcmd+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25ee:	fe 01       	movw	r30, r28
    25f0:	ef 5b       	subi	r30, 0xBF	; 191
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	fe 01       	movw	r30, r28
    2606:	e0 5c       	subi	r30, 0xC0	; 192
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	80 83       	st	Z, r24
    260c:	fe 01       	movw	r30, r28
    260e:	e0 5c       	subi	r30, 0xC0	; 192
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	80 81       	ld	r24, Z
    2614:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2616:	89 a9       	ldd	r24, Y+49	; 0x31
    2618:	8a 95       	dec	r24
    261a:	f1 f7       	brne	.-4      	; 0x2618 <lcd_sendcmd+0x4ea>
    261c:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(2000);

		if(GET_BIT(cmd,0)){DIO_write(LCD_D4,HIGH);}else {DIO_write(LCD_D4,LOW);}
    261e:	fe 01       	movw	r30, r28
    2620:	ef 59       	subi	r30, 0x9F	; 159
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	80 81       	ld	r24, Z
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	81 70       	andi	r24, 0x01	; 1
    262c:	90 70       	andi	r25, 0x00	; 0
    262e:	88 23       	and	r24, r24
    2630:	29 f0       	breq	.+10     	; 0x263c <lcd_sendcmd+0x50e>
    2632:	84 e0       	ldi	r24, 0x04	; 4
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    263a:	04 c0       	rjmp	.+8      	; 0x2644 <lcd_sendcmd+0x516>
    263c:	84 e0       	ldi	r24, 0x04	; 4
    263e:	60 e0       	ldi	r22, 0x00	; 0
    2640:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
		if(GET_BIT(cmd,1)){DIO_write(LCD_D5,HIGH);}else {DIO_write(LCD_D5,LOW);}
    2644:	fe 01       	movw	r30, r28
    2646:	ef 59       	subi	r30, 0x9F	; 159
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	86 95       	lsr	r24
    264e:	88 2f       	mov	r24, r24
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	81 70       	andi	r24, 0x01	; 1
    2654:	90 70       	andi	r25, 0x00	; 0
    2656:	88 23       	and	r24, r24
    2658:	29 f0       	breq	.+10     	; 0x2664 <lcd_sendcmd+0x536>
    265a:	85 e0       	ldi	r24, 0x05	; 5
    265c:	61 e0       	ldi	r22, 0x01	; 1
    265e:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    2662:	04 c0       	rjmp	.+8      	; 0x266c <lcd_sendcmd+0x53e>
    2664:	85 e0       	ldi	r24, 0x05	; 5
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
		if(GET_BIT(cmd,2)){DIO_write(LCD_D6,HIGH);}else {DIO_write(LCD_D6,LOW);}
    266c:	fe 01       	movw	r30, r28
    266e:	ef 59       	subi	r30, 0x9F	; 159
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	80 81       	ld	r24, Z
    2674:	86 95       	lsr	r24
    2676:	86 95       	lsr	r24
    2678:	88 2f       	mov	r24, r24
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	81 70       	andi	r24, 0x01	; 1
    267e:	90 70       	andi	r25, 0x00	; 0
    2680:	88 23       	and	r24, r24
    2682:	29 f0       	breq	.+10     	; 0x268e <lcd_sendcmd+0x560>
    2684:	86 e0       	ldi	r24, 0x06	; 6
    2686:	61 e0       	ldi	r22, 0x01	; 1
    2688:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    268c:	04 c0       	rjmp	.+8      	; 0x2696 <lcd_sendcmd+0x568>
    268e:	86 e0       	ldi	r24, 0x06	; 6
    2690:	60 e0       	ldi	r22, 0x00	; 0
    2692:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
		if(GET_BIT(cmd,3)){DIO_write(LCD_D7,HIGH);}else {DIO_write(LCD_D7,LOW);}
    2696:	fe 01       	movw	r30, r28
    2698:	ef 59       	subi	r30, 0x9F	; 159
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	80 81       	ld	r24, Z
    269e:	86 95       	lsr	r24
    26a0:	86 95       	lsr	r24
    26a2:	86 95       	lsr	r24
    26a4:	88 2f       	mov	r24, r24
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	81 70       	andi	r24, 0x01	; 1
    26aa:	90 70       	andi	r25, 0x00	; 0
    26ac:	88 23       	and	r24, r24
    26ae:	29 f0       	breq	.+10     	; 0x26ba <lcd_sendcmd+0x58c>
    26b0:	87 e0       	ldi	r24, 0x07	; 7
    26b2:	61 e0       	ldi	r22, 0x01	; 1
    26b4:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    26b8:	04 c0       	rjmp	.+8      	; 0x26c2 <lcd_sendcmd+0x594>
    26ba:	87 e0       	ldi	r24, 0x07	; 7
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>

		DIO_write(LCD_E,HIGH);
    26c2:	8b e0       	ldi	r24, 0x0B	; 11
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a0 e2       	ldi	r26, 0x20	; 32
    26d0:	b1 e4       	ldi	r27, 0x41	; 65
    26d2:	8d a7       	std	Y+45, r24	; 0x2d
    26d4:	9e a7       	std	Y+46, r25	; 0x2e
    26d6:	af a7       	std	Y+47, r26	; 0x2f
    26d8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26da:	6d a5       	ldd	r22, Y+45	; 0x2d
    26dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    26de:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e0:	98 a9       	ldd	r25, Y+48	; 0x30
    26e2:	2b ea       	ldi	r18, 0xAB	; 171
    26e4:	3a ea       	ldi	r19, 0xAA	; 170
    26e6:	4a ea       	ldi	r20, 0xAA	; 170
    26e8:	50 e4       	ldi	r21, 0x40	; 64
    26ea:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	89 a7       	std	Y+41, r24	; 0x29
    26f4:	9a a7       	std	Y+42, r25	; 0x2a
    26f6:	ab a7       	std	Y+43, r26	; 0x2b
    26f8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    26fa:	69 a5       	ldd	r22, Y+41	; 0x29
    26fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    26fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2700:	9c a5       	ldd	r25, Y+44	; 0x2c
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e8       	ldi	r20, 0x80	; 128
    2708:	5f e3       	ldi	r21, 0x3F	; 63
    270a:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    270e:	88 23       	and	r24, r24
    2710:	1c f4       	brge	.+6      	; 0x2718 <lcd_sendcmd+0x5ea>
		__ticks = 1;
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	88 a7       	std	Y+40, r24	; 0x28
    2716:	91 c0       	rjmp	.+290    	; 0x283a <lcd_sendcmd+0x70c>
	else if (__tmp > 255)
    2718:	69 a5       	ldd	r22, Y+41	; 0x29
    271a:	7a a5       	ldd	r23, Y+42	; 0x2a
    271c:	8b a5       	ldd	r24, Y+43	; 0x2b
    271e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	53 e4       	ldi	r21, 0x43	; 67
    2728:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	0c f0       	brlt	.+2      	; 0x2732 <lcd_sendcmd+0x604>
    2730:	7b c0       	rjmp	.+246    	; 0x2828 <lcd_sendcmd+0x6fa>
	{
		_delay_ms(__us / 1000.0);
    2732:	6d a5       	ldd	r22, Y+45	; 0x2d
    2734:	7e a5       	ldd	r23, Y+46	; 0x2e
    2736:	8f a5       	ldd	r24, Y+47	; 0x2f
    2738:	98 a9       	ldd	r25, Y+48	; 0x30
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	4a e7       	ldi	r20, 0x7A	; 122
    2740:	54 e4       	ldi	r21, 0x44	; 68
    2742:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	8c a3       	std	Y+36, r24	; 0x24
    274c:	9d a3       	std	Y+37, r25	; 0x25
    274e:	ae a3       	std	Y+38, r26	; 0x26
    2750:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2752:	6c a1       	ldd	r22, Y+36	; 0x24
    2754:	7d a1       	ldd	r23, Y+37	; 0x25
    2756:	8e a1       	ldd	r24, Y+38	; 0x26
    2758:	9f a1       	ldd	r25, Y+39	; 0x27
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	4a e7       	ldi	r20, 0x7A	; 122
    2760:	55 e4       	ldi	r21, 0x45	; 69
    2762:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	88 a3       	std	Y+32, r24	; 0x20
    276c:	99 a3       	std	Y+33, r25	; 0x21
    276e:	aa a3       	std	Y+34, r26	; 0x22
    2770:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2772:	68 a1       	ldd	r22, Y+32	; 0x20
    2774:	79 a1       	ldd	r23, Y+33	; 0x21
    2776:	8a a1       	ldd	r24, Y+34	; 0x22
    2778:	9b a1       	ldd	r25, Y+35	; 0x23
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e8       	ldi	r20, 0x80	; 128
    2780:	5f e3       	ldi	r21, 0x3F	; 63
    2782:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    2786:	88 23       	and	r24, r24
    2788:	2c f4       	brge	.+10     	; 0x2794 <lcd_sendcmd+0x666>
		__ticks = 1;
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9f 8f       	std	Y+31, r25	; 0x1f
    2790:	8e 8f       	std	Y+30, r24	; 0x1e
    2792:	3f c0       	rjmp	.+126    	; 0x2812 <lcd_sendcmd+0x6e4>
	else if (__tmp > 65535)
    2794:	68 a1       	ldd	r22, Y+32	; 0x20
    2796:	79 a1       	ldd	r23, Y+33	; 0x21
    2798:	8a a1       	ldd	r24, Y+34	; 0x22
    279a:	9b a1       	ldd	r25, Y+35	; 0x23
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	3f ef       	ldi	r19, 0xFF	; 255
    27a0:	4f e7       	ldi	r20, 0x7F	; 127
    27a2:	57 e4       	ldi	r21, 0x47	; 71
    27a4:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    27a8:	18 16       	cp	r1, r24
    27aa:	4c f5       	brge	.+82     	; 0x27fe <lcd_sendcmd+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ac:	6c a1       	ldd	r22, Y+36	; 0x24
    27ae:	7d a1       	ldd	r23, Y+37	; 0x25
    27b0:	8e a1       	ldd	r24, Y+38	; 0x26
    27b2:	9f a1       	ldd	r25, Y+39	; 0x27
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e2       	ldi	r20, 0x20	; 32
    27ba:	51 e4       	ldi	r21, 0x41	; 65
    27bc:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	bc 01       	movw	r22, r24
    27c6:	cd 01       	movw	r24, r26
    27c8:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9f 8f       	std	Y+31, r25	; 0x1f
    27d2:	8e 8f       	std	Y+30, r24	; 0x1e
    27d4:	0f c0       	rjmp	.+30     	; 0x27f4 <lcd_sendcmd+0x6c6>
    27d6:	80 e9       	ldi	r24, 0x90	; 144
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	9d 8f       	std	Y+29, r25	; 0x1d
    27dc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <lcd_sendcmd+0x6b4>
    27e6:	9d 8f       	std	Y+29, r25	; 0x1d
    27e8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	9f 8f       	std	Y+31, r25	; 0x1f
    27f2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	69 f7       	brne	.-38     	; 0x27d6 <lcd_sendcmd+0x6a8>
    27fc:	24 c0       	rjmp	.+72     	; 0x2846 <lcd_sendcmd+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fe:	68 a1       	ldd	r22, Y+32	; 0x20
    2800:	79 a1       	ldd	r23, Y+33	; 0x21
    2802:	8a a1       	ldd	r24, Y+34	; 0x22
    2804:	9b a1       	ldd	r25, Y+35	; 0x23
    2806:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9f 8f       	std	Y+31, r25	; 0x1f
    2810:	8e 8f       	std	Y+30, r24	; 0x1e
    2812:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2814:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2816:	9b 8f       	std	Y+27, r25	; 0x1b
    2818:	8a 8f       	std	Y+26, r24	; 0x1a
    281a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    281c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <lcd_sendcmd+0x6f0>
    2822:	9b 8f       	std	Y+27, r25	; 0x1b
    2824:	8a 8f       	std	Y+26, r24	; 0x1a
    2826:	0f c0       	rjmp	.+30     	; 0x2846 <lcd_sendcmd+0x718>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2828:	69 a5       	ldd	r22, Y+41	; 0x29
    282a:	7a a5       	ldd	r23, Y+42	; 0x2a
    282c:	8b a5       	ldd	r24, Y+43	; 0x2b
    282e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2830:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	88 a7       	std	Y+40, r24	; 0x28
    283a:	88 a5       	ldd	r24, Y+40	; 0x28
    283c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    283e:	89 8d       	ldd	r24, Y+25	; 0x19
    2840:	8a 95       	dec	r24
    2842:	f1 f7       	brne	.-4      	; 0x2840 <lcd_sendcmd+0x712>
    2844:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		DIO_write(LCD_E,LOW);
    2846:	8b e0       	ldi	r24, 0x0B	; 11
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	0e 94 75 04 	call	0x8ea	; 0x8ea <DIO_write>
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	aa ef       	ldi	r26, 0xFA	; 250
    2854:	b4 e4       	ldi	r27, 0x44	; 68
    2856:	8d 8b       	std	Y+21, r24	; 0x15
    2858:	9e 8b       	std	Y+22, r25	; 0x16
    285a:	af 8b       	std	Y+23, r26	; 0x17
    285c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    285e:	6d 89       	ldd	r22, Y+21	; 0x15
    2860:	7e 89       	ldd	r23, Y+22	; 0x16
    2862:	8f 89       	ldd	r24, Y+23	; 0x17
    2864:	98 8d       	ldd	r25, Y+24	; 0x18
    2866:	2b ea       	ldi	r18, 0xAB	; 171
    2868:	3a ea       	ldi	r19, 0xAA	; 170
    286a:	4a ea       	ldi	r20, 0xAA	; 170
    286c:	50 e4       	ldi	r21, 0x40	; 64
    286e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	89 8b       	std	Y+17, r24	; 0x11
    2878:	9a 8b       	std	Y+18, r25	; 0x12
    287a:	ab 8b       	std	Y+19, r26	; 0x13
    287c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    287e:	69 89       	ldd	r22, Y+17	; 0x11
    2880:	7a 89       	ldd	r23, Y+18	; 0x12
    2882:	8b 89       	ldd	r24, Y+19	; 0x13
    2884:	9c 89       	ldd	r25, Y+20	; 0x14
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e8       	ldi	r20, 0x80	; 128
    288c:	5f e3       	ldi	r21, 0x3F	; 63
    288e:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    2892:	88 23       	and	r24, r24
    2894:	1c f4       	brge	.+6      	; 0x289c <lcd_sendcmd+0x76e>
		__ticks = 1;
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	88 8b       	std	Y+16, r24	; 0x10
    289a:	91 c0       	rjmp	.+290    	; 0x29be <lcd_sendcmd+0x890>
	else if (__tmp > 255)
    289c:	69 89       	ldd	r22, Y+17	; 0x11
    289e:	7a 89       	ldd	r23, Y+18	; 0x12
    28a0:	8b 89       	ldd	r24, Y+19	; 0x13
    28a2:	9c 89       	ldd	r25, Y+20	; 0x14
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	4f e7       	ldi	r20, 0x7F	; 127
    28aa:	53 e4       	ldi	r21, 0x43	; 67
    28ac:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    28b0:	18 16       	cp	r1, r24
    28b2:	0c f0       	brlt	.+2      	; 0x28b6 <lcd_sendcmd+0x788>
    28b4:	7b c0       	rjmp	.+246    	; 0x29ac <lcd_sendcmd+0x87e>
	{
		_delay_ms(__us / 1000.0);
    28b6:	6d 89       	ldd	r22, Y+21	; 0x15
    28b8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ba:	8f 89       	ldd	r24, Y+23	; 0x17
    28bc:	98 8d       	ldd	r25, Y+24	; 0x18
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	4a e7       	ldi	r20, 0x7A	; 122
    28c4:	54 e4       	ldi	r21, 0x44	; 68
    28c6:	0e 94 89 18 	call	0x3112	; 0x3112 <__divsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	8c 87       	std	Y+12, r24	; 0x0c
    28d0:	9d 87       	std	Y+13, r25	; 0x0d
    28d2:	ae 87       	std	Y+14, r26	; 0x0e
    28d4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    28d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    28da:	8e 85       	ldd	r24, Y+14	; 0x0e
    28dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	4a e7       	ldi	r20, 0x7A	; 122
    28e4:	55 e4       	ldi	r21, 0x45	; 69
    28e6:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	88 87       	std	Y+8, r24	; 0x08
    28f0:	99 87       	std	Y+9, r25	; 0x09
    28f2:	aa 87       	std	Y+10, r26	; 0x0a
    28f4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28f6:	68 85       	ldd	r22, Y+8	; 0x08
    28f8:	79 85       	ldd	r23, Y+9	; 0x09
    28fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    28fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e8       	ldi	r20, 0x80	; 128
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    290a:	88 23       	and	r24, r24
    290c:	2c f4       	brge	.+10     	; 0x2918 <lcd_sendcmd+0x7ea>
		__ticks = 1;
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9f 83       	std	Y+7, r25	; 0x07
    2914:	8e 83       	std	Y+6, r24	; 0x06
    2916:	3f c0       	rjmp	.+126    	; 0x2996 <lcd_sendcmd+0x868>
	else if (__tmp > 65535)
    2918:	68 85       	ldd	r22, Y+8	; 0x08
    291a:	79 85       	ldd	r23, Y+9	; 0x09
    291c:	8a 85       	ldd	r24, Y+10	; 0x0a
    291e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	3f ef       	ldi	r19, 0xFF	; 255
    2924:	4f e7       	ldi	r20, 0x7F	; 127
    2926:	57 e4       	ldi	r21, 0x47	; 71
    2928:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    292c:	18 16       	cp	r1, r24
    292e:	4c f5       	brge	.+82     	; 0x2982 <lcd_sendcmd+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2930:	6c 85       	ldd	r22, Y+12	; 0x0c
    2932:	7d 85       	ldd	r23, Y+13	; 0x0d
    2934:	8e 85       	ldd	r24, Y+14	; 0x0e
    2936:	9f 85       	ldd	r25, Y+15	; 0x0f
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e2       	ldi	r20, 0x20	; 32
    293e:	51 e4       	ldi	r21, 0x41	; 65
    2940:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9f 83       	std	Y+7, r25	; 0x07
    2956:	8e 83       	std	Y+6, r24	; 0x06
    2958:	0f c0       	rjmp	.+30     	; 0x2978 <lcd_sendcmd+0x84a>
    295a:	80 e9       	ldi	r24, 0x90	; 144
    295c:	91 e0       	ldi	r25, 0x01	; 1
    295e:	9d 83       	std	Y+5, r25	; 0x05
    2960:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2962:	8c 81       	ldd	r24, Y+4	; 0x04
    2964:	9d 81       	ldd	r25, Y+5	; 0x05
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <lcd_sendcmd+0x838>
    296a:	9d 83       	std	Y+5, r25	; 0x05
    296c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296e:	8e 81       	ldd	r24, Y+6	; 0x06
    2970:	9f 81       	ldd	r25, Y+7	; 0x07
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	9f 83       	std	Y+7, r25	; 0x07
    2976:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2978:	8e 81       	ldd	r24, Y+6	; 0x06
    297a:	9f 81       	ldd	r25, Y+7	; 0x07
    297c:	00 97       	sbiw	r24, 0x00	; 0
    297e:	69 f7       	brne	.-38     	; 0x295a <lcd_sendcmd+0x82c>
    2980:	24 c0       	rjmp	.+72     	; 0x29ca <lcd_sendcmd+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2982:	68 85       	ldd	r22, Y+8	; 0x08
    2984:	79 85       	ldd	r23, Y+9	; 0x09
    2986:	8a 85       	ldd	r24, Y+10	; 0x0a
    2988:	9b 85       	ldd	r25, Y+11	; 0x0b
    298a:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9f 83       	std	Y+7, r25	; 0x07
    2994:	8e 83       	std	Y+6, r24	; 0x06
    2996:	8e 81       	ldd	r24, Y+6	; 0x06
    2998:	9f 81       	ldd	r25, Y+7	; 0x07
    299a:	9b 83       	std	Y+3, r25	; 0x03
    299c:	8a 83       	std	Y+2, r24	; 0x02
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	9b 81       	ldd	r25, Y+3	; 0x03
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <lcd_sendcmd+0x874>
    29a6:	9b 83       	std	Y+3, r25	; 0x03
    29a8:	8a 83       	std	Y+2, r24	; 0x02
    29aa:	0f c0       	rjmp	.+30     	; 0x29ca <lcd_sendcmd+0x89c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29ac:	69 89       	ldd	r22, Y+17	; 0x11
    29ae:	7a 89       	ldd	r23, Y+18	; 0x12
    29b0:	8b 89       	ldd	r24, Y+19	; 0x13
    29b2:	9c 89       	ldd	r25, Y+20	; 0x14
    29b4:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	88 8b       	std	Y+16, r24	; 0x10
    29be:	88 89       	ldd	r24, Y+16	; 0x10
    29c0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	8a 95       	dec	r24
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <lcd_sendcmd+0x896>
    29c8:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(2000);

}
    29ca:	cf 59       	subi	r28, 0x9F	; 159
    29cc:	df 4f       	sbci	r29, 0xFF	; 255
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	08 95       	ret

000029e2 <lcd_sendstring>:

void lcd_sendstring(unsigned char * string)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <lcd_sendstring+0x6>
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <lcd_sendstring+0x8>
    29ea:	cd b7       	in	r28, 0x3d	; 61
    29ec:	de b7       	in	r29, 0x3e	; 62
    29ee:	9c 83       	std	Y+4, r25	; 0x04
    29f0:	8b 83       	std	Y+3, r24	; 0x03
   int i=0;
    29f2:	1a 82       	std	Y+2, r1	; 0x02
    29f4:	19 82       	std	Y+1, r1	; 0x01
   for(i=0;string[i]!=0;i++)
    29f6:	1a 82       	std	Y+2, r1	; 0x02
    29f8:	19 82       	std	Y+1, r1	; 0x01
    29fa:	0f c0       	rjmp	.+30     	; 0x2a1a <lcd_sendstring+0x38>
   {
	lcd_sendchar(string[i]);
    29fc:	29 81       	ldd	r18, Y+1	; 0x01
    29fe:	3a 81       	ldd	r19, Y+2	; 0x02
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	fc 01       	movw	r30, r24
    2a06:	e2 0f       	add	r30, r18
    2a08:	f3 1f       	adc	r31, r19
    2a0a:	80 81       	ld	r24, Z
    2a0c:	0e 94 3d 0c 	call	0x187a	; 0x187a <lcd_sendchar>
}

void lcd_sendstring(unsigned char * string)
{
   int i=0;
   for(i=0;string[i]!=0;i++)
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	01 96       	adiw	r24, 0x01	; 1
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	29 81       	ldd	r18, Y+1	; 0x01
    2a1c:	3a 81       	ldd	r19, Y+2	; 0x02
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	fc 01       	movw	r30, r24
    2a24:	e2 0f       	add	r30, r18
    2a26:	f3 1f       	adc	r31, r19
    2a28:	80 81       	ld	r24, Z
    2a2a:	88 23       	and	r24, r24
    2a2c:	39 f7       	brne	.-50     	; 0x29fc <lcd_sendstring+0x1a>
   {
	lcd_sendchar(string[i]);
   }

}
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	08 95       	ret

00002a3c <main>:
//{
//	ctr++;
//}

int main()
 {
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	2f 97       	sbiw	r28, 0x0f	; 15
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
	//#define F_CPU 8000000UL

#define Slave_Write_Address		0x20
#define Slave_Read_Address		0x21

		char data = 'A';
    2a50:	81 e4       	ldi	r24, 0x41	; 65
    2a52:	8f 87       	std	Y+15, r24	; 0x0f
		lcd_init();						/* Initialize LCD */
    2a54:	0e 94 a6 0b 	call	0x174c	; 0x174c <lcd_init>
		I2C_Init();								/* Initialize I2C */
    2a58:	0e 94 34 03 	call	0x668	; 0x668 <I2C_Init>
		I2C_Start(Slave_Write_Address);			/* Start I2C with device write address */
    2a5c:	80 e2       	ldi	r24, 0x20	; 32
    2a5e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <I2C_Start>
		I2C_Write(data);
    2a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a64:	0e 94 22 04 	call	0x844	; 0x844 <I2C_Write>
		I2C_Repeated_Start(Slave_Write_Address);
    2a68:	80 e2       	ldi	r24, 0x20	; 32
    2a6a:	0e 94 99 03 	call	0x732	; 0x732 <I2C_Repeated_Start>
		I2C_Write('L');
    2a6e:	8c e4       	ldi	r24, 0x4C	; 76
    2a70:	0e 94 22 04 	call	0x844	; 0x844 <I2C_Write>
		I2C_Stop();								/* Stop I2C */
    2a74:	0e 94 da 03 	call	0x7b4	; 0x7b4 <I2C_Stop>
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	aa e7       	ldi	r26, 0x7A	; 122
    2a7e:	b4 e4       	ldi	r27, 0x44	; 68
    2a80:	8b 87       	std	Y+11, r24	; 0x0b
    2a82:	9c 87       	std	Y+12, r25	; 0x0c
    2a84:	ad 87       	std	Y+13, r26	; 0x0d
    2a86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	4a e7       	ldi	r20, 0x7A	; 122
    2a96:	55 e4       	ldi	r21, 0x45	; 69
    2a98:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	8f 83       	std	Y+7, r24	; 0x07
    2aa2:	98 87       	std	Y+8, r25	; 0x08
    2aa4:	a9 87       	std	Y+9, r26	; 0x09
    2aa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aaa:	78 85       	ldd	r23, Y+8	; 0x08
    2aac:	89 85       	ldd	r24, Y+9	; 0x09
    2aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e8       	ldi	r20, 0x80	; 128
    2ab6:	5f e3       	ldi	r21, 0x3F	; 63
    2ab8:	0e 94 95 19 	call	0x332a	; 0x332a <__ltsf2>
    2abc:	88 23       	and	r24, r24
    2abe:	2c f4       	brge	.+10     	; 0x2aca <main+0x8e>
		__ticks = 1;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	9e 83       	std	Y+6, r25	; 0x06
    2ac6:	8d 83       	std	Y+5, r24	; 0x05
    2ac8:	3f c0       	rjmp	.+126    	; 0x2b48 <main+0x10c>
	else if (__tmp > 65535)
    2aca:	6f 81       	ldd	r22, Y+7	; 0x07
    2acc:	78 85       	ldd	r23, Y+8	; 0x08
    2ace:	89 85       	ldd	r24, Y+9	; 0x09
    2ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	3f ef       	ldi	r19, 0xFF	; 255
    2ad6:	4f e7       	ldi	r20, 0x7F	; 127
    2ad8:	57 e4       	ldi	r21, 0x47	; 71
    2ada:	0e 94 35 19 	call	0x326a	; 0x326a <__gtsf2>
    2ade:	18 16       	cp	r1, r24
    2ae0:	4c f5       	brge	.+82     	; 0x2b34 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e2       	ldi	r20, 0x20	; 32
    2af0:	51 e4       	ldi	r21, 0x41	; 65
    2af2:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
    2b0a:	0f c0       	rjmp	.+30     	; 0x2b2a <main+0xee>
    2b0c:	80 e9       	ldi	r24, 0x90	; 144
    2b0e:	91 e0       	ldi	r25, 0x01	; 1
    2b10:	9c 83       	std	Y+4, r25	; 0x04
    2b12:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b14:	8b 81       	ldd	r24, Y+3	; 0x03
    2b16:	9c 81       	ldd	r25, Y+4	; 0x04
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <main+0xdc>
    2b1c:	9c 83       	std	Y+4, r25	; 0x04
    2b1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b20:	8d 81       	ldd	r24, Y+5	; 0x05
    2b22:	9e 81       	ldd	r25, Y+6	; 0x06
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	9e 83       	std	Y+6, r25	; 0x06
    2b28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	69 f7       	brne	.-38     	; 0x2b0c <main+0xd0>
    2b32:	14 c0       	rjmp	.+40     	; 0x2b5c <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b34:	6f 81       	ldd	r22, Y+7	; 0x07
    2b36:	78 85       	ldd	r23, Y+8	; 0x08
    2b38:	89 85       	ldd	r24, Y+9	; 0x09
    2b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	9e 83       	std	Y+6, r25	; 0x06
    2b46:	8d 83       	std	Y+5, r24	; 0x05
    2b48:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4c:	9a 83       	std	Y+2, r25	; 0x02
    2b4e:	89 83       	std	Y+1, r24	; 0x01
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	9a 81       	ldd	r25, Y+2	; 0x02
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <main+0x118>
    2b58:	9a 83       	std	Y+2, r25	; 0x02
    2b5a:	89 83       	std	Y+1, r24	; 0x01
//        _delay_us(100);
//     DIO_write(LED_2,HIGH);
//	}


	return 0;
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
}
    2b60:	2f 96       	adiw	r28, 0x0f	; 15
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	f8 94       	cli
    2b66:	de bf       	out	0x3e, r29	; 62
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	cd bf       	out	0x3d, r28	; 61
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	08 95       	ret

00002b72 <__fixunssfsi>:
    2b72:	ef 92       	push	r14
    2b74:	ff 92       	push	r15
    2b76:	0f 93       	push	r16
    2b78:	1f 93       	push	r17
    2b7a:	7b 01       	movw	r14, r22
    2b7c:	8c 01       	movw	r16, r24
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e0       	ldi	r20, 0x00	; 0
    2b84:	5f e4       	ldi	r21, 0x4F	; 79
    2b86:	0e 94 65 19 	call	0x32ca	; 0x32ca <__gesf2>
    2b8a:	88 23       	and	r24, r24
    2b8c:	8c f0       	brlt	.+34     	; 0x2bb0 <__fixunssfsi+0x3e>
    2b8e:	c8 01       	movw	r24, r16
    2b90:	b7 01       	movw	r22, r14
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	5f e4       	ldi	r21, 0x4F	; 79
    2b9a:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__subsf3>
    2b9e:	0e 94 c5 19 	call	0x338a	; 0x338a <__fixsfsi>
    2ba2:	9b 01       	movw	r18, r22
    2ba4:	ac 01       	movw	r20, r24
    2ba6:	20 50       	subi	r18, 0x00	; 0
    2ba8:	30 40       	sbci	r19, 0x00	; 0
    2baa:	40 40       	sbci	r20, 0x00	; 0
    2bac:	50 48       	sbci	r21, 0x80	; 128
    2bae:	06 c0       	rjmp	.+12     	; 0x2bbc <__fixunssfsi+0x4a>
    2bb0:	c8 01       	movw	r24, r16
    2bb2:	b7 01       	movw	r22, r14
    2bb4:	0e 94 c5 19 	call	0x338a	; 0x338a <__fixsfsi>
    2bb8:	9b 01       	movw	r18, r22
    2bba:	ac 01       	movw	r20, r24
    2bbc:	b9 01       	movw	r22, r18
    2bbe:	ca 01       	movw	r24, r20
    2bc0:	1f 91       	pop	r17
    2bc2:	0f 91       	pop	r16
    2bc4:	ff 90       	pop	r15
    2bc6:	ef 90       	pop	r14
    2bc8:	08 95       	ret

00002bca <_fpadd_parts>:
    2bca:	a0 e0       	ldi	r26, 0x00	; 0
    2bcc:	b0 e0       	ldi	r27, 0x00	; 0
    2bce:	eb ee       	ldi	r30, 0xEB	; 235
    2bd0:	f5 e1       	ldi	r31, 0x15	; 21
    2bd2:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <__prologue_saves__>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	2b 01       	movw	r4, r22
    2bda:	fa 01       	movw	r30, r20
    2bdc:	9c 91       	ld	r25, X
    2bde:	92 30       	cpi	r25, 0x02	; 2
    2be0:	08 f4       	brcc	.+2      	; 0x2be4 <_fpadd_parts+0x1a>
    2be2:	39 c1       	rjmp	.+626    	; 0x2e56 <_fpadd_parts+0x28c>
    2be4:	eb 01       	movw	r28, r22
    2be6:	88 81       	ld	r24, Y
    2be8:	82 30       	cpi	r24, 0x02	; 2
    2bea:	08 f4       	brcc	.+2      	; 0x2bee <_fpadd_parts+0x24>
    2bec:	33 c1       	rjmp	.+614    	; 0x2e54 <_fpadd_parts+0x28a>
    2bee:	94 30       	cpi	r25, 0x04	; 4
    2bf0:	69 f4       	brne	.+26     	; 0x2c0c <_fpadd_parts+0x42>
    2bf2:	84 30       	cpi	r24, 0x04	; 4
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <_fpadd_parts+0x2e>
    2bf6:	2f c1       	rjmp	.+606    	; 0x2e56 <_fpadd_parts+0x28c>
    2bf8:	11 96       	adiw	r26, 0x01	; 1
    2bfa:	9c 91       	ld	r25, X
    2bfc:	11 97       	sbiw	r26, 0x01	; 1
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	98 17       	cp	r25, r24
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <_fpadd_parts+0x3c>
    2c04:	28 c1       	rjmp	.+592    	; 0x2e56 <_fpadd_parts+0x28c>
    2c06:	af e9       	ldi	r26, 0x9F	; 159
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	25 c1       	rjmp	.+586    	; 0x2e56 <_fpadd_parts+0x28c>
    2c0c:	84 30       	cpi	r24, 0x04	; 4
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <_fpadd_parts+0x48>
    2c10:	21 c1       	rjmp	.+578    	; 0x2e54 <_fpadd_parts+0x28a>
    2c12:	82 30       	cpi	r24, 0x02	; 2
    2c14:	a9 f4       	brne	.+42     	; 0x2c40 <_fpadd_parts+0x76>
    2c16:	92 30       	cpi	r25, 0x02	; 2
    2c18:	09 f0       	breq	.+2      	; 0x2c1c <_fpadd_parts+0x52>
    2c1a:	1d c1       	rjmp	.+570    	; 0x2e56 <_fpadd_parts+0x28c>
    2c1c:	9a 01       	movw	r18, r20
    2c1e:	ad 01       	movw	r20, r26
    2c20:	88 e0       	ldi	r24, 0x08	; 8
    2c22:	ea 01       	movw	r28, r20
    2c24:	09 90       	ld	r0, Y+
    2c26:	ae 01       	movw	r20, r28
    2c28:	e9 01       	movw	r28, r18
    2c2a:	09 92       	st	Y+, r0
    2c2c:	9e 01       	movw	r18, r28
    2c2e:	81 50       	subi	r24, 0x01	; 1
    2c30:	c1 f7       	brne	.-16     	; 0x2c22 <_fpadd_parts+0x58>
    2c32:	e2 01       	movw	r28, r4
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	11 96       	adiw	r26, 0x01	; 1
    2c38:	9c 91       	ld	r25, X
    2c3a:	89 23       	and	r24, r25
    2c3c:	81 83       	std	Z+1, r24	; 0x01
    2c3e:	08 c1       	rjmp	.+528    	; 0x2e50 <_fpadd_parts+0x286>
    2c40:	92 30       	cpi	r25, 0x02	; 2
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <_fpadd_parts+0x7c>
    2c44:	07 c1       	rjmp	.+526    	; 0x2e54 <_fpadd_parts+0x28a>
    2c46:	12 96       	adiw	r26, 0x02	; 2
    2c48:	2d 90       	ld	r2, X+
    2c4a:	3c 90       	ld	r3, X
    2c4c:	13 97       	sbiw	r26, 0x03	; 3
    2c4e:	eb 01       	movw	r28, r22
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	9b 81       	ldd	r25, Y+3	; 0x03
    2c54:	14 96       	adiw	r26, 0x04	; 4
    2c56:	ad 90       	ld	r10, X+
    2c58:	bd 90       	ld	r11, X+
    2c5a:	cd 90       	ld	r12, X+
    2c5c:	dc 90       	ld	r13, X
    2c5e:	17 97       	sbiw	r26, 0x07	; 7
    2c60:	ec 80       	ldd	r14, Y+4	; 0x04
    2c62:	fd 80       	ldd	r15, Y+5	; 0x05
    2c64:	0e 81       	ldd	r16, Y+6	; 0x06
    2c66:	1f 81       	ldd	r17, Y+7	; 0x07
    2c68:	91 01       	movw	r18, r2
    2c6a:	28 1b       	sub	r18, r24
    2c6c:	39 0b       	sbc	r19, r25
    2c6e:	b9 01       	movw	r22, r18
    2c70:	37 ff       	sbrs	r19, 7
    2c72:	04 c0       	rjmp	.+8      	; 0x2c7c <_fpadd_parts+0xb2>
    2c74:	66 27       	eor	r22, r22
    2c76:	77 27       	eor	r23, r23
    2c78:	62 1b       	sub	r22, r18
    2c7a:	73 0b       	sbc	r23, r19
    2c7c:	60 32       	cpi	r22, 0x20	; 32
    2c7e:	71 05       	cpc	r23, r1
    2c80:	0c f0       	brlt	.+2      	; 0x2c84 <_fpadd_parts+0xba>
    2c82:	61 c0       	rjmp	.+194    	; 0x2d46 <_fpadd_parts+0x17c>
    2c84:	12 16       	cp	r1, r18
    2c86:	13 06       	cpc	r1, r19
    2c88:	6c f5       	brge	.+90     	; 0x2ce4 <_fpadd_parts+0x11a>
    2c8a:	37 01       	movw	r6, r14
    2c8c:	48 01       	movw	r8, r16
    2c8e:	06 2e       	mov	r0, r22
    2c90:	04 c0       	rjmp	.+8      	; 0x2c9a <_fpadd_parts+0xd0>
    2c92:	96 94       	lsr	r9
    2c94:	87 94       	ror	r8
    2c96:	77 94       	ror	r7
    2c98:	67 94       	ror	r6
    2c9a:	0a 94       	dec	r0
    2c9c:	d2 f7       	brpl	.-12     	; 0x2c92 <_fpadd_parts+0xc8>
    2c9e:	21 e0       	ldi	r18, 0x01	; 1
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e0       	ldi	r20, 0x00	; 0
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	04 c0       	rjmp	.+8      	; 0x2cb0 <_fpadd_parts+0xe6>
    2ca8:	22 0f       	add	r18, r18
    2caa:	33 1f       	adc	r19, r19
    2cac:	44 1f       	adc	r20, r20
    2cae:	55 1f       	adc	r21, r21
    2cb0:	6a 95       	dec	r22
    2cb2:	d2 f7       	brpl	.-12     	; 0x2ca8 <_fpadd_parts+0xde>
    2cb4:	21 50       	subi	r18, 0x01	; 1
    2cb6:	30 40       	sbci	r19, 0x00	; 0
    2cb8:	40 40       	sbci	r20, 0x00	; 0
    2cba:	50 40       	sbci	r21, 0x00	; 0
    2cbc:	2e 21       	and	r18, r14
    2cbe:	3f 21       	and	r19, r15
    2cc0:	40 23       	and	r20, r16
    2cc2:	51 23       	and	r21, r17
    2cc4:	21 15       	cp	r18, r1
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	41 05       	cpc	r20, r1
    2cca:	51 05       	cpc	r21, r1
    2ccc:	21 f0       	breq	.+8      	; 0x2cd6 <_fpadd_parts+0x10c>
    2cce:	21 e0       	ldi	r18, 0x01	; 1
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	50 e0       	ldi	r21, 0x00	; 0
    2cd6:	79 01       	movw	r14, r18
    2cd8:	8a 01       	movw	r16, r20
    2cda:	e6 28       	or	r14, r6
    2cdc:	f7 28       	or	r15, r7
    2cde:	08 29       	or	r16, r8
    2ce0:	19 29       	or	r17, r9
    2ce2:	3c c0       	rjmp	.+120    	; 0x2d5c <_fpadd_parts+0x192>
    2ce4:	23 2b       	or	r18, r19
    2ce6:	d1 f1       	breq	.+116    	; 0x2d5c <_fpadd_parts+0x192>
    2ce8:	26 0e       	add	r2, r22
    2cea:	37 1e       	adc	r3, r23
    2cec:	35 01       	movw	r6, r10
    2cee:	46 01       	movw	r8, r12
    2cf0:	06 2e       	mov	r0, r22
    2cf2:	04 c0       	rjmp	.+8      	; 0x2cfc <_fpadd_parts+0x132>
    2cf4:	96 94       	lsr	r9
    2cf6:	87 94       	ror	r8
    2cf8:	77 94       	ror	r7
    2cfa:	67 94       	ror	r6
    2cfc:	0a 94       	dec	r0
    2cfe:	d2 f7       	brpl	.-12     	; 0x2cf4 <_fpadd_parts+0x12a>
    2d00:	21 e0       	ldi	r18, 0x01	; 1
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e0       	ldi	r20, 0x00	; 0
    2d06:	50 e0       	ldi	r21, 0x00	; 0
    2d08:	04 c0       	rjmp	.+8      	; 0x2d12 <_fpadd_parts+0x148>
    2d0a:	22 0f       	add	r18, r18
    2d0c:	33 1f       	adc	r19, r19
    2d0e:	44 1f       	adc	r20, r20
    2d10:	55 1f       	adc	r21, r21
    2d12:	6a 95       	dec	r22
    2d14:	d2 f7       	brpl	.-12     	; 0x2d0a <_fpadd_parts+0x140>
    2d16:	21 50       	subi	r18, 0x01	; 1
    2d18:	30 40       	sbci	r19, 0x00	; 0
    2d1a:	40 40       	sbci	r20, 0x00	; 0
    2d1c:	50 40       	sbci	r21, 0x00	; 0
    2d1e:	2a 21       	and	r18, r10
    2d20:	3b 21       	and	r19, r11
    2d22:	4c 21       	and	r20, r12
    2d24:	5d 21       	and	r21, r13
    2d26:	21 15       	cp	r18, r1
    2d28:	31 05       	cpc	r19, r1
    2d2a:	41 05       	cpc	r20, r1
    2d2c:	51 05       	cpc	r21, r1
    2d2e:	21 f0       	breq	.+8      	; 0x2d38 <_fpadd_parts+0x16e>
    2d30:	21 e0       	ldi	r18, 0x01	; 1
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	50 e0       	ldi	r21, 0x00	; 0
    2d38:	59 01       	movw	r10, r18
    2d3a:	6a 01       	movw	r12, r20
    2d3c:	a6 28       	or	r10, r6
    2d3e:	b7 28       	or	r11, r7
    2d40:	c8 28       	or	r12, r8
    2d42:	d9 28       	or	r13, r9
    2d44:	0b c0       	rjmp	.+22     	; 0x2d5c <_fpadd_parts+0x192>
    2d46:	82 15       	cp	r24, r2
    2d48:	93 05       	cpc	r25, r3
    2d4a:	2c f0       	brlt	.+10     	; 0x2d56 <_fpadd_parts+0x18c>
    2d4c:	1c 01       	movw	r2, r24
    2d4e:	aa 24       	eor	r10, r10
    2d50:	bb 24       	eor	r11, r11
    2d52:	65 01       	movw	r12, r10
    2d54:	03 c0       	rjmp	.+6      	; 0x2d5c <_fpadd_parts+0x192>
    2d56:	ee 24       	eor	r14, r14
    2d58:	ff 24       	eor	r15, r15
    2d5a:	87 01       	movw	r16, r14
    2d5c:	11 96       	adiw	r26, 0x01	; 1
    2d5e:	9c 91       	ld	r25, X
    2d60:	d2 01       	movw	r26, r4
    2d62:	11 96       	adiw	r26, 0x01	; 1
    2d64:	8c 91       	ld	r24, X
    2d66:	98 17       	cp	r25, r24
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <_fpadd_parts+0x1a2>
    2d6a:	45 c0       	rjmp	.+138    	; 0x2df6 <_fpadd_parts+0x22c>
    2d6c:	99 23       	and	r25, r25
    2d6e:	39 f0       	breq	.+14     	; 0x2d7e <_fpadd_parts+0x1b4>
    2d70:	a8 01       	movw	r20, r16
    2d72:	97 01       	movw	r18, r14
    2d74:	2a 19       	sub	r18, r10
    2d76:	3b 09       	sbc	r19, r11
    2d78:	4c 09       	sbc	r20, r12
    2d7a:	5d 09       	sbc	r21, r13
    2d7c:	06 c0       	rjmp	.+12     	; 0x2d8a <_fpadd_parts+0x1c0>
    2d7e:	a6 01       	movw	r20, r12
    2d80:	95 01       	movw	r18, r10
    2d82:	2e 19       	sub	r18, r14
    2d84:	3f 09       	sbc	r19, r15
    2d86:	40 0b       	sbc	r20, r16
    2d88:	51 0b       	sbc	r21, r17
    2d8a:	57 fd       	sbrc	r21, 7
    2d8c:	08 c0       	rjmp	.+16     	; 0x2d9e <_fpadd_parts+0x1d4>
    2d8e:	11 82       	std	Z+1, r1	; 0x01
    2d90:	33 82       	std	Z+3, r3	; 0x03
    2d92:	22 82       	std	Z+2, r2	; 0x02
    2d94:	24 83       	std	Z+4, r18	; 0x04
    2d96:	35 83       	std	Z+5, r19	; 0x05
    2d98:	46 83       	std	Z+6, r20	; 0x06
    2d9a:	57 83       	std	Z+7, r21	; 0x07
    2d9c:	1d c0       	rjmp	.+58     	; 0x2dd8 <_fpadd_parts+0x20e>
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	81 83       	std	Z+1, r24	; 0x01
    2da2:	33 82       	std	Z+3, r3	; 0x03
    2da4:	22 82       	std	Z+2, r2	; 0x02
    2da6:	88 27       	eor	r24, r24
    2da8:	99 27       	eor	r25, r25
    2daa:	dc 01       	movw	r26, r24
    2dac:	82 1b       	sub	r24, r18
    2dae:	93 0b       	sbc	r25, r19
    2db0:	a4 0b       	sbc	r26, r20
    2db2:	b5 0b       	sbc	r27, r21
    2db4:	84 83       	std	Z+4, r24	; 0x04
    2db6:	95 83       	std	Z+5, r25	; 0x05
    2db8:	a6 83       	std	Z+6, r26	; 0x06
    2dba:	b7 83       	std	Z+7, r27	; 0x07
    2dbc:	0d c0       	rjmp	.+26     	; 0x2dd8 <_fpadd_parts+0x20e>
    2dbe:	22 0f       	add	r18, r18
    2dc0:	33 1f       	adc	r19, r19
    2dc2:	44 1f       	adc	r20, r20
    2dc4:	55 1f       	adc	r21, r21
    2dc6:	24 83       	std	Z+4, r18	; 0x04
    2dc8:	35 83       	std	Z+5, r19	; 0x05
    2dca:	46 83       	std	Z+6, r20	; 0x06
    2dcc:	57 83       	std	Z+7, r21	; 0x07
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	93 83       	std	Z+3, r25	; 0x03
    2dd6:	82 83       	std	Z+2, r24	; 0x02
    2dd8:	24 81       	ldd	r18, Z+4	; 0x04
    2dda:	35 81       	ldd	r19, Z+5	; 0x05
    2ddc:	46 81       	ldd	r20, Z+6	; 0x06
    2dde:	57 81       	ldd	r21, Z+7	; 0x07
    2de0:	da 01       	movw	r26, r20
    2de2:	c9 01       	movw	r24, r18
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	a1 09       	sbc	r26, r1
    2de8:	b1 09       	sbc	r27, r1
    2dea:	8f 5f       	subi	r24, 0xFF	; 255
    2dec:	9f 4f       	sbci	r25, 0xFF	; 255
    2dee:	af 4f       	sbci	r26, 0xFF	; 255
    2df0:	bf 43       	sbci	r27, 0x3F	; 63
    2df2:	28 f3       	brcs	.-54     	; 0x2dbe <_fpadd_parts+0x1f4>
    2df4:	0b c0       	rjmp	.+22     	; 0x2e0c <_fpadd_parts+0x242>
    2df6:	91 83       	std	Z+1, r25	; 0x01
    2df8:	33 82       	std	Z+3, r3	; 0x03
    2dfa:	22 82       	std	Z+2, r2	; 0x02
    2dfc:	ea 0c       	add	r14, r10
    2dfe:	fb 1c       	adc	r15, r11
    2e00:	0c 1d       	adc	r16, r12
    2e02:	1d 1d       	adc	r17, r13
    2e04:	e4 82       	std	Z+4, r14	; 0x04
    2e06:	f5 82       	std	Z+5, r15	; 0x05
    2e08:	06 83       	std	Z+6, r16	; 0x06
    2e0a:	17 83       	std	Z+7, r17	; 0x07
    2e0c:	83 e0       	ldi	r24, 0x03	; 3
    2e0e:	80 83       	st	Z, r24
    2e10:	24 81       	ldd	r18, Z+4	; 0x04
    2e12:	35 81       	ldd	r19, Z+5	; 0x05
    2e14:	46 81       	ldd	r20, Z+6	; 0x06
    2e16:	57 81       	ldd	r21, Z+7	; 0x07
    2e18:	57 ff       	sbrs	r21, 7
    2e1a:	1a c0       	rjmp	.+52     	; 0x2e50 <_fpadd_parts+0x286>
    2e1c:	c9 01       	movw	r24, r18
    2e1e:	aa 27       	eor	r26, r26
    2e20:	97 fd       	sbrc	r25, 7
    2e22:	a0 95       	com	r26
    2e24:	ba 2f       	mov	r27, r26
    2e26:	81 70       	andi	r24, 0x01	; 1
    2e28:	90 70       	andi	r25, 0x00	; 0
    2e2a:	a0 70       	andi	r26, 0x00	; 0
    2e2c:	b0 70       	andi	r27, 0x00	; 0
    2e2e:	56 95       	lsr	r21
    2e30:	47 95       	ror	r20
    2e32:	37 95       	ror	r19
    2e34:	27 95       	ror	r18
    2e36:	82 2b       	or	r24, r18
    2e38:	93 2b       	or	r25, r19
    2e3a:	a4 2b       	or	r26, r20
    2e3c:	b5 2b       	or	r27, r21
    2e3e:	84 83       	std	Z+4, r24	; 0x04
    2e40:	95 83       	std	Z+5, r25	; 0x05
    2e42:	a6 83       	std	Z+6, r26	; 0x06
    2e44:	b7 83       	std	Z+7, r27	; 0x07
    2e46:	82 81       	ldd	r24, Z+2	; 0x02
    2e48:	93 81       	ldd	r25, Z+3	; 0x03
    2e4a:	01 96       	adiw	r24, 0x01	; 1
    2e4c:	93 83       	std	Z+3, r25	; 0x03
    2e4e:	82 83       	std	Z+2, r24	; 0x02
    2e50:	df 01       	movw	r26, r30
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <_fpadd_parts+0x28c>
    2e54:	d2 01       	movw	r26, r4
    2e56:	cd 01       	movw	r24, r26
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	e2 e1       	ldi	r30, 0x12	; 18
    2e5e:	0c 94 db 1b 	jmp	0x37b6	; 0x37b6 <__epilogue_restores__>

00002e62 <__subsf3>:
    2e62:	a0 e2       	ldi	r26, 0x20	; 32
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	e7 e3       	ldi	r30, 0x37	; 55
    2e68:	f7 e1       	ldi	r31, 0x17	; 23
    2e6a:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__prologue_saves__+0x18>
    2e6e:	69 83       	std	Y+1, r22	; 0x01
    2e70:	7a 83       	std	Y+2, r23	; 0x02
    2e72:	8b 83       	std	Y+3, r24	; 0x03
    2e74:	9c 83       	std	Y+4, r25	; 0x04
    2e76:	2d 83       	std	Y+5, r18	; 0x05
    2e78:	3e 83       	std	Y+6, r19	; 0x06
    2e7a:	4f 83       	std	Y+7, r20	; 0x07
    2e7c:	58 87       	std	Y+8, r21	; 0x08
    2e7e:	e9 e0       	ldi	r30, 0x09	; 9
    2e80:	ee 2e       	mov	r14, r30
    2e82:	f1 2c       	mov	r15, r1
    2e84:	ec 0e       	add	r14, r28
    2e86:	fd 1e       	adc	r15, r29
    2e88:	ce 01       	movw	r24, r28
    2e8a:	01 96       	adiw	r24, 0x01	; 1
    2e8c:	b7 01       	movw	r22, r14
    2e8e:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    2e92:	8e 01       	movw	r16, r28
    2e94:	0f 5e       	subi	r16, 0xEF	; 239
    2e96:	1f 4f       	sbci	r17, 0xFF	; 255
    2e98:	ce 01       	movw	r24, r28
    2e9a:	05 96       	adiw	r24, 0x05	; 5
    2e9c:	b8 01       	movw	r22, r16
    2e9e:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    2ea2:	8a 89       	ldd	r24, Y+18	; 0x12
    2ea4:	91 e0       	ldi	r25, 0x01	; 1
    2ea6:	89 27       	eor	r24, r25
    2ea8:	8a 8b       	std	Y+18, r24	; 0x12
    2eaa:	c7 01       	movw	r24, r14
    2eac:	b8 01       	movw	r22, r16
    2eae:	ae 01       	movw	r20, r28
    2eb0:	47 5e       	subi	r20, 0xE7	; 231
    2eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_fpadd_parts>
    2eb8:	0e 94 19 1a 	call	0x3432	; 0x3432 <__pack_f>
    2ebc:	a0 96       	adiw	r28, 0x20	; 32
    2ebe:	e6 e0       	ldi	r30, 0x06	; 6
    2ec0:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__epilogue_restores__+0x18>

00002ec4 <__addsf3>:
    2ec4:	a0 e2       	ldi	r26, 0x20	; 32
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e8 e6       	ldi	r30, 0x68	; 104
    2eca:	f7 e1       	ldi	r31, 0x17	; 23
    2ecc:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__prologue_saves__+0x18>
    2ed0:	69 83       	std	Y+1, r22	; 0x01
    2ed2:	7a 83       	std	Y+2, r23	; 0x02
    2ed4:	8b 83       	std	Y+3, r24	; 0x03
    2ed6:	9c 83       	std	Y+4, r25	; 0x04
    2ed8:	2d 83       	std	Y+5, r18	; 0x05
    2eda:	3e 83       	std	Y+6, r19	; 0x06
    2edc:	4f 83       	std	Y+7, r20	; 0x07
    2ede:	58 87       	std	Y+8, r21	; 0x08
    2ee0:	f9 e0       	ldi	r31, 0x09	; 9
    2ee2:	ef 2e       	mov	r14, r31
    2ee4:	f1 2c       	mov	r15, r1
    2ee6:	ec 0e       	add	r14, r28
    2ee8:	fd 1e       	adc	r15, r29
    2eea:	ce 01       	movw	r24, r28
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	b7 01       	movw	r22, r14
    2ef0:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    2ef4:	8e 01       	movw	r16, r28
    2ef6:	0f 5e       	subi	r16, 0xEF	; 239
    2ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    2efa:	ce 01       	movw	r24, r28
    2efc:	05 96       	adiw	r24, 0x05	; 5
    2efe:	b8 01       	movw	r22, r16
    2f00:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    2f04:	c7 01       	movw	r24, r14
    2f06:	b8 01       	movw	r22, r16
    2f08:	ae 01       	movw	r20, r28
    2f0a:	47 5e       	subi	r20, 0xE7	; 231
    2f0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f0e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_fpadd_parts>
    2f12:	0e 94 19 1a 	call	0x3432	; 0x3432 <__pack_f>
    2f16:	a0 96       	adiw	r28, 0x20	; 32
    2f18:	e6 e0       	ldi	r30, 0x06	; 6
    2f1a:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__epilogue_restores__+0x18>

00002f1e <__mulsf3>:
    2f1e:	a0 e2       	ldi	r26, 0x20	; 32
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e5 e9       	ldi	r30, 0x95	; 149
    2f24:	f7 e1       	ldi	r31, 0x17	; 23
    2f26:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <__prologue_saves__>
    2f2a:	69 83       	std	Y+1, r22	; 0x01
    2f2c:	7a 83       	std	Y+2, r23	; 0x02
    2f2e:	8b 83       	std	Y+3, r24	; 0x03
    2f30:	9c 83       	std	Y+4, r25	; 0x04
    2f32:	2d 83       	std	Y+5, r18	; 0x05
    2f34:	3e 83       	std	Y+6, r19	; 0x06
    2f36:	4f 83       	std	Y+7, r20	; 0x07
    2f38:	58 87       	std	Y+8, r21	; 0x08
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	01 96       	adiw	r24, 0x01	; 1
    2f3e:	be 01       	movw	r22, r28
    2f40:	67 5f       	subi	r22, 0xF7	; 247
    2f42:	7f 4f       	sbci	r23, 0xFF	; 255
    2f44:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    2f48:	ce 01       	movw	r24, r28
    2f4a:	05 96       	adiw	r24, 0x05	; 5
    2f4c:	be 01       	movw	r22, r28
    2f4e:	6f 5e       	subi	r22, 0xEF	; 239
    2f50:	7f 4f       	sbci	r23, 0xFF	; 255
    2f52:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    2f56:	99 85       	ldd	r25, Y+9	; 0x09
    2f58:	92 30       	cpi	r25, 0x02	; 2
    2f5a:	88 f0       	brcs	.+34     	; 0x2f7e <__mulsf3+0x60>
    2f5c:	89 89       	ldd	r24, Y+17	; 0x11
    2f5e:	82 30       	cpi	r24, 0x02	; 2
    2f60:	c8 f0       	brcs	.+50     	; 0x2f94 <__mulsf3+0x76>
    2f62:	94 30       	cpi	r25, 0x04	; 4
    2f64:	19 f4       	brne	.+6      	; 0x2f6c <__mulsf3+0x4e>
    2f66:	82 30       	cpi	r24, 0x02	; 2
    2f68:	51 f4       	brne	.+20     	; 0x2f7e <__mulsf3+0x60>
    2f6a:	04 c0       	rjmp	.+8      	; 0x2f74 <__mulsf3+0x56>
    2f6c:	84 30       	cpi	r24, 0x04	; 4
    2f6e:	29 f4       	brne	.+10     	; 0x2f7a <__mulsf3+0x5c>
    2f70:	92 30       	cpi	r25, 0x02	; 2
    2f72:	81 f4       	brne	.+32     	; 0x2f94 <__mulsf3+0x76>
    2f74:	8f e9       	ldi	r24, 0x9F	; 159
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	c6 c0       	rjmp	.+396    	; 0x3106 <__mulsf3+0x1e8>
    2f7a:	92 30       	cpi	r25, 0x02	; 2
    2f7c:	49 f4       	brne	.+18     	; 0x2f90 <__mulsf3+0x72>
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f82:	8a 89       	ldd	r24, Y+18	; 0x12
    2f84:	98 13       	cpse	r25, r24
    2f86:	21 e0       	ldi	r18, 0x01	; 1
    2f88:	2a 87       	std	Y+10, r18	; 0x0a
    2f8a:	ce 01       	movw	r24, r28
    2f8c:	09 96       	adiw	r24, 0x09	; 9
    2f8e:	bb c0       	rjmp	.+374    	; 0x3106 <__mulsf3+0x1e8>
    2f90:	82 30       	cpi	r24, 0x02	; 2
    2f92:	49 f4       	brne	.+18     	; 0x2fa6 <__mulsf3+0x88>
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	8a 89       	ldd	r24, Y+18	; 0x12
    2f9a:	98 13       	cpse	r25, r24
    2f9c:	21 e0       	ldi	r18, 0x01	; 1
    2f9e:	2a 8b       	std	Y+18, r18	; 0x12
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	41 96       	adiw	r24, 0x11	; 17
    2fa4:	b0 c0       	rjmp	.+352    	; 0x3106 <__mulsf3+0x1e8>
    2fa6:	2d 84       	ldd	r2, Y+13	; 0x0d
    2fa8:	3e 84       	ldd	r3, Y+14	; 0x0e
    2faa:	4f 84       	ldd	r4, Y+15	; 0x0f
    2fac:	58 88       	ldd	r5, Y+16	; 0x10
    2fae:	6d 88       	ldd	r6, Y+21	; 0x15
    2fb0:	7e 88       	ldd	r7, Y+22	; 0x16
    2fb2:	8f 88       	ldd	r8, Y+23	; 0x17
    2fb4:	98 8c       	ldd	r9, Y+24	; 0x18
    2fb6:	ee 24       	eor	r14, r14
    2fb8:	ff 24       	eor	r15, r15
    2fba:	87 01       	movw	r16, r14
    2fbc:	aa 24       	eor	r10, r10
    2fbe:	bb 24       	eor	r11, r11
    2fc0:	65 01       	movw	r12, r10
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	50 e0       	ldi	r21, 0x00	; 0
    2fc6:	60 e0       	ldi	r22, 0x00	; 0
    2fc8:	70 e0       	ldi	r23, 0x00	; 0
    2fca:	e0 e0       	ldi	r30, 0x00	; 0
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	c1 01       	movw	r24, r2
    2fd0:	81 70       	andi	r24, 0x01	; 1
    2fd2:	90 70       	andi	r25, 0x00	; 0
    2fd4:	89 2b       	or	r24, r25
    2fd6:	e9 f0       	breq	.+58     	; 0x3012 <__mulsf3+0xf4>
    2fd8:	e6 0c       	add	r14, r6
    2fda:	f7 1c       	adc	r15, r7
    2fdc:	08 1d       	adc	r16, r8
    2fde:	19 1d       	adc	r17, r9
    2fe0:	9a 01       	movw	r18, r20
    2fe2:	ab 01       	movw	r20, r22
    2fe4:	2a 0d       	add	r18, r10
    2fe6:	3b 1d       	adc	r19, r11
    2fe8:	4c 1d       	adc	r20, r12
    2fea:	5d 1d       	adc	r21, r13
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	a0 e0       	ldi	r26, 0x00	; 0
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e6 14       	cp	r14, r6
    2ff6:	f7 04       	cpc	r15, r7
    2ff8:	08 05       	cpc	r16, r8
    2ffa:	19 05       	cpc	r17, r9
    2ffc:	20 f4       	brcc	.+8      	; 0x3006 <__mulsf3+0xe8>
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	a0 e0       	ldi	r26, 0x00	; 0
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	ba 01       	movw	r22, r20
    3008:	a9 01       	movw	r20, r18
    300a:	48 0f       	add	r20, r24
    300c:	59 1f       	adc	r21, r25
    300e:	6a 1f       	adc	r22, r26
    3010:	7b 1f       	adc	r23, r27
    3012:	aa 0c       	add	r10, r10
    3014:	bb 1c       	adc	r11, r11
    3016:	cc 1c       	adc	r12, r12
    3018:	dd 1c       	adc	r13, r13
    301a:	97 fe       	sbrs	r9, 7
    301c:	08 c0       	rjmp	.+16     	; 0x302e <__mulsf3+0x110>
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	a0 e0       	ldi	r26, 0x00	; 0
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	a8 2a       	or	r10, r24
    3028:	b9 2a       	or	r11, r25
    302a:	ca 2a       	or	r12, r26
    302c:	db 2a       	or	r13, r27
    302e:	31 96       	adiw	r30, 0x01	; 1
    3030:	e0 32       	cpi	r30, 0x20	; 32
    3032:	f1 05       	cpc	r31, r1
    3034:	49 f0       	breq	.+18     	; 0x3048 <__mulsf3+0x12a>
    3036:	66 0c       	add	r6, r6
    3038:	77 1c       	adc	r7, r7
    303a:	88 1c       	adc	r8, r8
    303c:	99 1c       	adc	r9, r9
    303e:	56 94       	lsr	r5
    3040:	47 94       	ror	r4
    3042:	37 94       	ror	r3
    3044:	27 94       	ror	r2
    3046:	c3 cf       	rjmp	.-122    	; 0x2fce <__mulsf3+0xb0>
    3048:	fa 85       	ldd	r31, Y+10	; 0x0a
    304a:	ea 89       	ldd	r30, Y+18	; 0x12
    304c:	2b 89       	ldd	r18, Y+19	; 0x13
    304e:	3c 89       	ldd	r19, Y+20	; 0x14
    3050:	8b 85       	ldd	r24, Y+11	; 0x0b
    3052:	9c 85       	ldd	r25, Y+12	; 0x0c
    3054:	28 0f       	add	r18, r24
    3056:	39 1f       	adc	r19, r25
    3058:	2e 5f       	subi	r18, 0xFE	; 254
    305a:	3f 4f       	sbci	r19, 0xFF	; 255
    305c:	17 c0       	rjmp	.+46     	; 0x308c <__mulsf3+0x16e>
    305e:	ca 01       	movw	r24, r20
    3060:	81 70       	andi	r24, 0x01	; 1
    3062:	90 70       	andi	r25, 0x00	; 0
    3064:	89 2b       	or	r24, r25
    3066:	61 f0       	breq	.+24     	; 0x3080 <__mulsf3+0x162>
    3068:	16 95       	lsr	r17
    306a:	07 95       	ror	r16
    306c:	f7 94       	ror	r15
    306e:	e7 94       	ror	r14
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	a0 e0       	ldi	r26, 0x00	; 0
    3076:	b0 e8       	ldi	r27, 0x80	; 128
    3078:	e8 2a       	or	r14, r24
    307a:	f9 2a       	or	r15, r25
    307c:	0a 2b       	or	r16, r26
    307e:	1b 2b       	or	r17, r27
    3080:	76 95       	lsr	r23
    3082:	67 95       	ror	r22
    3084:	57 95       	ror	r21
    3086:	47 95       	ror	r20
    3088:	2f 5f       	subi	r18, 0xFF	; 255
    308a:	3f 4f       	sbci	r19, 0xFF	; 255
    308c:	77 fd       	sbrc	r23, 7
    308e:	e7 cf       	rjmp	.-50     	; 0x305e <__mulsf3+0x140>
    3090:	0c c0       	rjmp	.+24     	; 0x30aa <__mulsf3+0x18c>
    3092:	44 0f       	add	r20, r20
    3094:	55 1f       	adc	r21, r21
    3096:	66 1f       	adc	r22, r22
    3098:	77 1f       	adc	r23, r23
    309a:	17 fd       	sbrc	r17, 7
    309c:	41 60       	ori	r20, 0x01	; 1
    309e:	ee 0c       	add	r14, r14
    30a0:	ff 1c       	adc	r15, r15
    30a2:	00 1f       	adc	r16, r16
    30a4:	11 1f       	adc	r17, r17
    30a6:	21 50       	subi	r18, 0x01	; 1
    30a8:	30 40       	sbci	r19, 0x00	; 0
    30aa:	40 30       	cpi	r20, 0x00	; 0
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	59 07       	cpc	r21, r25
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	69 07       	cpc	r22, r25
    30b4:	90 e4       	ldi	r25, 0x40	; 64
    30b6:	79 07       	cpc	r23, r25
    30b8:	60 f3       	brcs	.-40     	; 0x3092 <__mulsf3+0x174>
    30ba:	2b 8f       	std	Y+27, r18	; 0x1b
    30bc:	3c 8f       	std	Y+28, r19	; 0x1c
    30be:	db 01       	movw	r26, r22
    30c0:	ca 01       	movw	r24, r20
    30c2:	8f 77       	andi	r24, 0x7F	; 127
    30c4:	90 70       	andi	r25, 0x00	; 0
    30c6:	a0 70       	andi	r26, 0x00	; 0
    30c8:	b0 70       	andi	r27, 0x00	; 0
    30ca:	80 34       	cpi	r24, 0x40	; 64
    30cc:	91 05       	cpc	r25, r1
    30ce:	a1 05       	cpc	r26, r1
    30d0:	b1 05       	cpc	r27, r1
    30d2:	61 f4       	brne	.+24     	; 0x30ec <__mulsf3+0x1ce>
    30d4:	47 fd       	sbrc	r20, 7
    30d6:	0a c0       	rjmp	.+20     	; 0x30ec <__mulsf3+0x1ce>
    30d8:	e1 14       	cp	r14, r1
    30da:	f1 04       	cpc	r15, r1
    30dc:	01 05       	cpc	r16, r1
    30de:	11 05       	cpc	r17, r1
    30e0:	29 f0       	breq	.+10     	; 0x30ec <__mulsf3+0x1ce>
    30e2:	40 5c       	subi	r20, 0xC0	; 192
    30e4:	5f 4f       	sbci	r21, 0xFF	; 255
    30e6:	6f 4f       	sbci	r22, 0xFF	; 255
    30e8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ea:	40 78       	andi	r20, 0x80	; 128
    30ec:	1a 8e       	std	Y+26, r1	; 0x1a
    30ee:	fe 17       	cp	r31, r30
    30f0:	11 f0       	breq	.+4      	; 0x30f6 <__mulsf3+0x1d8>
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	8a 8f       	std	Y+26, r24	; 0x1a
    30f6:	4d 8f       	std	Y+29, r20	; 0x1d
    30f8:	5e 8f       	std	Y+30, r21	; 0x1e
    30fa:	6f 8f       	std	Y+31, r22	; 0x1f
    30fc:	78 a3       	std	Y+32, r23	; 0x20
    30fe:	83 e0       	ldi	r24, 0x03	; 3
    3100:	89 8f       	std	Y+25, r24	; 0x19
    3102:	ce 01       	movw	r24, r28
    3104:	49 96       	adiw	r24, 0x19	; 25
    3106:	0e 94 19 1a 	call	0x3432	; 0x3432 <__pack_f>
    310a:	a0 96       	adiw	r28, 0x20	; 32
    310c:	e2 e1       	ldi	r30, 0x12	; 18
    310e:	0c 94 db 1b 	jmp	0x37b6	; 0x37b6 <__epilogue_restores__>

00003112 <__divsf3>:
    3112:	a8 e1       	ldi	r26, 0x18	; 24
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	ef e8       	ldi	r30, 0x8F	; 143
    3118:	f8 e1       	ldi	r31, 0x18	; 24
    311a:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <__prologue_saves__+0x10>
    311e:	69 83       	std	Y+1, r22	; 0x01
    3120:	7a 83       	std	Y+2, r23	; 0x02
    3122:	8b 83       	std	Y+3, r24	; 0x03
    3124:	9c 83       	std	Y+4, r25	; 0x04
    3126:	2d 83       	std	Y+5, r18	; 0x05
    3128:	3e 83       	std	Y+6, r19	; 0x06
    312a:	4f 83       	std	Y+7, r20	; 0x07
    312c:	58 87       	std	Y+8, r21	; 0x08
    312e:	b9 e0       	ldi	r27, 0x09	; 9
    3130:	eb 2e       	mov	r14, r27
    3132:	f1 2c       	mov	r15, r1
    3134:	ec 0e       	add	r14, r28
    3136:	fd 1e       	adc	r15, r29
    3138:	ce 01       	movw	r24, r28
    313a:	01 96       	adiw	r24, 0x01	; 1
    313c:	b7 01       	movw	r22, r14
    313e:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    3142:	8e 01       	movw	r16, r28
    3144:	0f 5e       	subi	r16, 0xEF	; 239
    3146:	1f 4f       	sbci	r17, 0xFF	; 255
    3148:	ce 01       	movw	r24, r28
    314a:	05 96       	adiw	r24, 0x05	; 5
    314c:	b8 01       	movw	r22, r16
    314e:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    3152:	29 85       	ldd	r18, Y+9	; 0x09
    3154:	22 30       	cpi	r18, 0x02	; 2
    3156:	08 f4       	brcc	.+2      	; 0x315a <__divsf3+0x48>
    3158:	7e c0       	rjmp	.+252    	; 0x3256 <__divsf3+0x144>
    315a:	39 89       	ldd	r19, Y+17	; 0x11
    315c:	32 30       	cpi	r19, 0x02	; 2
    315e:	10 f4       	brcc	.+4      	; 0x3164 <__divsf3+0x52>
    3160:	b8 01       	movw	r22, r16
    3162:	7c c0       	rjmp	.+248    	; 0x325c <__divsf3+0x14a>
    3164:	8a 85       	ldd	r24, Y+10	; 0x0a
    3166:	9a 89       	ldd	r25, Y+18	; 0x12
    3168:	89 27       	eor	r24, r25
    316a:	8a 87       	std	Y+10, r24	; 0x0a
    316c:	24 30       	cpi	r18, 0x04	; 4
    316e:	11 f0       	breq	.+4      	; 0x3174 <__divsf3+0x62>
    3170:	22 30       	cpi	r18, 0x02	; 2
    3172:	31 f4       	brne	.+12     	; 0x3180 <__divsf3+0x6e>
    3174:	23 17       	cp	r18, r19
    3176:	09 f0       	breq	.+2      	; 0x317a <__divsf3+0x68>
    3178:	6e c0       	rjmp	.+220    	; 0x3256 <__divsf3+0x144>
    317a:	6f e9       	ldi	r22, 0x9F	; 159
    317c:	70 e0       	ldi	r23, 0x00	; 0
    317e:	6e c0       	rjmp	.+220    	; 0x325c <__divsf3+0x14a>
    3180:	34 30       	cpi	r19, 0x04	; 4
    3182:	39 f4       	brne	.+14     	; 0x3192 <__divsf3+0x80>
    3184:	1d 86       	std	Y+13, r1	; 0x0d
    3186:	1e 86       	std	Y+14, r1	; 0x0e
    3188:	1f 86       	std	Y+15, r1	; 0x0f
    318a:	18 8a       	std	Y+16, r1	; 0x10
    318c:	1c 86       	std	Y+12, r1	; 0x0c
    318e:	1b 86       	std	Y+11, r1	; 0x0b
    3190:	04 c0       	rjmp	.+8      	; 0x319a <__divsf3+0x88>
    3192:	32 30       	cpi	r19, 0x02	; 2
    3194:	21 f4       	brne	.+8      	; 0x319e <__divsf3+0x8c>
    3196:	84 e0       	ldi	r24, 0x04	; 4
    3198:	89 87       	std	Y+9, r24	; 0x09
    319a:	b7 01       	movw	r22, r14
    319c:	5f c0       	rjmp	.+190    	; 0x325c <__divsf3+0x14a>
    319e:	2b 85       	ldd	r18, Y+11	; 0x0b
    31a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    31a2:	8b 89       	ldd	r24, Y+19	; 0x13
    31a4:	9c 89       	ldd	r25, Y+20	; 0x14
    31a6:	28 1b       	sub	r18, r24
    31a8:	39 0b       	sbc	r19, r25
    31aa:	3c 87       	std	Y+12, r19	; 0x0c
    31ac:	2b 87       	std	Y+11, r18	; 0x0b
    31ae:	ed 84       	ldd	r14, Y+13	; 0x0d
    31b0:	fe 84       	ldd	r15, Y+14	; 0x0e
    31b2:	0f 85       	ldd	r16, Y+15	; 0x0f
    31b4:	18 89       	ldd	r17, Y+16	; 0x10
    31b6:	ad 88       	ldd	r10, Y+21	; 0x15
    31b8:	be 88       	ldd	r11, Y+22	; 0x16
    31ba:	cf 88       	ldd	r12, Y+23	; 0x17
    31bc:	d8 8c       	ldd	r13, Y+24	; 0x18
    31be:	ea 14       	cp	r14, r10
    31c0:	fb 04       	cpc	r15, r11
    31c2:	0c 05       	cpc	r16, r12
    31c4:	1d 05       	cpc	r17, r13
    31c6:	40 f4       	brcc	.+16     	; 0x31d8 <__divsf3+0xc6>
    31c8:	ee 0c       	add	r14, r14
    31ca:	ff 1c       	adc	r15, r15
    31cc:	00 1f       	adc	r16, r16
    31ce:	11 1f       	adc	r17, r17
    31d0:	21 50       	subi	r18, 0x01	; 1
    31d2:	30 40       	sbci	r19, 0x00	; 0
    31d4:	3c 87       	std	Y+12, r19	; 0x0c
    31d6:	2b 87       	std	Y+11, r18	; 0x0b
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	40 e0       	ldi	r20, 0x00	; 0
    31de:	50 e0       	ldi	r21, 0x00	; 0
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	a0 e0       	ldi	r26, 0x00	; 0
    31e6:	b0 e4       	ldi	r27, 0x40	; 64
    31e8:	60 e0       	ldi	r22, 0x00	; 0
    31ea:	70 e0       	ldi	r23, 0x00	; 0
    31ec:	ea 14       	cp	r14, r10
    31ee:	fb 04       	cpc	r15, r11
    31f0:	0c 05       	cpc	r16, r12
    31f2:	1d 05       	cpc	r17, r13
    31f4:	40 f0       	brcs	.+16     	; 0x3206 <__divsf3+0xf4>
    31f6:	28 2b       	or	r18, r24
    31f8:	39 2b       	or	r19, r25
    31fa:	4a 2b       	or	r20, r26
    31fc:	5b 2b       	or	r21, r27
    31fe:	ea 18       	sub	r14, r10
    3200:	fb 08       	sbc	r15, r11
    3202:	0c 09       	sbc	r16, r12
    3204:	1d 09       	sbc	r17, r13
    3206:	b6 95       	lsr	r27
    3208:	a7 95       	ror	r26
    320a:	97 95       	ror	r25
    320c:	87 95       	ror	r24
    320e:	ee 0c       	add	r14, r14
    3210:	ff 1c       	adc	r15, r15
    3212:	00 1f       	adc	r16, r16
    3214:	11 1f       	adc	r17, r17
    3216:	6f 5f       	subi	r22, 0xFF	; 255
    3218:	7f 4f       	sbci	r23, 0xFF	; 255
    321a:	6f 31       	cpi	r22, 0x1F	; 31
    321c:	71 05       	cpc	r23, r1
    321e:	31 f7       	brne	.-52     	; 0x31ec <__divsf3+0xda>
    3220:	da 01       	movw	r26, r20
    3222:	c9 01       	movw	r24, r18
    3224:	8f 77       	andi	r24, 0x7F	; 127
    3226:	90 70       	andi	r25, 0x00	; 0
    3228:	a0 70       	andi	r26, 0x00	; 0
    322a:	b0 70       	andi	r27, 0x00	; 0
    322c:	80 34       	cpi	r24, 0x40	; 64
    322e:	91 05       	cpc	r25, r1
    3230:	a1 05       	cpc	r26, r1
    3232:	b1 05       	cpc	r27, r1
    3234:	61 f4       	brne	.+24     	; 0x324e <__divsf3+0x13c>
    3236:	27 fd       	sbrc	r18, 7
    3238:	0a c0       	rjmp	.+20     	; 0x324e <__divsf3+0x13c>
    323a:	e1 14       	cp	r14, r1
    323c:	f1 04       	cpc	r15, r1
    323e:	01 05       	cpc	r16, r1
    3240:	11 05       	cpc	r17, r1
    3242:	29 f0       	breq	.+10     	; 0x324e <__divsf3+0x13c>
    3244:	20 5c       	subi	r18, 0xC0	; 192
    3246:	3f 4f       	sbci	r19, 0xFF	; 255
    3248:	4f 4f       	sbci	r20, 0xFF	; 255
    324a:	5f 4f       	sbci	r21, 0xFF	; 255
    324c:	20 78       	andi	r18, 0x80	; 128
    324e:	2d 87       	std	Y+13, r18	; 0x0d
    3250:	3e 87       	std	Y+14, r19	; 0x0e
    3252:	4f 87       	std	Y+15, r20	; 0x0f
    3254:	58 8b       	std	Y+16, r21	; 0x10
    3256:	be 01       	movw	r22, r28
    3258:	67 5f       	subi	r22, 0xF7	; 247
    325a:	7f 4f       	sbci	r23, 0xFF	; 255
    325c:	cb 01       	movw	r24, r22
    325e:	0e 94 19 1a 	call	0x3432	; 0x3432 <__pack_f>
    3262:	68 96       	adiw	r28, 0x18	; 24
    3264:	ea e0       	ldi	r30, 0x0A	; 10
    3266:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <__epilogue_restores__+0x10>

0000326a <__gtsf2>:
    326a:	a8 e1       	ldi	r26, 0x18	; 24
    326c:	b0 e0       	ldi	r27, 0x00	; 0
    326e:	eb e3       	ldi	r30, 0x3B	; 59
    3270:	f9 e1       	ldi	r31, 0x19	; 25
    3272:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__prologue_saves__+0x18>
    3276:	69 83       	std	Y+1, r22	; 0x01
    3278:	7a 83       	std	Y+2, r23	; 0x02
    327a:	8b 83       	std	Y+3, r24	; 0x03
    327c:	9c 83       	std	Y+4, r25	; 0x04
    327e:	2d 83       	std	Y+5, r18	; 0x05
    3280:	3e 83       	std	Y+6, r19	; 0x06
    3282:	4f 83       	std	Y+7, r20	; 0x07
    3284:	58 87       	std	Y+8, r21	; 0x08
    3286:	89 e0       	ldi	r24, 0x09	; 9
    3288:	e8 2e       	mov	r14, r24
    328a:	f1 2c       	mov	r15, r1
    328c:	ec 0e       	add	r14, r28
    328e:	fd 1e       	adc	r15, r29
    3290:	ce 01       	movw	r24, r28
    3292:	01 96       	adiw	r24, 0x01	; 1
    3294:	b7 01       	movw	r22, r14
    3296:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    329a:	8e 01       	movw	r16, r28
    329c:	0f 5e       	subi	r16, 0xEF	; 239
    329e:	1f 4f       	sbci	r17, 0xFF	; 255
    32a0:	ce 01       	movw	r24, r28
    32a2:	05 96       	adiw	r24, 0x05	; 5
    32a4:	b8 01       	movw	r22, r16
    32a6:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    32aa:	89 85       	ldd	r24, Y+9	; 0x09
    32ac:	82 30       	cpi	r24, 0x02	; 2
    32ae:	40 f0       	brcs	.+16     	; 0x32c0 <__gtsf2+0x56>
    32b0:	89 89       	ldd	r24, Y+17	; 0x11
    32b2:	82 30       	cpi	r24, 0x02	; 2
    32b4:	28 f0       	brcs	.+10     	; 0x32c0 <__gtsf2+0x56>
    32b6:	c7 01       	movw	r24, r14
    32b8:	b8 01       	movw	r22, r16
    32ba:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__fpcmp_parts_f>
    32be:	01 c0       	rjmp	.+2      	; 0x32c2 <__gtsf2+0x58>
    32c0:	8f ef       	ldi	r24, 0xFF	; 255
    32c2:	68 96       	adiw	r28, 0x18	; 24
    32c4:	e6 e0       	ldi	r30, 0x06	; 6
    32c6:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__epilogue_restores__+0x18>

000032ca <__gesf2>:
    32ca:	a8 e1       	ldi	r26, 0x18	; 24
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	eb e6       	ldi	r30, 0x6B	; 107
    32d0:	f9 e1       	ldi	r31, 0x19	; 25
    32d2:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__prologue_saves__+0x18>
    32d6:	69 83       	std	Y+1, r22	; 0x01
    32d8:	7a 83       	std	Y+2, r23	; 0x02
    32da:	8b 83       	std	Y+3, r24	; 0x03
    32dc:	9c 83       	std	Y+4, r25	; 0x04
    32de:	2d 83       	std	Y+5, r18	; 0x05
    32e0:	3e 83       	std	Y+6, r19	; 0x06
    32e2:	4f 83       	std	Y+7, r20	; 0x07
    32e4:	58 87       	std	Y+8, r21	; 0x08
    32e6:	89 e0       	ldi	r24, 0x09	; 9
    32e8:	e8 2e       	mov	r14, r24
    32ea:	f1 2c       	mov	r15, r1
    32ec:	ec 0e       	add	r14, r28
    32ee:	fd 1e       	adc	r15, r29
    32f0:	ce 01       	movw	r24, r28
    32f2:	01 96       	adiw	r24, 0x01	; 1
    32f4:	b7 01       	movw	r22, r14
    32f6:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    32fa:	8e 01       	movw	r16, r28
    32fc:	0f 5e       	subi	r16, 0xEF	; 239
    32fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3300:	ce 01       	movw	r24, r28
    3302:	05 96       	adiw	r24, 0x05	; 5
    3304:	b8 01       	movw	r22, r16
    3306:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    330a:	89 85       	ldd	r24, Y+9	; 0x09
    330c:	82 30       	cpi	r24, 0x02	; 2
    330e:	40 f0       	brcs	.+16     	; 0x3320 <__gesf2+0x56>
    3310:	89 89       	ldd	r24, Y+17	; 0x11
    3312:	82 30       	cpi	r24, 0x02	; 2
    3314:	28 f0       	brcs	.+10     	; 0x3320 <__gesf2+0x56>
    3316:	c7 01       	movw	r24, r14
    3318:	b8 01       	movw	r22, r16
    331a:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__fpcmp_parts_f>
    331e:	01 c0       	rjmp	.+2      	; 0x3322 <__gesf2+0x58>
    3320:	8f ef       	ldi	r24, 0xFF	; 255
    3322:	68 96       	adiw	r28, 0x18	; 24
    3324:	e6 e0       	ldi	r30, 0x06	; 6
    3326:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__epilogue_restores__+0x18>

0000332a <__ltsf2>:
    332a:	a8 e1       	ldi	r26, 0x18	; 24
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	eb e9       	ldi	r30, 0x9B	; 155
    3330:	f9 e1       	ldi	r31, 0x19	; 25
    3332:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__prologue_saves__+0x18>
    3336:	69 83       	std	Y+1, r22	; 0x01
    3338:	7a 83       	std	Y+2, r23	; 0x02
    333a:	8b 83       	std	Y+3, r24	; 0x03
    333c:	9c 83       	std	Y+4, r25	; 0x04
    333e:	2d 83       	std	Y+5, r18	; 0x05
    3340:	3e 83       	std	Y+6, r19	; 0x06
    3342:	4f 83       	std	Y+7, r20	; 0x07
    3344:	58 87       	std	Y+8, r21	; 0x08
    3346:	89 e0       	ldi	r24, 0x09	; 9
    3348:	e8 2e       	mov	r14, r24
    334a:	f1 2c       	mov	r15, r1
    334c:	ec 0e       	add	r14, r28
    334e:	fd 1e       	adc	r15, r29
    3350:	ce 01       	movw	r24, r28
    3352:	01 96       	adiw	r24, 0x01	; 1
    3354:	b7 01       	movw	r22, r14
    3356:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    335a:	8e 01       	movw	r16, r28
    335c:	0f 5e       	subi	r16, 0xEF	; 239
    335e:	1f 4f       	sbci	r17, 0xFF	; 255
    3360:	ce 01       	movw	r24, r28
    3362:	05 96       	adiw	r24, 0x05	; 5
    3364:	b8 01       	movw	r22, r16
    3366:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    336a:	89 85       	ldd	r24, Y+9	; 0x09
    336c:	82 30       	cpi	r24, 0x02	; 2
    336e:	40 f0       	brcs	.+16     	; 0x3380 <__ltsf2+0x56>
    3370:	89 89       	ldd	r24, Y+17	; 0x11
    3372:	82 30       	cpi	r24, 0x02	; 2
    3374:	28 f0       	brcs	.+10     	; 0x3380 <__ltsf2+0x56>
    3376:	c7 01       	movw	r24, r14
    3378:	b8 01       	movw	r22, r16
    337a:	0e 94 66 1b 	call	0x36cc	; 0x36cc <__fpcmp_parts_f>
    337e:	01 c0       	rjmp	.+2      	; 0x3382 <__ltsf2+0x58>
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	68 96       	adiw	r28, 0x18	; 24
    3384:	e6 e0       	ldi	r30, 0x06	; 6
    3386:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__epilogue_restores__+0x18>

0000338a <__fixsfsi>:
    338a:	ac e0       	ldi	r26, 0x0C	; 12
    338c:	b0 e0       	ldi	r27, 0x00	; 0
    338e:	eb ec       	ldi	r30, 0xCB	; 203
    3390:	f9 e1       	ldi	r31, 0x19	; 25
    3392:	0c 94 cf 1b 	jmp	0x379e	; 0x379e <__prologue_saves__+0x20>
    3396:	69 83       	std	Y+1, r22	; 0x01
    3398:	7a 83       	std	Y+2, r23	; 0x02
    339a:	8b 83       	std	Y+3, r24	; 0x03
    339c:	9c 83       	std	Y+4, r25	; 0x04
    339e:	ce 01       	movw	r24, r28
    33a0:	01 96       	adiw	r24, 0x01	; 1
    33a2:	be 01       	movw	r22, r28
    33a4:	6b 5f       	subi	r22, 0xFB	; 251
    33a6:	7f 4f       	sbci	r23, 0xFF	; 255
    33a8:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <__unpack_f>
    33ac:	8d 81       	ldd	r24, Y+5	; 0x05
    33ae:	82 30       	cpi	r24, 0x02	; 2
    33b0:	61 f1       	breq	.+88     	; 0x340a <__fixsfsi+0x80>
    33b2:	82 30       	cpi	r24, 0x02	; 2
    33b4:	50 f1       	brcs	.+84     	; 0x340a <__fixsfsi+0x80>
    33b6:	84 30       	cpi	r24, 0x04	; 4
    33b8:	21 f4       	brne	.+8      	; 0x33c2 <__fixsfsi+0x38>
    33ba:	8e 81       	ldd	r24, Y+6	; 0x06
    33bc:	88 23       	and	r24, r24
    33be:	51 f1       	breq	.+84     	; 0x3414 <__fixsfsi+0x8a>
    33c0:	2e c0       	rjmp	.+92     	; 0x341e <__fixsfsi+0x94>
    33c2:	2f 81       	ldd	r18, Y+7	; 0x07
    33c4:	38 85       	ldd	r19, Y+8	; 0x08
    33c6:	37 fd       	sbrc	r19, 7
    33c8:	20 c0       	rjmp	.+64     	; 0x340a <__fixsfsi+0x80>
    33ca:	6e 81       	ldd	r22, Y+6	; 0x06
    33cc:	2f 31       	cpi	r18, 0x1F	; 31
    33ce:	31 05       	cpc	r19, r1
    33d0:	1c f0       	brlt	.+6      	; 0x33d8 <__fixsfsi+0x4e>
    33d2:	66 23       	and	r22, r22
    33d4:	f9 f0       	breq	.+62     	; 0x3414 <__fixsfsi+0x8a>
    33d6:	23 c0       	rjmp	.+70     	; 0x341e <__fixsfsi+0x94>
    33d8:	8e e1       	ldi	r24, 0x1E	; 30
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	82 1b       	sub	r24, r18
    33de:	93 0b       	sbc	r25, r19
    33e0:	29 85       	ldd	r18, Y+9	; 0x09
    33e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    33e4:	4b 85       	ldd	r20, Y+11	; 0x0b
    33e6:	5c 85       	ldd	r21, Y+12	; 0x0c
    33e8:	04 c0       	rjmp	.+8      	; 0x33f2 <__fixsfsi+0x68>
    33ea:	56 95       	lsr	r21
    33ec:	47 95       	ror	r20
    33ee:	37 95       	ror	r19
    33f0:	27 95       	ror	r18
    33f2:	8a 95       	dec	r24
    33f4:	d2 f7       	brpl	.-12     	; 0x33ea <__fixsfsi+0x60>
    33f6:	66 23       	and	r22, r22
    33f8:	b1 f0       	breq	.+44     	; 0x3426 <__fixsfsi+0x9c>
    33fa:	50 95       	com	r21
    33fc:	40 95       	com	r20
    33fe:	30 95       	com	r19
    3400:	21 95       	neg	r18
    3402:	3f 4f       	sbci	r19, 0xFF	; 255
    3404:	4f 4f       	sbci	r20, 0xFF	; 255
    3406:	5f 4f       	sbci	r21, 0xFF	; 255
    3408:	0e c0       	rjmp	.+28     	; 0x3426 <__fixsfsi+0x9c>
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e0       	ldi	r20, 0x00	; 0
    3410:	50 e0       	ldi	r21, 0x00	; 0
    3412:	09 c0       	rjmp	.+18     	; 0x3426 <__fixsfsi+0x9c>
    3414:	2f ef       	ldi	r18, 0xFF	; 255
    3416:	3f ef       	ldi	r19, 0xFF	; 255
    3418:	4f ef       	ldi	r20, 0xFF	; 255
    341a:	5f e7       	ldi	r21, 0x7F	; 127
    341c:	04 c0       	rjmp	.+8      	; 0x3426 <__fixsfsi+0x9c>
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e0       	ldi	r20, 0x00	; 0
    3424:	50 e8       	ldi	r21, 0x80	; 128
    3426:	b9 01       	movw	r22, r18
    3428:	ca 01       	movw	r24, r20
    342a:	2c 96       	adiw	r28, 0x0c	; 12
    342c:	e2 e0       	ldi	r30, 0x02	; 2
    342e:	0c 94 eb 1b 	jmp	0x37d6	; 0x37d6 <__epilogue_restores__+0x20>

00003432 <__pack_f>:
    3432:	df 92       	push	r13
    3434:	ef 92       	push	r14
    3436:	ff 92       	push	r15
    3438:	0f 93       	push	r16
    343a:	1f 93       	push	r17
    343c:	fc 01       	movw	r30, r24
    343e:	e4 80       	ldd	r14, Z+4	; 0x04
    3440:	f5 80       	ldd	r15, Z+5	; 0x05
    3442:	06 81       	ldd	r16, Z+6	; 0x06
    3444:	17 81       	ldd	r17, Z+7	; 0x07
    3446:	d1 80       	ldd	r13, Z+1	; 0x01
    3448:	80 81       	ld	r24, Z
    344a:	82 30       	cpi	r24, 0x02	; 2
    344c:	48 f4       	brcc	.+18     	; 0x3460 <__pack_f+0x2e>
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	a0 e1       	ldi	r26, 0x10	; 16
    3454:	b0 e0       	ldi	r27, 0x00	; 0
    3456:	e8 2a       	or	r14, r24
    3458:	f9 2a       	or	r15, r25
    345a:	0a 2b       	or	r16, r26
    345c:	1b 2b       	or	r17, r27
    345e:	a5 c0       	rjmp	.+330    	; 0x35aa <__pack_f+0x178>
    3460:	84 30       	cpi	r24, 0x04	; 4
    3462:	09 f4       	brne	.+2      	; 0x3466 <__pack_f+0x34>
    3464:	9f c0       	rjmp	.+318    	; 0x35a4 <__pack_f+0x172>
    3466:	82 30       	cpi	r24, 0x02	; 2
    3468:	21 f4       	brne	.+8      	; 0x3472 <__pack_f+0x40>
    346a:	ee 24       	eor	r14, r14
    346c:	ff 24       	eor	r15, r15
    346e:	87 01       	movw	r16, r14
    3470:	05 c0       	rjmp	.+10     	; 0x347c <__pack_f+0x4a>
    3472:	e1 14       	cp	r14, r1
    3474:	f1 04       	cpc	r15, r1
    3476:	01 05       	cpc	r16, r1
    3478:	11 05       	cpc	r17, r1
    347a:	19 f4       	brne	.+6      	; 0x3482 <__pack_f+0x50>
    347c:	e0 e0       	ldi	r30, 0x00	; 0
    347e:	f0 e0       	ldi	r31, 0x00	; 0
    3480:	96 c0       	rjmp	.+300    	; 0x35ae <__pack_f+0x17c>
    3482:	62 81       	ldd	r22, Z+2	; 0x02
    3484:	73 81       	ldd	r23, Z+3	; 0x03
    3486:	9f ef       	ldi	r25, 0xFF	; 255
    3488:	62 38       	cpi	r22, 0x82	; 130
    348a:	79 07       	cpc	r23, r25
    348c:	0c f0       	brlt	.+2      	; 0x3490 <__pack_f+0x5e>
    348e:	5b c0       	rjmp	.+182    	; 0x3546 <__pack_f+0x114>
    3490:	22 e8       	ldi	r18, 0x82	; 130
    3492:	3f ef       	ldi	r19, 0xFF	; 255
    3494:	26 1b       	sub	r18, r22
    3496:	37 0b       	sbc	r19, r23
    3498:	2a 31       	cpi	r18, 0x1A	; 26
    349a:	31 05       	cpc	r19, r1
    349c:	2c f0       	brlt	.+10     	; 0x34a8 <__pack_f+0x76>
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	40 e0       	ldi	r20, 0x00	; 0
    34a4:	50 e0       	ldi	r21, 0x00	; 0
    34a6:	2a c0       	rjmp	.+84     	; 0x34fc <__pack_f+0xca>
    34a8:	b8 01       	movw	r22, r16
    34aa:	a7 01       	movw	r20, r14
    34ac:	02 2e       	mov	r0, r18
    34ae:	04 c0       	rjmp	.+8      	; 0x34b8 <__pack_f+0x86>
    34b0:	76 95       	lsr	r23
    34b2:	67 95       	ror	r22
    34b4:	57 95       	ror	r21
    34b6:	47 95       	ror	r20
    34b8:	0a 94       	dec	r0
    34ba:	d2 f7       	brpl	.-12     	; 0x34b0 <__pack_f+0x7e>
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	a0 e0       	ldi	r26, 0x00	; 0
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	04 c0       	rjmp	.+8      	; 0x34ce <__pack_f+0x9c>
    34c6:	88 0f       	add	r24, r24
    34c8:	99 1f       	adc	r25, r25
    34ca:	aa 1f       	adc	r26, r26
    34cc:	bb 1f       	adc	r27, r27
    34ce:	2a 95       	dec	r18
    34d0:	d2 f7       	brpl	.-12     	; 0x34c6 <__pack_f+0x94>
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	a1 09       	sbc	r26, r1
    34d6:	b1 09       	sbc	r27, r1
    34d8:	8e 21       	and	r24, r14
    34da:	9f 21       	and	r25, r15
    34dc:	a0 23       	and	r26, r16
    34de:	b1 23       	and	r27, r17
    34e0:	00 97       	sbiw	r24, 0x00	; 0
    34e2:	a1 05       	cpc	r26, r1
    34e4:	b1 05       	cpc	r27, r1
    34e6:	21 f0       	breq	.+8      	; 0x34f0 <__pack_f+0xbe>
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	a0 e0       	ldi	r26, 0x00	; 0
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	9a 01       	movw	r18, r20
    34f2:	ab 01       	movw	r20, r22
    34f4:	28 2b       	or	r18, r24
    34f6:	39 2b       	or	r19, r25
    34f8:	4a 2b       	or	r20, r26
    34fa:	5b 2b       	or	r21, r27
    34fc:	da 01       	movw	r26, r20
    34fe:	c9 01       	movw	r24, r18
    3500:	8f 77       	andi	r24, 0x7F	; 127
    3502:	90 70       	andi	r25, 0x00	; 0
    3504:	a0 70       	andi	r26, 0x00	; 0
    3506:	b0 70       	andi	r27, 0x00	; 0
    3508:	80 34       	cpi	r24, 0x40	; 64
    350a:	91 05       	cpc	r25, r1
    350c:	a1 05       	cpc	r26, r1
    350e:	b1 05       	cpc	r27, r1
    3510:	39 f4       	brne	.+14     	; 0x3520 <__pack_f+0xee>
    3512:	27 ff       	sbrs	r18, 7
    3514:	09 c0       	rjmp	.+18     	; 0x3528 <__pack_f+0xf6>
    3516:	20 5c       	subi	r18, 0xC0	; 192
    3518:	3f 4f       	sbci	r19, 0xFF	; 255
    351a:	4f 4f       	sbci	r20, 0xFF	; 255
    351c:	5f 4f       	sbci	r21, 0xFF	; 255
    351e:	04 c0       	rjmp	.+8      	; 0x3528 <__pack_f+0xf6>
    3520:	21 5c       	subi	r18, 0xC1	; 193
    3522:	3f 4f       	sbci	r19, 0xFF	; 255
    3524:	4f 4f       	sbci	r20, 0xFF	; 255
    3526:	5f 4f       	sbci	r21, 0xFF	; 255
    3528:	e0 e0       	ldi	r30, 0x00	; 0
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	20 30       	cpi	r18, 0x00	; 0
    352e:	a0 e0       	ldi	r26, 0x00	; 0
    3530:	3a 07       	cpc	r19, r26
    3532:	a0 e0       	ldi	r26, 0x00	; 0
    3534:	4a 07       	cpc	r20, r26
    3536:	a0 e4       	ldi	r26, 0x40	; 64
    3538:	5a 07       	cpc	r21, r26
    353a:	10 f0       	brcs	.+4      	; 0x3540 <__pack_f+0x10e>
    353c:	e1 e0       	ldi	r30, 0x01	; 1
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	79 01       	movw	r14, r18
    3542:	8a 01       	movw	r16, r20
    3544:	27 c0       	rjmp	.+78     	; 0x3594 <__pack_f+0x162>
    3546:	60 38       	cpi	r22, 0x80	; 128
    3548:	71 05       	cpc	r23, r1
    354a:	64 f5       	brge	.+88     	; 0x35a4 <__pack_f+0x172>
    354c:	fb 01       	movw	r30, r22
    354e:	e1 58       	subi	r30, 0x81	; 129
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	d8 01       	movw	r26, r16
    3554:	c7 01       	movw	r24, r14
    3556:	8f 77       	andi	r24, 0x7F	; 127
    3558:	90 70       	andi	r25, 0x00	; 0
    355a:	a0 70       	andi	r26, 0x00	; 0
    355c:	b0 70       	andi	r27, 0x00	; 0
    355e:	80 34       	cpi	r24, 0x40	; 64
    3560:	91 05       	cpc	r25, r1
    3562:	a1 05       	cpc	r26, r1
    3564:	b1 05       	cpc	r27, r1
    3566:	39 f4       	brne	.+14     	; 0x3576 <__pack_f+0x144>
    3568:	e7 fe       	sbrs	r14, 7
    356a:	0d c0       	rjmp	.+26     	; 0x3586 <__pack_f+0x154>
    356c:	80 e4       	ldi	r24, 0x40	; 64
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	a0 e0       	ldi	r26, 0x00	; 0
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	04 c0       	rjmp	.+8      	; 0x357e <__pack_f+0x14c>
    3576:	8f e3       	ldi	r24, 0x3F	; 63
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	a0 e0       	ldi	r26, 0x00	; 0
    357c:	b0 e0       	ldi	r27, 0x00	; 0
    357e:	e8 0e       	add	r14, r24
    3580:	f9 1e       	adc	r15, r25
    3582:	0a 1f       	adc	r16, r26
    3584:	1b 1f       	adc	r17, r27
    3586:	17 ff       	sbrs	r17, 7
    3588:	05 c0       	rjmp	.+10     	; 0x3594 <__pack_f+0x162>
    358a:	16 95       	lsr	r17
    358c:	07 95       	ror	r16
    358e:	f7 94       	ror	r15
    3590:	e7 94       	ror	r14
    3592:	31 96       	adiw	r30, 0x01	; 1
    3594:	87 e0       	ldi	r24, 0x07	; 7
    3596:	16 95       	lsr	r17
    3598:	07 95       	ror	r16
    359a:	f7 94       	ror	r15
    359c:	e7 94       	ror	r14
    359e:	8a 95       	dec	r24
    35a0:	d1 f7       	brne	.-12     	; 0x3596 <__pack_f+0x164>
    35a2:	05 c0       	rjmp	.+10     	; 0x35ae <__pack_f+0x17c>
    35a4:	ee 24       	eor	r14, r14
    35a6:	ff 24       	eor	r15, r15
    35a8:	87 01       	movw	r16, r14
    35aa:	ef ef       	ldi	r30, 0xFF	; 255
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	6e 2f       	mov	r22, r30
    35b0:	67 95       	ror	r22
    35b2:	66 27       	eor	r22, r22
    35b4:	67 95       	ror	r22
    35b6:	90 2f       	mov	r25, r16
    35b8:	9f 77       	andi	r25, 0x7F	; 127
    35ba:	d7 94       	ror	r13
    35bc:	dd 24       	eor	r13, r13
    35be:	d7 94       	ror	r13
    35c0:	8e 2f       	mov	r24, r30
    35c2:	86 95       	lsr	r24
    35c4:	49 2f       	mov	r20, r25
    35c6:	46 2b       	or	r20, r22
    35c8:	58 2f       	mov	r21, r24
    35ca:	5d 29       	or	r21, r13
    35cc:	b7 01       	movw	r22, r14
    35ce:	ca 01       	movw	r24, r20
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	ff 90       	pop	r15
    35d6:	ef 90       	pop	r14
    35d8:	df 90       	pop	r13
    35da:	08 95       	ret

000035dc <__unpack_f>:
    35dc:	fc 01       	movw	r30, r24
    35de:	db 01       	movw	r26, r22
    35e0:	40 81       	ld	r20, Z
    35e2:	51 81       	ldd	r21, Z+1	; 0x01
    35e4:	22 81       	ldd	r18, Z+2	; 0x02
    35e6:	62 2f       	mov	r22, r18
    35e8:	6f 77       	andi	r22, 0x7F	; 127
    35ea:	70 e0       	ldi	r23, 0x00	; 0
    35ec:	22 1f       	adc	r18, r18
    35ee:	22 27       	eor	r18, r18
    35f0:	22 1f       	adc	r18, r18
    35f2:	93 81       	ldd	r25, Z+3	; 0x03
    35f4:	89 2f       	mov	r24, r25
    35f6:	88 0f       	add	r24, r24
    35f8:	82 2b       	or	r24, r18
    35fa:	28 2f       	mov	r18, r24
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	99 1f       	adc	r25, r25
    3600:	99 27       	eor	r25, r25
    3602:	99 1f       	adc	r25, r25
    3604:	11 96       	adiw	r26, 0x01	; 1
    3606:	9c 93       	st	X, r25
    3608:	11 97       	sbiw	r26, 0x01	; 1
    360a:	21 15       	cp	r18, r1
    360c:	31 05       	cpc	r19, r1
    360e:	a9 f5       	brne	.+106    	; 0x367a <__unpack_f+0x9e>
    3610:	41 15       	cp	r20, r1
    3612:	51 05       	cpc	r21, r1
    3614:	61 05       	cpc	r22, r1
    3616:	71 05       	cpc	r23, r1
    3618:	11 f4       	brne	.+4      	; 0x361e <__unpack_f+0x42>
    361a:	82 e0       	ldi	r24, 0x02	; 2
    361c:	37 c0       	rjmp	.+110    	; 0x368c <__unpack_f+0xb0>
    361e:	82 e8       	ldi	r24, 0x82	; 130
    3620:	9f ef       	ldi	r25, 0xFF	; 255
    3622:	13 96       	adiw	r26, 0x03	; 3
    3624:	9c 93       	st	X, r25
    3626:	8e 93       	st	-X, r24
    3628:	12 97       	sbiw	r26, 0x02	; 2
    362a:	9a 01       	movw	r18, r20
    362c:	ab 01       	movw	r20, r22
    362e:	67 e0       	ldi	r22, 0x07	; 7
    3630:	22 0f       	add	r18, r18
    3632:	33 1f       	adc	r19, r19
    3634:	44 1f       	adc	r20, r20
    3636:	55 1f       	adc	r21, r21
    3638:	6a 95       	dec	r22
    363a:	d1 f7       	brne	.-12     	; 0x3630 <__unpack_f+0x54>
    363c:	83 e0       	ldi	r24, 0x03	; 3
    363e:	8c 93       	st	X, r24
    3640:	0d c0       	rjmp	.+26     	; 0x365c <__unpack_f+0x80>
    3642:	22 0f       	add	r18, r18
    3644:	33 1f       	adc	r19, r19
    3646:	44 1f       	adc	r20, r20
    3648:	55 1f       	adc	r21, r21
    364a:	12 96       	adiw	r26, 0x02	; 2
    364c:	8d 91       	ld	r24, X+
    364e:	9c 91       	ld	r25, X
    3650:	13 97       	sbiw	r26, 0x03	; 3
    3652:	01 97       	sbiw	r24, 0x01	; 1
    3654:	13 96       	adiw	r26, 0x03	; 3
    3656:	9c 93       	st	X, r25
    3658:	8e 93       	st	-X, r24
    365a:	12 97       	sbiw	r26, 0x02	; 2
    365c:	20 30       	cpi	r18, 0x00	; 0
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	38 07       	cpc	r19, r24
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	48 07       	cpc	r20, r24
    3666:	80 e4       	ldi	r24, 0x40	; 64
    3668:	58 07       	cpc	r21, r24
    366a:	58 f3       	brcs	.-42     	; 0x3642 <__unpack_f+0x66>
    366c:	14 96       	adiw	r26, 0x04	; 4
    366e:	2d 93       	st	X+, r18
    3670:	3d 93       	st	X+, r19
    3672:	4d 93       	st	X+, r20
    3674:	5c 93       	st	X, r21
    3676:	17 97       	sbiw	r26, 0x07	; 7
    3678:	08 95       	ret
    367a:	2f 3f       	cpi	r18, 0xFF	; 255
    367c:	31 05       	cpc	r19, r1
    367e:	79 f4       	brne	.+30     	; 0x369e <__unpack_f+0xc2>
    3680:	41 15       	cp	r20, r1
    3682:	51 05       	cpc	r21, r1
    3684:	61 05       	cpc	r22, r1
    3686:	71 05       	cpc	r23, r1
    3688:	19 f4       	brne	.+6      	; 0x3690 <__unpack_f+0xb4>
    368a:	84 e0       	ldi	r24, 0x04	; 4
    368c:	8c 93       	st	X, r24
    368e:	08 95       	ret
    3690:	64 ff       	sbrs	r22, 4
    3692:	03 c0       	rjmp	.+6      	; 0x369a <__unpack_f+0xbe>
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	8c 93       	st	X, r24
    3698:	12 c0       	rjmp	.+36     	; 0x36be <__unpack_f+0xe2>
    369a:	1c 92       	st	X, r1
    369c:	10 c0       	rjmp	.+32     	; 0x36be <__unpack_f+0xe2>
    369e:	2f 57       	subi	r18, 0x7F	; 127
    36a0:	30 40       	sbci	r19, 0x00	; 0
    36a2:	13 96       	adiw	r26, 0x03	; 3
    36a4:	3c 93       	st	X, r19
    36a6:	2e 93       	st	-X, r18
    36a8:	12 97       	sbiw	r26, 0x02	; 2
    36aa:	83 e0       	ldi	r24, 0x03	; 3
    36ac:	8c 93       	st	X, r24
    36ae:	87 e0       	ldi	r24, 0x07	; 7
    36b0:	44 0f       	add	r20, r20
    36b2:	55 1f       	adc	r21, r21
    36b4:	66 1f       	adc	r22, r22
    36b6:	77 1f       	adc	r23, r23
    36b8:	8a 95       	dec	r24
    36ba:	d1 f7       	brne	.-12     	; 0x36b0 <__unpack_f+0xd4>
    36bc:	70 64       	ori	r23, 0x40	; 64
    36be:	14 96       	adiw	r26, 0x04	; 4
    36c0:	4d 93       	st	X+, r20
    36c2:	5d 93       	st	X+, r21
    36c4:	6d 93       	st	X+, r22
    36c6:	7c 93       	st	X, r23
    36c8:	17 97       	sbiw	r26, 0x07	; 7
    36ca:	08 95       	ret

000036cc <__fpcmp_parts_f>:
    36cc:	1f 93       	push	r17
    36ce:	dc 01       	movw	r26, r24
    36d0:	fb 01       	movw	r30, r22
    36d2:	9c 91       	ld	r25, X
    36d4:	92 30       	cpi	r25, 0x02	; 2
    36d6:	08 f4       	brcc	.+2      	; 0x36da <__fpcmp_parts_f+0xe>
    36d8:	47 c0       	rjmp	.+142    	; 0x3768 <__fpcmp_parts_f+0x9c>
    36da:	80 81       	ld	r24, Z
    36dc:	82 30       	cpi	r24, 0x02	; 2
    36de:	08 f4       	brcc	.+2      	; 0x36e2 <__fpcmp_parts_f+0x16>
    36e0:	43 c0       	rjmp	.+134    	; 0x3768 <__fpcmp_parts_f+0x9c>
    36e2:	94 30       	cpi	r25, 0x04	; 4
    36e4:	51 f4       	brne	.+20     	; 0x36fa <__fpcmp_parts_f+0x2e>
    36e6:	11 96       	adiw	r26, 0x01	; 1
    36e8:	1c 91       	ld	r17, X
    36ea:	84 30       	cpi	r24, 0x04	; 4
    36ec:	99 f5       	brne	.+102    	; 0x3754 <__fpcmp_parts_f+0x88>
    36ee:	81 81       	ldd	r24, Z+1	; 0x01
    36f0:	68 2f       	mov	r22, r24
    36f2:	70 e0       	ldi	r23, 0x00	; 0
    36f4:	61 1b       	sub	r22, r17
    36f6:	71 09       	sbc	r23, r1
    36f8:	3f c0       	rjmp	.+126    	; 0x3778 <__fpcmp_parts_f+0xac>
    36fa:	84 30       	cpi	r24, 0x04	; 4
    36fc:	21 f0       	breq	.+8      	; 0x3706 <__fpcmp_parts_f+0x3a>
    36fe:	92 30       	cpi	r25, 0x02	; 2
    3700:	31 f4       	brne	.+12     	; 0x370e <__fpcmp_parts_f+0x42>
    3702:	82 30       	cpi	r24, 0x02	; 2
    3704:	b9 f1       	breq	.+110    	; 0x3774 <__fpcmp_parts_f+0xa8>
    3706:	81 81       	ldd	r24, Z+1	; 0x01
    3708:	88 23       	and	r24, r24
    370a:	89 f1       	breq	.+98     	; 0x376e <__fpcmp_parts_f+0xa2>
    370c:	2d c0       	rjmp	.+90     	; 0x3768 <__fpcmp_parts_f+0x9c>
    370e:	11 96       	adiw	r26, 0x01	; 1
    3710:	1c 91       	ld	r17, X
    3712:	11 97       	sbiw	r26, 0x01	; 1
    3714:	82 30       	cpi	r24, 0x02	; 2
    3716:	f1 f0       	breq	.+60     	; 0x3754 <__fpcmp_parts_f+0x88>
    3718:	81 81       	ldd	r24, Z+1	; 0x01
    371a:	18 17       	cp	r17, r24
    371c:	d9 f4       	brne	.+54     	; 0x3754 <__fpcmp_parts_f+0x88>
    371e:	12 96       	adiw	r26, 0x02	; 2
    3720:	2d 91       	ld	r18, X+
    3722:	3c 91       	ld	r19, X
    3724:	13 97       	sbiw	r26, 0x03	; 3
    3726:	82 81       	ldd	r24, Z+2	; 0x02
    3728:	93 81       	ldd	r25, Z+3	; 0x03
    372a:	82 17       	cp	r24, r18
    372c:	93 07       	cpc	r25, r19
    372e:	94 f0       	brlt	.+36     	; 0x3754 <__fpcmp_parts_f+0x88>
    3730:	28 17       	cp	r18, r24
    3732:	39 07       	cpc	r19, r25
    3734:	bc f0       	brlt	.+46     	; 0x3764 <__fpcmp_parts_f+0x98>
    3736:	14 96       	adiw	r26, 0x04	; 4
    3738:	8d 91       	ld	r24, X+
    373a:	9d 91       	ld	r25, X+
    373c:	0d 90       	ld	r0, X+
    373e:	bc 91       	ld	r27, X
    3740:	a0 2d       	mov	r26, r0
    3742:	24 81       	ldd	r18, Z+4	; 0x04
    3744:	35 81       	ldd	r19, Z+5	; 0x05
    3746:	46 81       	ldd	r20, Z+6	; 0x06
    3748:	57 81       	ldd	r21, Z+7	; 0x07
    374a:	28 17       	cp	r18, r24
    374c:	39 07       	cpc	r19, r25
    374e:	4a 07       	cpc	r20, r26
    3750:	5b 07       	cpc	r21, r27
    3752:	18 f4       	brcc	.+6      	; 0x375a <__fpcmp_parts_f+0x8e>
    3754:	11 23       	and	r17, r17
    3756:	41 f0       	breq	.+16     	; 0x3768 <__fpcmp_parts_f+0x9c>
    3758:	0a c0       	rjmp	.+20     	; 0x376e <__fpcmp_parts_f+0xa2>
    375a:	82 17       	cp	r24, r18
    375c:	93 07       	cpc	r25, r19
    375e:	a4 07       	cpc	r26, r20
    3760:	b5 07       	cpc	r27, r21
    3762:	40 f4       	brcc	.+16     	; 0x3774 <__fpcmp_parts_f+0xa8>
    3764:	11 23       	and	r17, r17
    3766:	19 f0       	breq	.+6      	; 0x376e <__fpcmp_parts_f+0xa2>
    3768:	61 e0       	ldi	r22, 0x01	; 1
    376a:	70 e0       	ldi	r23, 0x00	; 0
    376c:	05 c0       	rjmp	.+10     	; 0x3778 <__fpcmp_parts_f+0xac>
    376e:	6f ef       	ldi	r22, 0xFF	; 255
    3770:	7f ef       	ldi	r23, 0xFF	; 255
    3772:	02 c0       	rjmp	.+4      	; 0x3778 <__fpcmp_parts_f+0xac>
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	70 e0       	ldi	r23, 0x00	; 0
    3778:	cb 01       	movw	r24, r22
    377a:	1f 91       	pop	r17
    377c:	08 95       	ret

0000377e <__prologue_saves__>:
    377e:	2f 92       	push	r2
    3780:	3f 92       	push	r3
    3782:	4f 92       	push	r4
    3784:	5f 92       	push	r5
    3786:	6f 92       	push	r6
    3788:	7f 92       	push	r7
    378a:	8f 92       	push	r8
    378c:	9f 92       	push	r9
    378e:	af 92       	push	r10
    3790:	bf 92       	push	r11
    3792:	cf 92       	push	r12
    3794:	df 92       	push	r13
    3796:	ef 92       	push	r14
    3798:	ff 92       	push	r15
    379a:	0f 93       	push	r16
    379c:	1f 93       	push	r17
    379e:	cf 93       	push	r28
    37a0:	df 93       	push	r29
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62
    37a6:	ca 1b       	sub	r28, r26
    37a8:	db 0b       	sbc	r29, r27
    37aa:	0f b6       	in	r0, 0x3f	; 63
    37ac:	f8 94       	cli
    37ae:	de bf       	out	0x3e, r29	; 62
    37b0:	0f be       	out	0x3f, r0	; 63
    37b2:	cd bf       	out	0x3d, r28	; 61
    37b4:	09 94       	ijmp

000037b6 <__epilogue_restores__>:
    37b6:	2a 88       	ldd	r2, Y+18	; 0x12
    37b8:	39 88       	ldd	r3, Y+17	; 0x11
    37ba:	48 88       	ldd	r4, Y+16	; 0x10
    37bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    37be:	6e 84       	ldd	r6, Y+14	; 0x0e
    37c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    37c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    37c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    37c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    37c8:	b9 84       	ldd	r11, Y+9	; 0x09
    37ca:	c8 84       	ldd	r12, Y+8	; 0x08
    37cc:	df 80       	ldd	r13, Y+7	; 0x07
    37ce:	ee 80       	ldd	r14, Y+6	; 0x06
    37d0:	fd 80       	ldd	r15, Y+5	; 0x05
    37d2:	0c 81       	ldd	r16, Y+4	; 0x04
    37d4:	1b 81       	ldd	r17, Y+3	; 0x03
    37d6:	aa 81       	ldd	r26, Y+2	; 0x02
    37d8:	b9 81       	ldd	r27, Y+1	; 0x01
    37da:	ce 0f       	add	r28, r30
    37dc:	d1 1d       	adc	r29, r1
    37de:	0f b6       	in	r0, 0x3f	; 63
    37e0:	f8 94       	cli
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	0f be       	out	0x3f, r0	; 63
    37e6:	cd bf       	out	0x3d, r28	; 61
    37e8:	ed 01       	movw	r28, r26
    37ea:	08 95       	ret

000037ec <_exit>:
    37ec:	f8 94       	cli

000037ee <__stop_program>:
    37ee:	ff cf       	rjmp	.-2      	; 0x37ee <__stop_program>
