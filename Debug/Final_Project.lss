
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000018e  00800060  00003cb2  00003d46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008001ee  008001ee  00003ed4  2**0
                  ALLOC
  3 .stab         000034d4  00000000  00000000  00003ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001937  00000000  00000000  000073a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_1>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_2>
       c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3f       	cpi	r26, 0xF6	; 246
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <main>
      8a:	0c 94 57 1e 	jmp	0x3cae	; 0x3cae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_INT0>:
void(*p2f_INT0)(void);
void(*p2f_INT1)(void);
void(*p2f_INT2)(void);

void init_INT0()
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT0);
      9a:	ab e5       	ldi	r26, 0x5B	; 91
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	eb e5       	ldi	r30, 0x5B	; 91
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	80 81       	ld	r24, Z
      a4:	80 64       	ori	r24, 0x40	; 64
      a6:	8c 93       	st	X, r24

	SET_BIT(MCUCR,ISC00);
      a8:	a5 e5       	ldi	r26, 0x55	; 85
      aa:	b0 e0       	ldi	r27, 0x00	; 0
      ac:	e5 e5       	ldi	r30, 0x55	; 85
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	81 60       	ori	r24, 0x01	; 1
      b4:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC01);
      b6:	a5 e5       	ldi	r26, 0x55	; 85
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e5 e5       	ldi	r30, 0x55	; 85
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	8d 7f       	andi	r24, 0xFD	; 253
      c2:	8c 93       	st	X, r24
}
      c4:	cf 91       	pop	r28
      c6:	df 91       	pop	r29
      c8:	08 95       	ret

000000ca <__vector_1>:
ISR(INT0_vect)
{
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	2f 93       	push	r18
      d6:	3f 93       	push	r19
      d8:	4f 93       	push	r20
      da:	5f 93       	push	r21
      dc:	6f 93       	push	r22
      de:	7f 93       	push	r23
      e0:	8f 93       	push	r24
      e2:	9f 93       	push	r25
      e4:	af 93       	push	r26
      e6:	bf 93       	push	r27
      e8:	ef 93       	push	r30
      ea:	ff 93       	push	r31
      ec:	df 93       	push	r29
      ee:	cf 93       	push	r28
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
	p2f_INT0();
      f4:	e0 91 f2 01 	lds	r30, 0x01F2
      f8:	f0 91 f3 01 	lds	r31, 0x01F3
      fc:	09 95       	icall
}
      fe:	cf 91       	pop	r28
     100:	df 91       	pop	r29
     102:	ff 91       	pop	r31
     104:	ef 91       	pop	r30
     106:	bf 91       	pop	r27
     108:	af 91       	pop	r26
     10a:	9f 91       	pop	r25
     10c:	8f 91       	pop	r24
     10e:	7f 91       	pop	r23
     110:	6f 91       	pop	r22
     112:	5f 91       	pop	r21
     114:	4f 91       	pop	r20
     116:	3f 91       	pop	r19
     118:	2f 91       	pop	r18
     11a:	0f 90       	pop	r0
     11c:	0f be       	out	0x3f, r0	; 63
     11e:	0f 90       	pop	r0
     120:	1f 90       	pop	r1
     122:	18 95       	reti

00000124 <__vector_2>:
ISR(INT1_vect)
{
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	2f 93       	push	r18
     130:	3f 93       	push	r19
     132:	4f 93       	push	r20
     134:	5f 93       	push	r21
     136:	6f 93       	push	r22
     138:	7f 93       	push	r23
     13a:	8f 93       	push	r24
     13c:	9f 93       	push	r25
     13e:	af 93       	push	r26
     140:	bf 93       	push	r27
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
	p2f_INT1();
     14e:	e0 91 ee 01 	lds	r30, 0x01EE
     152:	f0 91 ef 01 	lds	r31, 0x01EF
     156:	09 95       	icall
}
     158:	cf 91       	pop	r28
     15a:	df 91       	pop	r29
     15c:	ff 91       	pop	r31
     15e:	ef 91       	pop	r30
     160:	bf 91       	pop	r27
     162:	af 91       	pop	r26
     164:	9f 91       	pop	r25
     166:	8f 91       	pop	r24
     168:	7f 91       	pop	r23
     16a:	6f 91       	pop	r22
     16c:	5f 91       	pop	r21
     16e:	4f 91       	pop	r20
     170:	3f 91       	pop	r19
     172:	2f 91       	pop	r18
     174:	0f 90       	pop	r0
     176:	0f be       	out	0x3f, r0	; 63
     178:	0f 90       	pop	r0
     17a:	1f 90       	pop	r1
     17c:	18 95       	reti

0000017e <__vector_3>:
ISR(INT2_vect)
{
     17e:	1f 92       	push	r1
     180:	0f 92       	push	r0
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	0f 92       	push	r0
     186:	11 24       	eor	r1, r1
     188:	2f 93       	push	r18
     18a:	3f 93       	push	r19
     18c:	4f 93       	push	r20
     18e:	5f 93       	push	r21
     190:	6f 93       	push	r22
     192:	7f 93       	push	r23
     194:	8f 93       	push	r24
     196:	9f 93       	push	r25
     198:	af 93       	push	r26
     19a:	bf 93       	push	r27
     19c:	ef 93       	push	r30
     19e:	ff 93       	push	r31
     1a0:	df 93       	push	r29
     1a2:	cf 93       	push	r28
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
	p2f_INT2();
     1a8:	e0 91 f0 01 	lds	r30, 0x01F0
     1ac:	f0 91 f1 01 	lds	r31, 0x01F1
     1b0:	09 95       	icall
}
     1b2:	cf 91       	pop	r28
     1b4:	df 91       	pop	r29
     1b6:	ff 91       	pop	r31
     1b8:	ef 91       	pop	r30
     1ba:	bf 91       	pop	r27
     1bc:	af 91       	pop	r26
     1be:	9f 91       	pop	r25
     1c0:	8f 91       	pop	r24
     1c2:	7f 91       	pop	r23
     1c4:	6f 91       	pop	r22
     1c6:	5f 91       	pop	r21
     1c8:	4f 91       	pop	r20
     1ca:	3f 91       	pop	r19
     1cc:	2f 91       	pop	r18
     1ce:	0f 90       	pop	r0
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	0f 90       	pop	r0
     1d4:	1f 90       	pop	r1
     1d6:	18 95       	reti

000001d8 <setcallback_INT0>:

void setcallback_INT0(void(*p2func)(void))
{
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	00 d0       	rcall	.+0      	; 0x1de <setcallback_INT0+0x6>
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
     1e2:	9a 83       	std	Y+2, r25	; 0x02
     1e4:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT0=p2func;
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ea:	90 93 f3 01 	sts	0x01F3, r25
     1ee:	80 93 f2 01 	sts	0x01F2, r24
}
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <setcallback_INT1>:
void setcallback_INT1(void(*p2func)(void))
{
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <setcallback_INT1+0x6>
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
     206:	9a 83       	std	Y+2, r25	; 0x02
     208:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT1=p2func;
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	9a 81       	ldd	r25, Y+2	; 0x02
     20e:	90 93 ef 01 	sts	0x01EF, r25
     212:	80 93 ee 01 	sts	0x01EE, r24
}
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	cf 91       	pop	r28
     21c:	df 91       	pop	r29
     21e:	08 95       	ret

00000220 <setcallback_INT2>:
void setcallback_INT2(void(*p2func)(void))
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	00 d0       	rcall	.+0      	; 0x226 <setcallback_INT2+0x6>
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	9a 83       	std	Y+2, r25	; 0x02
     22c:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT2=p2func;
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	9a 81       	ldd	r25, Y+2	; 0x02
     232:	90 93 f1 01 	sts	0x01F1, r25
     236:	80 93 f0 01 	sts	0x01F0, r24
}
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	cf 91       	pop	r28
     240:	df 91       	pop	r29
     242:	08 95       	ret

00000244 <DIO_write>:
 */
#include "DIO.h"


void DIO_write(Channel_Type channel,State_Type state)
{
     244:	df 93       	push	r29
     246:	cf 93       	push	r28
     248:	00 d0       	rcall	.+0      	; 0x24a <DIO_write+0x6>
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
     24e:	89 83       	std	Y+1, r24	; 0x01
     250:	6a 83       	std	Y+2, r22	; 0x02
	if(channel>=0&&channel<=7)
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	88 30       	cpi	r24, 0x08	; 8
     256:	60 f5       	brcc	.+88     	; 0x2b0 <DIO_write+0x6c>
	{
		if(state==1)
     258:	8a 81       	ldd	r24, Y+2	; 0x02
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	a1 f4       	brne	.+40     	; 0x286 <DIO_write+0x42>
		{
			SET_BIT(PORTA,channel);
     25e:	ab e3       	ldi	r26, 0x3B	; 59
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	eb e3       	ldi	r30, 0x3B	; 59
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	48 2f       	mov	r20, r24
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	28 2f       	mov	r18, r24
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	02 2e       	mov	r0, r18
     276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_write+0x38>
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	0a 94       	dec	r0
     27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_write+0x34>
     280:	84 2b       	or	r24, r20
     282:	8c 93       	st	X, r24
     284:	bc c0       	rjmp	.+376    	; 0x3fe <DIO_write+0x1ba>
		}
		else
		{
			CLR_BIT(PORTA,channel);
     286:	ab e3       	ldi	r26, 0x3B	; 59
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	eb e3       	ldi	r30, 0x3B	; 59
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	48 2f       	mov	r20, r24
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	28 2f       	mov	r18, r24
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 2e       	mov	r0, r18
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_write+0x60>
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	0a 94       	dec	r0
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_write+0x5c>
     2a8:	80 95       	com	r24
     2aa:	84 23       	and	r24, r20
     2ac:	8c 93       	st	X, r24
     2ae:	a7 c0       	rjmp	.+334    	; 0x3fe <DIO_write+0x1ba>
		}
	}
	else if(channel>=8&&channel<=15)
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	88 30       	cpi	r24, 0x08	; 8
     2b4:	a8 f1       	brcs	.+106    	; 0x320 <DIO_write+0xdc>
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	80 31       	cpi	r24, 0x10	; 16
     2ba:	90 f5       	brcc	.+100    	; 0x320 <DIO_write+0xdc>
		{
			if(state==1)
     2bc:	8a 81       	ldd	r24, Y+2	; 0x02
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	b9 f4       	brne	.+46     	; 0x2f0 <DIO_write+0xac>
			{
				SET_BIT(PORTB,(channel-8));
     2c2:	a8 e3       	ldi	r26, 0x38	; 56
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	e8 e3       	ldi	r30, 0x38	; 56
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	48 2f       	mov	r20, r24
     2ce:	89 81       	ldd	r24, Y+1	; 0x01
     2d0:	88 2f       	mov	r24, r24
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	9c 01       	movw	r18, r24
     2d6:	28 50       	subi	r18, 0x08	; 8
     2d8:	30 40       	sbci	r19, 0x00	; 0
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	02 2e       	mov	r0, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_write+0xa2>
     2e2:	88 0f       	add	r24, r24
     2e4:	99 1f       	adc	r25, r25
     2e6:	0a 94       	dec	r0
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_write+0x9e>
     2ea:	84 2b       	or	r24, r20
     2ec:	8c 93       	st	X, r24
     2ee:	87 c0       	rjmp	.+270    	; 0x3fe <DIO_write+0x1ba>
			}
			else
			{
				CLR_BIT(PORTB,(channel-8));
     2f0:	a8 e3       	ldi	r26, 0x38	; 56
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	e8 e3       	ldi	r30, 0x38	; 56
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	48 2f       	mov	r20, r24
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	88 2f       	mov	r24, r24
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	9c 01       	movw	r18, r24
     304:	28 50       	subi	r18, 0x08	; 8
     306:	30 40       	sbci	r19, 0x00	; 0
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	02 2e       	mov	r0, r18
     30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_write+0xd0>
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	0a 94       	dec	r0
     316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_write+0xcc>
     318:	80 95       	com	r24
     31a:	84 23       	and	r24, r20
     31c:	8c 93       	st	X, r24
     31e:	6f c0       	rjmp	.+222    	; 0x3fe <DIO_write+0x1ba>
			}
		}
	else if(channel>=16&&channel<=23)
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	80 31       	cpi	r24, 0x10	; 16
     324:	a8 f1       	brcs	.+106    	; 0x390 <DIO_write+0x14c>
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	88 31       	cpi	r24, 0x18	; 24
     32a:	90 f5       	brcc	.+100    	; 0x390 <DIO_write+0x14c>
			{
				if(state==1)
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	81 30       	cpi	r24, 0x01	; 1
     330:	b9 f4       	brne	.+46     	; 0x360 <DIO_write+0x11c>
				{
					SET_BIT(PORTC,(channel-16));
     332:	a5 e3       	ldi	r26, 0x35	; 53
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	e5 e3       	ldi	r30, 0x35	; 53
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	48 2f       	mov	r20, r24
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	88 2f       	mov	r24, r24
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	9c 01       	movw	r18, r24
     346:	20 51       	subi	r18, 0x10	; 16
     348:	30 40       	sbci	r19, 0x00	; 0
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	02 2e       	mov	r0, r18
     350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_write+0x112>
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	0a 94       	dec	r0
     358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_write+0x10e>
     35a:	84 2b       	or	r24, r20
     35c:	8c 93       	st	X, r24
     35e:	4f c0       	rjmp	.+158    	; 0x3fe <DIO_write+0x1ba>
				}
				else
				{
					CLR_BIT(PORTC,(channel-16));
     360:	a5 e3       	ldi	r26, 0x35	; 53
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	e5 e3       	ldi	r30, 0x35	; 53
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	48 2f       	mov	r20, r24
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	88 2f       	mov	r24, r24
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	9c 01       	movw	r18, r24
     374:	20 51       	subi	r18, 0x10	; 16
     376:	30 40       	sbci	r19, 0x00	; 0
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	02 2e       	mov	r0, r18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_write+0x140>
     380:	88 0f       	add	r24, r24
     382:	99 1f       	adc	r25, r25
     384:	0a 94       	dec	r0
     386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_write+0x13c>
     388:	80 95       	com	r24
     38a:	84 23       	and	r24, r20
     38c:	8c 93       	st	X, r24
     38e:	37 c0       	rjmp	.+110    	; 0x3fe <DIO_write+0x1ba>
				}
			}
	else if(channel>=24&&channel<=31)
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	88 31       	cpi	r24, 0x18	; 24
     394:	a0 f1       	brcs	.+104    	; 0x3fe <DIO_write+0x1ba>
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	80 32       	cpi	r24, 0x20	; 32
     39a:	88 f5       	brcc	.+98     	; 0x3fe <DIO_write+0x1ba>
			{
				if(state==1)
     39c:	8a 81       	ldd	r24, Y+2	; 0x02
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	b9 f4       	brne	.+46     	; 0x3d0 <DIO_write+0x18c>
				{
					SET_BIT(PORTD,(channel-24));
     3a2:	a2 e3       	ldi	r26, 0x32	; 50
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	e2 e3       	ldi	r30, 0x32	; 50
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	48 2f       	mov	r20, r24
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	88 2f       	mov	r24, r24
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	9c 01       	movw	r18, r24
     3b6:	28 51       	subi	r18, 0x18	; 24
     3b8:	30 40       	sbci	r19, 0x00	; 0
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	02 2e       	mov	r0, r18
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_write+0x182>
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	0a 94       	dec	r0
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_write+0x17e>
     3ca:	84 2b       	or	r24, r20
     3cc:	8c 93       	st	X, r24
     3ce:	17 c0       	rjmp	.+46     	; 0x3fe <DIO_write+0x1ba>
				}
				else
				{
					CLR_BIT(PORTD,(channel-24));
     3d0:	a2 e3       	ldi	r26, 0x32	; 50
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e2 e3       	ldi	r30, 0x32	; 50
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	48 2f       	mov	r20, r24
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	88 2f       	mov	r24, r24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	9c 01       	movw	r18, r24
     3e4:	28 51       	subi	r18, 0x18	; 24
     3e6:	30 40       	sbci	r19, 0x00	; 0
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	02 2e       	mov	r0, r18
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_write+0x1b0>
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	0a 94       	dec	r0
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_write+0x1ac>
     3f8:	80 95       	com	r24
     3fa:	84 23       	and	r24, r20
     3fc:	8c 93       	st	X, r24
				}
			}
}
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	cf 91       	pop	r28
     404:	df 91       	pop	r29
     406:	08 95       	ret

00000408 <DIO_read>:

int DIO_read(Channel_Type channel)
{
     408:	df 93       	push	r29
     40a:	cf 93       	push	r28
     40c:	00 d0       	rcall	.+0      	; 0x40e <DIO_read+0x6>
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	8a 83       	std	Y+2, r24	; 0x02
	State_Type state =0;
     414:	19 82       	std	Y+1, r1	; 0x01
	if(channel>=0&&channel<=7)
     416:	8a 81       	ldd	r24, Y+2	; 0x02
     418:	88 30       	cpi	r24, 0x08	; 8
     41a:	90 f4       	brcc	.+36     	; 0x440 <DIO_read+0x38>
	{
		state=GET_BIT(PINA,channel);
     41c:	e9 e3       	ldi	r30, 0x39	; 57
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	28 2f       	mov	r18, r24
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	8a 81       	ldd	r24, Y+2	; 0x02
     428:	88 2f       	mov	r24, r24
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	a9 01       	movw	r20, r18
     42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_read+0x2c>
     430:	55 95       	asr	r21
     432:	47 95       	ror	r20
     434:	8a 95       	dec	r24
     436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_read+0x28>
     438:	ca 01       	movw	r24, r20
     43a:	81 70       	andi	r24, 0x01	; 1
     43c:	89 83       	std	Y+1, r24	; 0x01
     43e:	4a c0       	rjmp	.+148    	; 0x4d4 <DIO_read+0xcc>

	}
	else if(channel>=8&&channel<=15)
     440:	8a 81       	ldd	r24, Y+2	; 0x02
     442:	88 30       	cpi	r24, 0x08	; 8
     444:	b0 f0       	brcs	.+44     	; 0x472 <DIO_read+0x6a>
     446:	8a 81       	ldd	r24, Y+2	; 0x02
     448:	80 31       	cpi	r24, 0x10	; 16
     44a:	98 f4       	brcc	.+38     	; 0x472 <DIO_read+0x6a>
	{
		state=GET_BIT(PINB,(channel-8));
     44c:	e6 e3       	ldi	r30, 0x36	; 54
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	28 2f       	mov	r18, r24
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	88 2f       	mov	r24, r24
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	08 97       	sbiw	r24, 0x08	; 8
     45e:	a9 01       	movw	r20, r18
     460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_read+0x5e>
     462:	55 95       	asr	r21
     464:	47 95       	ror	r20
     466:	8a 95       	dec	r24
     468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_read+0x5a>
     46a:	ca 01       	movw	r24, r20
     46c:	81 70       	andi	r24, 0x01	; 1
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	31 c0       	rjmp	.+98     	; 0x4d4 <DIO_read+0xcc>

	}
	else if(channel>=16&&channel<=23)
     472:	8a 81       	ldd	r24, Y+2	; 0x02
     474:	80 31       	cpi	r24, 0x10	; 16
     476:	b0 f0       	brcs	.+44     	; 0x4a4 <DIO_read+0x9c>
     478:	8a 81       	ldd	r24, Y+2	; 0x02
     47a:	88 31       	cpi	r24, 0x18	; 24
     47c:	98 f4       	brcc	.+38     	; 0x4a4 <DIO_read+0x9c>
	{
			state=GET_BIT(PINC,(channel-16));
     47e:	e3 e3       	ldi	r30, 0x33	; 51
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	28 2f       	mov	r18, r24
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	88 2f       	mov	r24, r24
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	40 97       	sbiw	r24, 0x10	; 16
     490:	a9 01       	movw	r20, r18
     492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_read+0x90>
     494:	55 95       	asr	r21
     496:	47 95       	ror	r20
     498:	8a 95       	dec	r24
     49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_read+0x8c>
     49c:	ca 01       	movw	r24, r20
     49e:	81 70       	andi	r24, 0x01	; 1
     4a0:	89 83       	std	Y+1, r24	; 0x01
     4a2:	18 c0       	rjmp	.+48     	; 0x4d4 <DIO_read+0xcc>
	}
	else if(channel>=24&&channel<=31)
     4a4:	8a 81       	ldd	r24, Y+2	; 0x02
     4a6:	88 31       	cpi	r24, 0x18	; 24
     4a8:	a8 f0       	brcs	.+42     	; 0x4d4 <DIO_read+0xcc>
     4aa:	8a 81       	ldd	r24, Y+2	; 0x02
     4ac:	80 32       	cpi	r24, 0x20	; 32
     4ae:	90 f4       	brcc	.+36     	; 0x4d4 <DIO_read+0xcc>
	{
			state=GET_BIT(PIND,(channel-24));
     4b0:	e0 e3       	ldi	r30, 0x30	; 48
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	28 2f       	mov	r18, r24
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	8a 81       	ldd	r24, Y+2	; 0x02
     4bc:	88 2f       	mov	r24, r24
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	48 97       	sbiw	r24, 0x18	; 24
     4c2:	a9 01       	movw	r20, r18
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_read+0xc2>
     4c6:	55 95       	asr	r21
     4c8:	47 95       	ror	r20
     4ca:	8a 95       	dec	r24
     4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_read+0xbe>
     4ce:	ca 01       	movw	r24, r20
     4d0:	81 70       	andi	r24, 0x01	; 1
     4d2:	89 83       	std	Y+1, r24	; 0x01

	}
	return state;
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	88 2f       	mov	r24, r24
     4d8:	90 e0       	ldi	r25, 0x00	; 0
}
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	cf 91       	pop	r28
     4e0:	df 91       	pop	r29
     4e2:	08 95       	ret

000004e4 <DIO_init>:
		{PORT_C, PIN_6,OUTPUT},
		{PORT_C, PIN_7,OUTPUT}
};

void DIO_init(void)
{
     4e4:	df 93       	push	r29
     4e6:	cf 93       	push	r28
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <DIO_init+0x6>
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <DIO_init+0x8>
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
	int i=0;
     4f0:	1a 82       	std	Y+2, r1	; 0x02
     4f2:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<sizeof(pin_config)/sizeof(pin_config[0]);i++)
     4f4:	1a 82       	std	Y+2, r1	; 0x02
     4f6:	19 82       	std	Y+1, r1	; 0x01
     4f8:	58 c1       	rjmp	.+688    	; 0x7aa <DIO_init+0x2c6>
	{
		switch (pin_config[i].PORT){
     4fa:	29 81       	ldd	r18, Y+1	; 0x01
     4fc:	3a 81       	ldd	r19, Y+2	; 0x02
     4fe:	c9 01       	movw	r24, r18
     500:	88 0f       	add	r24, r24
     502:	99 1f       	adc	r25, r25
     504:	82 0f       	add	r24, r18
     506:	93 1f       	adc	r25, r19
     508:	fc 01       	movw	r30, r24
     50a:	e0 5a       	subi	r30, 0xA0	; 160
     50c:	ff 4f       	sbci	r31, 0xFF	; 255
     50e:	80 81       	ld	r24, Z
     510:	28 2f       	mov	r18, r24
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	3c 83       	std	Y+4, r19	; 0x04
     516:	2b 83       	std	Y+3, r18	; 0x03
     518:	8b 81       	ldd	r24, Y+3	; 0x03
     51a:	9c 81       	ldd	r25, Y+4	; 0x04
     51c:	81 30       	cpi	r24, 0x01	; 1
     51e:	91 05       	cpc	r25, r1
     520:	09 f4       	brne	.+2      	; 0x524 <DIO_init+0x40>
     522:	61 c0       	rjmp	.+194    	; 0x5e6 <DIO_init+0x102>
     524:	2b 81       	ldd	r18, Y+3	; 0x03
     526:	3c 81       	ldd	r19, Y+4	; 0x04
     528:	22 30       	cpi	r18, 0x02	; 2
     52a:	31 05       	cpc	r19, r1
     52c:	2c f4       	brge	.+10     	; 0x538 <DIO_init+0x54>
     52e:	8b 81       	ldd	r24, Y+3	; 0x03
     530:	9c 81       	ldd	r25, Y+4	; 0x04
     532:	00 97       	sbiw	r24, 0x00	; 0
     534:	71 f0       	breq	.+28     	; 0x552 <DIO_init+0x6e>
     536:	34 c1       	rjmp	.+616    	; 0x7a0 <DIO_init+0x2bc>
     538:	2b 81       	ldd	r18, Y+3	; 0x03
     53a:	3c 81       	ldd	r19, Y+4	; 0x04
     53c:	22 30       	cpi	r18, 0x02	; 2
     53e:	31 05       	cpc	r19, r1
     540:	09 f4       	brne	.+2      	; 0x544 <DIO_init+0x60>
     542:	9b c0       	rjmp	.+310    	; 0x67a <DIO_init+0x196>
     544:	8b 81       	ldd	r24, Y+3	; 0x03
     546:	9c 81       	ldd	r25, Y+4	; 0x04
     548:	83 30       	cpi	r24, 0x03	; 3
     54a:	91 05       	cpc	r25, r1
     54c:	09 f4       	brne	.+2      	; 0x550 <DIO_init+0x6c>
     54e:	df c0       	rjmp	.+446    	; 0x70e <DIO_init+0x22a>
     550:	27 c1       	rjmp	.+590    	; 0x7a0 <DIO_init+0x2bc>
		case PORT_A:
			if(pin_config[i].IO==OUTPUT)
     552:	29 81       	ldd	r18, Y+1	; 0x01
     554:	3a 81       	ldd	r19, Y+2	; 0x02
     556:	c9 01       	movw	r24, r18
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	82 0f       	add	r24, r18
     55e:	93 1f       	adc	r25, r19
     560:	fc 01       	movw	r30, r24
     562:	ee 59       	subi	r30, 0x9E	; 158
     564:	ff 4f       	sbci	r31, 0xFF	; 255
     566:	80 81       	ld	r24, Z
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	f1 f4       	brne	.+60     	; 0x5a8 <DIO_init+0xc4>
			{
				SET_BIT(DDRA,pin_config[i].PIN);
     56c:	aa e3       	ldi	r26, 0x3A	; 58
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	ea e3       	ldi	r30, 0x3A	; 58
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	48 2f       	mov	r20, r24
     578:	29 81       	ldd	r18, Y+1	; 0x01
     57a:	3a 81       	ldd	r19, Y+2	; 0x02
     57c:	c9 01       	movw	r24, r18
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	82 0f       	add	r24, r18
     584:	93 1f       	adc	r25, r19
     586:	fc 01       	movw	r30, r24
     588:	ef 59       	subi	r30, 0x9F	; 159
     58a:	ff 4f       	sbci	r31, 0xFF	; 255
     58c:	80 81       	ld	r24, Z
     58e:	28 2f       	mov	r18, r24
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	02 2e       	mov	r0, r18
     598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_init+0xba>
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	0a 94       	dec	r0
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_init+0xb6>
     5a2:	84 2b       	or	r24, r20
     5a4:	8c 93       	st	X, r24
     5a6:	fc c0       	rjmp	.+504    	; 0x7a0 <DIO_init+0x2bc>
			}
			else
			{
				CLR_BIT(DDRA,pin_config[i].PIN);
     5a8:	aa e3       	ldi	r26, 0x3A	; 58
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	ea e3       	ldi	r30, 0x3A	; 58
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	48 2f       	mov	r20, r24
     5b4:	29 81       	ldd	r18, Y+1	; 0x01
     5b6:	3a 81       	ldd	r19, Y+2	; 0x02
     5b8:	c9 01       	movw	r24, r18
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	82 0f       	add	r24, r18
     5c0:	93 1f       	adc	r25, r19
     5c2:	fc 01       	movw	r30, r24
     5c4:	ef 59       	subi	r30, 0x9F	; 159
     5c6:	ff 4f       	sbci	r31, 0xFF	; 255
     5c8:	80 81       	ld	r24, Z
     5ca:	28 2f       	mov	r18, r24
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	02 2e       	mov	r0, r18
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_init+0xf6>
     5d6:	88 0f       	add	r24, r24
     5d8:	99 1f       	adc	r25, r25
     5da:	0a 94       	dec	r0
     5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_init+0xf2>
     5de:	80 95       	com	r24
     5e0:	84 23       	and	r24, r20
     5e2:	8c 93       	st	X, r24
     5e4:	dd c0       	rjmp	.+442    	; 0x7a0 <DIO_init+0x2bc>
			}
			break;
		case PORT_B:
					if(pin_config[i].IO==OUTPUT)
     5e6:	29 81       	ldd	r18, Y+1	; 0x01
     5e8:	3a 81       	ldd	r19, Y+2	; 0x02
     5ea:	c9 01       	movw	r24, r18
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	82 0f       	add	r24, r18
     5f2:	93 1f       	adc	r25, r19
     5f4:	fc 01       	movw	r30, r24
     5f6:	ee 59       	subi	r30, 0x9E	; 158
     5f8:	ff 4f       	sbci	r31, 0xFF	; 255
     5fa:	80 81       	ld	r24, Z
     5fc:	81 30       	cpi	r24, 0x01	; 1
     5fe:	f1 f4       	brne	.+60     	; 0x63c <DIO_init+0x158>
					{
						SET_BIT(DDRB,pin_config[i].PIN);
     600:	a7 e3       	ldi	r26, 0x37	; 55
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	e7 e3       	ldi	r30, 0x37	; 55
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	48 2f       	mov	r20, r24
     60c:	29 81       	ldd	r18, Y+1	; 0x01
     60e:	3a 81       	ldd	r19, Y+2	; 0x02
     610:	c9 01       	movw	r24, r18
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	82 0f       	add	r24, r18
     618:	93 1f       	adc	r25, r19
     61a:	fc 01       	movw	r30, r24
     61c:	ef 59       	subi	r30, 0x9F	; 159
     61e:	ff 4f       	sbci	r31, 0xFF	; 255
     620:	80 81       	ld	r24, Z
     622:	28 2f       	mov	r18, r24
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	02 2e       	mov	r0, r18
     62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_init+0x14e>
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	0a 94       	dec	r0
     634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_init+0x14a>
     636:	84 2b       	or	r24, r20
     638:	8c 93       	st	X, r24
     63a:	b2 c0       	rjmp	.+356    	; 0x7a0 <DIO_init+0x2bc>
					}
					else
					{
						CLR_BIT(DDRB,pin_config[i].PIN);
     63c:	a7 e3       	ldi	r26, 0x37	; 55
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	e7 e3       	ldi	r30, 0x37	; 55
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	80 81       	ld	r24, Z
     646:	48 2f       	mov	r20, r24
     648:	29 81       	ldd	r18, Y+1	; 0x01
     64a:	3a 81       	ldd	r19, Y+2	; 0x02
     64c:	c9 01       	movw	r24, r18
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	82 0f       	add	r24, r18
     654:	93 1f       	adc	r25, r19
     656:	fc 01       	movw	r30, r24
     658:	ef 59       	subi	r30, 0x9F	; 159
     65a:	ff 4f       	sbci	r31, 0xFF	; 255
     65c:	80 81       	ld	r24, Z
     65e:	28 2f       	mov	r18, r24
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	02 2e       	mov	r0, r18
     668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_init+0x18a>
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	0a 94       	dec	r0
     670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_init+0x186>
     672:	80 95       	com	r24
     674:	84 23       	and	r24, r20
     676:	8c 93       	st	X, r24
     678:	93 c0       	rjmp	.+294    	; 0x7a0 <DIO_init+0x2bc>
					}
			break;

		case PORT_C:
					if(pin_config[i].IO==OUTPUT)
     67a:	29 81       	ldd	r18, Y+1	; 0x01
     67c:	3a 81       	ldd	r19, Y+2	; 0x02
     67e:	c9 01       	movw	r24, r18
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	82 0f       	add	r24, r18
     686:	93 1f       	adc	r25, r19
     688:	fc 01       	movw	r30, r24
     68a:	ee 59       	subi	r30, 0x9E	; 158
     68c:	ff 4f       	sbci	r31, 0xFF	; 255
     68e:	80 81       	ld	r24, Z
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	f1 f4       	brne	.+60     	; 0x6d0 <DIO_init+0x1ec>
					{
						SET_BIT(DDRC,pin_config[i].PIN);
     694:	a4 e3       	ldi	r26, 0x34	; 52
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	e4 e3       	ldi	r30, 0x34	; 52
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	48 2f       	mov	r20, r24
     6a0:	29 81       	ldd	r18, Y+1	; 0x01
     6a2:	3a 81       	ldd	r19, Y+2	; 0x02
     6a4:	c9 01       	movw	r24, r18
     6a6:	88 0f       	add	r24, r24
     6a8:	99 1f       	adc	r25, r25
     6aa:	82 0f       	add	r24, r18
     6ac:	93 1f       	adc	r25, r19
     6ae:	fc 01       	movw	r30, r24
     6b0:	ef 59       	subi	r30, 0x9F	; 159
     6b2:	ff 4f       	sbci	r31, 0xFF	; 255
     6b4:	80 81       	ld	r24, Z
     6b6:	28 2f       	mov	r18, r24
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	02 2e       	mov	r0, r18
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_init+0x1e2>
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	0a 94       	dec	r0
     6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_init+0x1de>
     6ca:	84 2b       	or	r24, r20
     6cc:	8c 93       	st	X, r24
     6ce:	68 c0       	rjmp	.+208    	; 0x7a0 <DIO_init+0x2bc>
					}
					else
					{
						CLR_BIT(DDRC,pin_config[i].PIN);
     6d0:	a4 e3       	ldi	r26, 0x34	; 52
     6d2:	b0 e0       	ldi	r27, 0x00	; 0
     6d4:	e4 e3       	ldi	r30, 0x34	; 52
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	80 81       	ld	r24, Z
     6da:	48 2f       	mov	r20, r24
     6dc:	29 81       	ldd	r18, Y+1	; 0x01
     6de:	3a 81       	ldd	r19, Y+2	; 0x02
     6e0:	c9 01       	movw	r24, r18
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	82 0f       	add	r24, r18
     6e8:	93 1f       	adc	r25, r19
     6ea:	fc 01       	movw	r30, r24
     6ec:	ef 59       	subi	r30, 0x9F	; 159
     6ee:	ff 4f       	sbci	r31, 0xFF	; 255
     6f0:	80 81       	ld	r24, Z
     6f2:	28 2f       	mov	r18, r24
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	02 2e       	mov	r0, r18
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_init+0x21e>
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	0a 94       	dec	r0
     704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_init+0x21a>
     706:	80 95       	com	r24
     708:	84 23       	and	r24, r20
     70a:	8c 93       	st	X, r24
     70c:	49 c0       	rjmp	.+146    	; 0x7a0 <DIO_init+0x2bc>
					}
			break;
		case PORT_D:
					if(pin_config[i].IO==OUTPUT)
     70e:	29 81       	ldd	r18, Y+1	; 0x01
     710:	3a 81       	ldd	r19, Y+2	; 0x02
     712:	c9 01       	movw	r24, r18
     714:	88 0f       	add	r24, r24
     716:	99 1f       	adc	r25, r25
     718:	82 0f       	add	r24, r18
     71a:	93 1f       	adc	r25, r19
     71c:	fc 01       	movw	r30, r24
     71e:	ee 59       	subi	r30, 0x9E	; 158
     720:	ff 4f       	sbci	r31, 0xFF	; 255
     722:	80 81       	ld	r24, Z
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	f1 f4       	brne	.+60     	; 0x764 <DIO_init+0x280>
					{
						SET_BIT(DDRD,pin_config[i].PIN);
     728:	a1 e3       	ldi	r26, 0x31	; 49
     72a:	b0 e0       	ldi	r27, 0x00	; 0
     72c:	e1 e3       	ldi	r30, 0x31	; 49
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	48 2f       	mov	r20, r24
     734:	29 81       	ldd	r18, Y+1	; 0x01
     736:	3a 81       	ldd	r19, Y+2	; 0x02
     738:	c9 01       	movw	r24, r18
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	82 0f       	add	r24, r18
     740:	93 1f       	adc	r25, r19
     742:	fc 01       	movw	r30, r24
     744:	ef 59       	subi	r30, 0x9F	; 159
     746:	ff 4f       	sbci	r31, 0xFF	; 255
     748:	80 81       	ld	r24, Z
     74a:	28 2f       	mov	r18, r24
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	02 2e       	mov	r0, r18
     754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_init+0x276>
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	0a 94       	dec	r0
     75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_init+0x272>
     75e:	84 2b       	or	r24, r20
     760:	8c 93       	st	X, r24
     762:	1e c0       	rjmp	.+60     	; 0x7a0 <DIO_init+0x2bc>
					}
					else
					{
						CLR_BIT(DDRD,pin_config[i].PIN);
     764:	a1 e3       	ldi	r26, 0x31	; 49
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	e1 e3       	ldi	r30, 0x31	; 49
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	48 2f       	mov	r20, r24
     770:	29 81       	ldd	r18, Y+1	; 0x01
     772:	3a 81       	ldd	r19, Y+2	; 0x02
     774:	c9 01       	movw	r24, r18
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
     77a:	82 0f       	add	r24, r18
     77c:	93 1f       	adc	r25, r19
     77e:	fc 01       	movw	r30, r24
     780:	ef 59       	subi	r30, 0x9F	; 159
     782:	ff 4f       	sbci	r31, 0xFF	; 255
     784:	80 81       	ld	r24, Z
     786:	28 2f       	mov	r18, r24
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	02 2e       	mov	r0, r18
     790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_init+0x2b2>
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	0a 94       	dec	r0
     798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_init+0x2ae>
     79a:	80 95       	com	r24
     79c:	84 23       	and	r24, r20
     79e:	8c 93       	st	X, r24
};

void DIO_init(void)
{
	int i=0;
	for(i=0;i<sizeof(pin_config)/sizeof(pin_config[0]);i++)
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	9a 81       	ldd	r25, Y+2	; 0x02
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	9a 83       	std	Y+2, r25	; 0x02
     7a8:	89 83       	std	Y+1, r24	; 0x01
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	9a 81       	ldd	r25, Y+2	; 0x02
     7ae:	8d 31       	cpi	r24, 0x1D	; 29
     7b0:	91 05       	cpc	r25, r1
     7b2:	08 f4       	brcc	.+2      	; 0x7b6 <DIO_init+0x2d2>
     7b4:	a2 ce       	rjmp	.-700    	; 0x4fa <DIO_init+0x16>



		}
	}
}
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	cf 91       	pop	r28
     7c0:	df 91       	pop	r29
     7c2:	08 95       	ret

000007c4 <ADC_init>:
 *  Created on: Oct 2, 2021
 *      Author: HP
 */
#include"ADC.h"

void ADC_init(){
     7c4:	df 93       	push	r29
     7c6:	cf 93       	push	r28
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62

#if(ADC_START == ENABLE)
	SET_BIT(ADCSRA,ADEN);
     7cc:	a6 e2       	ldi	r26, 0x26	; 38
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
     7d0:	e6 e2       	ldi	r30, 0x26	; 38
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	80 81       	ld	r24, Z
     7d6:	80 68       	ori	r24, 0x80	; 128
     7d8:	8c 93       	st	X, r24
#else
	CLR_BIT(ADCSRA,ADEN);
#endif

#if ADSC_START == ENABLE
	SET_BIT(ADCSRA,ADSC);
     7da:	a6 e2       	ldi	r26, 0x26	; 38
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e6 e2       	ldi	r30, 0x26	; 38
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	80 64       	ori	r24, 0x40	; 64
     7e6:	8c 93       	st	X, r24


#if(ADC_INTERRUPT_ENABLE == ENABLE)
	SET_BIT(ADCSRA,ADIE);
#else
	CLR_BIT(ADCSRA,ADIE);
     7e8:	a6 e2       	ldi	r26, 0x26	; 38
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	e6 e2       	ldi	r30, 0x26	; 38
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	87 7f       	andi	r24, 0xF7	; 247
     7f4:	8c 93       	st	X, r24
#endif

#if(ADC_LeftAdjust == ENABLE)
	SET_BIT(ADMUX,ADLAR);
     7f6:	a7 e2       	ldi	r26, 0x27	; 39
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	e7 e2       	ldi	r30, 0x27	; 39
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	80 62       	ori	r24, 0x20	; 32
     802:	8c 93       	st	X, r24
    CLR_BIT(ADMUX,REFS1);
	}

#elif(ADC_MODE == ADC_AVCC_VOLTAGE)
	{
		SET_BIT(ADMUX,REFS0);
     804:	a7 e2       	ldi	r26, 0x27	; 39
     806:	b0 e0       	ldi	r27, 0x00	; 0
     808:	e7 e2       	ldi	r30, 0x27	; 39
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	80 64       	ori	r24, 0x40	; 64
     810:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,REFS1);
     812:	a7 e2       	ldi	r26, 0x27	; 39
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	e7 e2       	ldi	r30, 0x27	; 39
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	80 81       	ld	r24, Z
     81c:	8f 77       	andi	r24, 0x7F	; 127
     81e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
	}

#elif(FREQ_PRESCALE == PRESCALE_64)
	{
		CLR_BIT(ADCSRA,ADPS0);
     820:	a6 e2       	ldi	r26, 0x26	; 38
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	e6 e2       	ldi	r30, 0x26	; 38
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	8e 7f       	andi	r24, 0xFE	; 254
     82c:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS1);
     82e:	a6 e2       	ldi	r26, 0x26	; 38
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	e6 e2       	ldi	r30, 0x26	; 38
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 81       	ld	r24, Z
     838:	82 60       	ori	r24, 0x02	; 2
     83a:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS2);
     83c:	a6 e2       	ldi	r26, 0x26	; 38
     83e:	b0 e0       	ldi	r27, 0x00	; 0
     840:	e6 e2       	ldi	r30, 0x26	; 38
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	80 81       	ld	r24, Z
     846:	84 60       	ori	r24, 0x04	; 4
     848:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADPS0);
		SET_BIT(ADCSRA,ADPS1);
		SET_BIT(ADCSRA,ADPS2);
	}
#endif
}
     84a:	cf 91       	pop	r28
     84c:	df 91       	pop	r29
     84e:	08 95       	ret

00000850 <ADC_read>:

uint16 ADC_read(uint8 Channel){
     850:	df 93       	push	r29
     852:	cf 93       	push	r28
     854:	0f 92       	push	r0
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = (ADMUX & 0b11100000) | Channel;
     85c:	a7 e2       	ldi	r26, 0x27	; 39
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	e7 e2       	ldi	r30, 0x27	; 39
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	98 2f       	mov	r25, r24
     868:	90 7e       	andi	r25, 0xE0	; 224
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	89 2b       	or	r24, r25
     86e:	8c 93       	st	X, r24

	SET_BIT(ADCSRA,ADSC); //Start Conversion
     870:	a6 e2       	ldi	r26, 0x26	; 38
     872:	b0 e0       	ldi	r27, 0x00	; 0
     874:	e6 e2       	ldi	r30, 0x26	; 38
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	80 64       	ori	r24, 0x40	; 64
     87c:	8c 93       	st	X, r24
	while(GET_BIT(ADCSRA,ADIF)==0); //Wait for Finishing Conversion
     87e:	e6 e2       	ldi	r30, 0x26	; 38
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	82 95       	swap	r24
     886:	8f 70       	andi	r24, 0x0F	; 15
     888:	88 2f       	mov	r24, r24
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	81 70       	andi	r24, 0x01	; 1
     88e:	90 70       	andi	r25, 0x00	; 0
     890:	00 97       	sbiw	r24, 0x00	; 0
     892:	a9 f3       	breq	.-22     	; 0x87e <__stack+0x1f>
	SET_BIT(ADCSRA,ADIF);
     894:	a6 e2       	ldi	r26, 0x26	; 38
     896:	b0 e0       	ldi	r27, 0x00	; 0
     898:	e6 e2       	ldi	r30, 0x26	; 38
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
     89e:	80 61       	ori	r24, 0x10	; 16
     8a0:	8c 93       	st	X, r24
	return ADC;
     8a2:	e4 e2       	ldi	r30, 0x24	; 36
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
}
     8aa:	0f 90       	pop	r0
     8ac:	cf 91       	pop	r28
     8ae:	df 91       	pop	r29
     8b0:	08 95       	ret

000008b2 <steppermotor>:
 *  Created on: Sep 25, 2021
 *      Author: Ali Ehab
 */
#include "steppermotor.h"
void steppermotor(void)
{
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	df 93       	push	r29
     8b8:	cf 93       	push	r28
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	c0 56       	subi	r28, 0x60	; 96
     8c0:	d0 40       	sbci	r29, 0x00	; 0
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
	DIO_write(stepper_org_1,HIGH);
     8cc:	83 e1       	ldi	r24, 0x13	; 19
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(stepper_yel_2,LOW);
     8d4:	84 e1       	ldi	r24, 0x14	; 20
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(stepper_pink_3,LOW);
     8dc:	85 e1       	ldi	r24, 0x15	; 21
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(stepper_blu_4,LOW);
     8e4:	86 e1       	ldi	r24, 0x16	; 22
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
     8ec:	fe 01       	movw	r30, r28
     8ee:	e3 5a       	subi	r30, 0xA3	; 163
     8f0:	ff 4f       	sbci	r31, 0xFF	; 255
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	a8 ec       	ldi	r26, 0xC8	; 200
     8f8:	b2 e4       	ldi	r27, 0x42	; 66
     8fa:	80 83       	st	Z, r24
     8fc:	91 83       	std	Z+1, r25	; 0x01
     8fe:	a2 83       	std	Z+2, r26	; 0x02
     900:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     902:	8e 01       	movw	r16, r28
     904:	07 5a       	subi	r16, 0xA7	; 167
     906:	1f 4f       	sbci	r17, 0xFF	; 255
     908:	fe 01       	movw	r30, r28
     90a:	e3 5a       	subi	r30, 0xA3	; 163
     90c:	ff 4f       	sbci	r31, 0xFF	; 255
     90e:	60 81       	ld	r22, Z
     910:	71 81       	ldd	r23, Z+1	; 0x01
     912:	82 81       	ldd	r24, Z+2	; 0x02
     914:	93 81       	ldd	r25, Z+3	; 0x03
     916:	2b ea       	ldi	r18, 0xAB	; 171
     918:	3a ea       	ldi	r19, 0xAA	; 170
     91a:	4a ea       	ldi	r20, 0xAA	; 170
     91c:	50 e4       	ldi	r21, 0x40	; 64
     91e:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
     922:	dc 01       	movw	r26, r24
     924:	cb 01       	movw	r24, r22
     926:	f8 01       	movw	r30, r16
     928:	80 83       	st	Z, r24
     92a:	91 83       	std	Z+1, r25	; 0x01
     92c:	a2 83       	std	Z+2, r26	; 0x02
     92e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     930:	fe 01       	movw	r30, r28
     932:	e7 5a       	subi	r30, 0xA7	; 167
     934:	ff 4f       	sbci	r31, 0xFF	; 255
     936:	60 81       	ld	r22, Z
     938:	71 81       	ldd	r23, Z+1	; 0x01
     93a:	82 81       	ldd	r24, Z+2	; 0x02
     93c:	93 81       	ldd	r25, Z+3	; 0x03
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e8       	ldi	r20, 0x80	; 128
     944:	5f e3       	ldi	r21, 0x3F	; 63
     946:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
     94a:	88 23       	and	r24, r24
     94c:	34 f4       	brge	.+12     	; 0x95a <steppermotor+0xa8>
		__ticks = 1;
     94e:	fe 01       	movw	r30, r28
     950:	e8 5a       	subi	r30, 0xA8	; 168
     952:	ff 4f       	sbci	r31, 0xFF	; 255
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 83       	st	Z, r24
     958:	e0 c0       	rjmp	.+448    	; 0xb1a <steppermotor+0x268>
	else if (__tmp > 255)
     95a:	fe 01       	movw	r30, r28
     95c:	e7 5a       	subi	r30, 0xA7	; 167
     95e:	ff 4f       	sbci	r31, 0xFF	; 255
     960:	60 81       	ld	r22, Z
     962:	71 81       	ldd	r23, Z+1	; 0x01
     964:	82 81       	ldd	r24, Z+2	; 0x02
     966:	93 81       	ldd	r25, Z+3	; 0x03
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	4f e7       	ldi	r20, 0x7F	; 127
     96e:	53 e4       	ldi	r21, 0x43	; 67
     970:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
     974:	18 16       	cp	r1, r24
     976:	0c f0       	brlt	.+2      	; 0x97a <steppermotor+0xc8>
     978:	c0 c0       	rjmp	.+384    	; 0xafa <steppermotor+0x248>
	{
		_delay_ms(__us / 1000.0);
     97a:	fe 01       	movw	r30, r28
     97c:	e3 5a       	subi	r30, 0xA3	; 163
     97e:	ff 4f       	sbci	r31, 0xFF	; 255
     980:	60 81       	ld	r22, Z
     982:	71 81       	ldd	r23, Z+1	; 0x01
     984:	82 81       	ldd	r24, Z+2	; 0x02
     986:	93 81       	ldd	r25, Z+3	; 0x03
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	4a e7       	ldi	r20, 0x7A	; 122
     98e:	54 e4       	ldi	r21, 0x44	; 68
     990:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
     994:	dc 01       	movw	r26, r24
     996:	cb 01       	movw	r24, r22
     998:	fe 01       	movw	r30, r28
     99a:	ec 5a       	subi	r30, 0xAC	; 172
     99c:	ff 4f       	sbci	r31, 0xFF	; 255
     99e:	80 83       	st	Z, r24
     9a0:	91 83       	std	Z+1, r25	; 0x01
     9a2:	a2 83       	std	Z+2, r26	; 0x02
     9a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9a6:	8e 01       	movw	r16, r28
     9a8:	00 5b       	subi	r16, 0xB0	; 176
     9aa:	1f 4f       	sbci	r17, 0xFF	; 255
     9ac:	fe 01       	movw	r30, r28
     9ae:	ec 5a       	subi	r30, 0xAC	; 172
     9b0:	ff 4f       	sbci	r31, 0xFF	; 255
     9b2:	60 81       	ld	r22, Z
     9b4:	71 81       	ldd	r23, Z+1	; 0x01
     9b6:	82 81       	ldd	r24, Z+2	; 0x02
     9b8:	93 81       	ldd	r25, Z+3	; 0x03
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	4a e7       	ldi	r20, 0x7A	; 122
     9c0:	55 e4       	ldi	r21, 0x45	; 69
     9c2:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
     9c6:	dc 01       	movw	r26, r24
     9c8:	cb 01       	movw	r24, r22
     9ca:	f8 01       	movw	r30, r16
     9cc:	80 83       	st	Z, r24
     9ce:	91 83       	std	Z+1, r25	; 0x01
     9d0:	a2 83       	std	Z+2, r26	; 0x02
     9d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9d4:	fe 01       	movw	r30, r28
     9d6:	e0 5b       	subi	r30, 0xB0	; 176
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	60 81       	ld	r22, Z
     9dc:	71 81       	ldd	r23, Z+1	; 0x01
     9de:	82 81       	ldd	r24, Z+2	; 0x02
     9e0:	93 81       	ldd	r25, Z+3	; 0x03
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	40 e8       	ldi	r20, 0x80	; 128
     9e8:	5f e3       	ldi	r21, 0x3F	; 63
     9ea:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
     9ee:	88 23       	and	r24, r24
     9f0:	44 f4       	brge	.+16     	; 0xa02 <steppermotor+0x150>
		__ticks = 1;
     9f2:	fe 01       	movw	r30, r28
     9f4:	e2 5b       	subi	r30, 0xB2	; 178
     9f6:	ff 4f       	sbci	r31, 0xFF	; 255
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	91 83       	std	Z+1, r25	; 0x01
     9fe:	80 83       	st	Z, r24
     a00:	64 c0       	rjmp	.+200    	; 0xaca <steppermotor+0x218>
	else if (__tmp > 65535)
     a02:	fe 01       	movw	r30, r28
     a04:	e0 5b       	subi	r30, 0xB0	; 176
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	60 81       	ld	r22, Z
     a0a:	71 81       	ldd	r23, Z+1	; 0x01
     a0c:	82 81       	ldd	r24, Z+2	; 0x02
     a0e:	93 81       	ldd	r25, Z+3	; 0x03
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	3f ef       	ldi	r19, 0xFF	; 255
     a14:	4f e7       	ldi	r20, 0x7F	; 127
     a16:	57 e4       	ldi	r21, 0x47	; 71
     a18:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
     a1c:	18 16       	cp	r1, r24
     a1e:	0c f0       	brlt	.+2      	; 0xa22 <steppermotor+0x170>
     a20:	43 c0       	rjmp	.+134    	; 0xaa8 <steppermotor+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a22:	fe 01       	movw	r30, r28
     a24:	ec 5a       	subi	r30, 0xAC	; 172
     a26:	ff 4f       	sbci	r31, 0xFF	; 255
     a28:	60 81       	ld	r22, Z
     a2a:	71 81       	ldd	r23, Z+1	; 0x01
     a2c:	82 81       	ldd	r24, Z+2	; 0x02
     a2e:	93 81       	ldd	r25, Z+3	; 0x03
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	40 e2       	ldi	r20, 0x20	; 32
     a36:	51 e4       	ldi	r21, 0x41	; 65
     a38:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
     a3c:	dc 01       	movw	r26, r24
     a3e:	cb 01       	movw	r24, r22
     a40:	8e 01       	movw	r16, r28
     a42:	02 5b       	subi	r16, 0xB2	; 178
     a44:	1f 4f       	sbci	r17, 0xFF	; 255
     a46:	bc 01       	movw	r22, r24
     a48:	cd 01       	movw	r24, r26
     a4a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	f8 01       	movw	r30, r16
     a54:	91 83       	std	Z+1, r25	; 0x01
     a56:	80 83       	st	Z, r24
     a58:	1f c0       	rjmp	.+62     	; 0xa98 <steppermotor+0x1e6>
     a5a:	fe 01       	movw	r30, r28
     a5c:	e4 5b       	subi	r30, 0xB4	; 180
     a5e:	ff 4f       	sbci	r31, 0xFF	; 255
     a60:	80 e9       	ldi	r24, 0x90	; 144
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	91 83       	std	Z+1, r25	; 0x01
     a66:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a68:	fe 01       	movw	r30, r28
     a6a:	e4 5b       	subi	r30, 0xB4	; 180
     a6c:	ff 4f       	sbci	r31, 0xFF	; 255
     a6e:	80 81       	ld	r24, Z
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	f1 f7       	brne	.-4      	; 0xa72 <steppermotor+0x1c0>
     a76:	fe 01       	movw	r30, r28
     a78:	e4 5b       	subi	r30, 0xB4	; 180
     a7a:	ff 4f       	sbci	r31, 0xFF	; 255
     a7c:	91 83       	std	Z+1, r25	; 0x01
     a7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a80:	de 01       	movw	r26, r28
     a82:	a2 5b       	subi	r26, 0xB2	; 178
     a84:	bf 4f       	sbci	r27, 0xFF	; 255
     a86:	fe 01       	movw	r30, r28
     a88:	e2 5b       	subi	r30, 0xB2	; 178
     a8a:	ff 4f       	sbci	r31, 0xFF	; 255
     a8c:	80 81       	ld	r24, Z
     a8e:	91 81       	ldd	r25, Z+1	; 0x01
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	11 96       	adiw	r26, 0x01	; 1
     a94:	9c 93       	st	X, r25
     a96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a98:	fe 01       	movw	r30, r28
     a9a:	e2 5b       	subi	r30, 0xB2	; 178
     a9c:	ff 4f       	sbci	r31, 0xFF	; 255
     a9e:	80 81       	ld	r24, Z
     aa0:	91 81       	ldd	r25, Z+1	; 0x01
     aa2:	00 97       	sbiw	r24, 0x00	; 0
     aa4:	d1 f6       	brne	.-76     	; 0xa5a <steppermotor+0x1a8>
     aa6:	4b c0       	rjmp	.+150    	; 0xb3e <steppermotor+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aa8:	8e 01       	movw	r16, r28
     aaa:	02 5b       	subi	r16, 0xB2	; 178
     aac:	1f 4f       	sbci	r17, 0xFF	; 255
     aae:	fe 01       	movw	r30, r28
     ab0:	e0 5b       	subi	r30, 0xB0	; 176
     ab2:	ff 4f       	sbci	r31, 0xFF	; 255
     ab4:	60 81       	ld	r22, Z
     ab6:	71 81       	ldd	r23, Z+1	; 0x01
     ab8:	82 81       	ldd	r24, Z+2	; 0x02
     aba:	93 81       	ldd	r25, Z+3	; 0x03
     abc:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
     ac0:	dc 01       	movw	r26, r24
     ac2:	cb 01       	movw	r24, r22
     ac4:	f8 01       	movw	r30, r16
     ac6:	91 83       	std	Z+1, r25	; 0x01
     ac8:	80 83       	st	Z, r24
     aca:	de 01       	movw	r26, r28
     acc:	a6 5b       	subi	r26, 0xB6	; 182
     ace:	bf 4f       	sbci	r27, 0xFF	; 255
     ad0:	fe 01       	movw	r30, r28
     ad2:	e2 5b       	subi	r30, 0xB2	; 178
     ad4:	ff 4f       	sbci	r31, 0xFF	; 255
     ad6:	80 81       	ld	r24, Z
     ad8:	91 81       	ldd	r25, Z+1	; 0x01
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	9c 93       	st	X, r25
     ade:	8e 93       	st	-X, r24
     ae0:	fe 01       	movw	r30, r28
     ae2:	e6 5b       	subi	r30, 0xB6	; 182
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	80 81       	ld	r24, Z
     ae8:	91 81       	ldd	r25, Z+1	; 0x01
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	f1 f7       	brne	.-4      	; 0xaea <steppermotor+0x238>
     aee:	fe 01       	movw	r30, r28
     af0:	e6 5b       	subi	r30, 0xB6	; 182
     af2:	ff 4f       	sbci	r31, 0xFF	; 255
     af4:	91 83       	std	Z+1, r25	; 0x01
     af6:	80 83       	st	Z, r24
     af8:	22 c0       	rjmp	.+68     	; 0xb3e <steppermotor+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     afa:	8e 01       	movw	r16, r28
     afc:	08 5a       	subi	r16, 0xA8	; 168
     afe:	1f 4f       	sbci	r17, 0xFF	; 255
     b00:	fe 01       	movw	r30, r28
     b02:	e7 5a       	subi	r30, 0xA7	; 167
     b04:	ff 4f       	sbci	r31, 0xFF	; 255
     b06:	60 81       	ld	r22, Z
     b08:	71 81       	ldd	r23, Z+1	; 0x01
     b0a:	82 81       	ldd	r24, Z+2	; 0x02
     b0c:	93 81       	ldd	r25, Z+3	; 0x03
     b0e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	f8 01       	movw	r30, r16
     b18:	80 83       	st	Z, r24
     b1a:	de 01       	movw	r26, r28
     b1c:	a7 5b       	subi	r26, 0xB7	; 183
     b1e:	bf 4f       	sbci	r27, 0xFF	; 255
     b20:	fe 01       	movw	r30, r28
     b22:	e8 5a       	subi	r30, 0xA8	; 168
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
     b26:	80 81       	ld	r24, Z
     b28:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b2a:	fe 01       	movw	r30, r28
     b2c:	e7 5b       	subi	r30, 0xB7	; 183
     b2e:	ff 4f       	sbci	r31, 0xFF	; 255
     b30:	80 81       	ld	r24, Z
     b32:	8a 95       	dec	r24
     b34:	f1 f7       	brne	.-4      	; 0xb32 <steppermotor+0x280>
     b36:	fe 01       	movw	r30, r28
     b38:	e7 5b       	subi	r30, 0xB7	; 183
     b3a:	ff 4f       	sbci	r31, 0xFF	; 255
     b3c:	80 83       	st	Z, r24

	_delay_us(100);

	DIO_write(stepper_org_1,LOW);
     b3e:	83 e1       	ldi	r24, 0x13	; 19
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(stepper_yel_2,HIGH);
     b46:	84 e1       	ldi	r24, 0x14	; 20
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(stepper_pink_3,LOW);
     b4e:	85 e1       	ldi	r24, 0x15	; 21
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(stepper_blu_4,LOW);
     b56:	86 e1       	ldi	r24, 0x16	; 22
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
     b5e:	fe 01       	movw	r30, r28
     b60:	eb 5b       	subi	r30, 0xBB	; 187
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a8 ec       	ldi	r26, 0xC8	; 200
     b6a:	b2 e4       	ldi	r27, 0x42	; 66
     b6c:	80 83       	st	Z, r24
     b6e:	91 83       	std	Z+1, r25	; 0x01
     b70:	a2 83       	std	Z+2, r26	; 0x02
     b72:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     b74:	8e 01       	movw	r16, r28
     b76:	0f 5b       	subi	r16, 0xBF	; 191
     b78:	1f 4f       	sbci	r17, 0xFF	; 255
     b7a:	fe 01       	movw	r30, r28
     b7c:	eb 5b       	subi	r30, 0xBB	; 187
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	60 81       	ld	r22, Z
     b82:	71 81       	ldd	r23, Z+1	; 0x01
     b84:	82 81       	ldd	r24, Z+2	; 0x02
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	2b ea       	ldi	r18, 0xAB	; 171
     b8a:	3a ea       	ldi	r19, 0xAA	; 170
     b8c:	4a ea       	ldi	r20, 0xAA	; 170
     b8e:	50 e4       	ldi	r21, 0x40	; 64
     b90:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	f8 01       	movw	r30, r16
     b9a:	80 83       	st	Z, r24
     b9c:	91 83       	std	Z+1, r25	; 0x01
     b9e:	a2 83       	std	Z+2, r26	; 0x02
     ba0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ba2:	fe 01       	movw	r30, r28
     ba4:	ef 5b       	subi	r30, 0xBF	; 191
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	60 81       	ld	r22, Z
     baa:	71 81       	ldd	r23, Z+1	; 0x01
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	34 f4       	brge	.+12     	; 0xbcc <steppermotor+0x31a>
		__ticks = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	fe 01       	movw	r30, r28
     bc4:	e0 5c       	subi	r30, 0xC0	; 192
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	80 83       	st	Z, r24
     bca:	9d c0       	rjmp	.+314    	; 0xd06 <steppermotor+0x454>
	else if (__tmp > 255)
     bcc:	fe 01       	movw	r30, r28
     bce:	ef 5b       	subi	r30, 0xBF	; 191
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	60 81       	ld	r22, Z
     bd4:	71 81       	ldd	r23, Z+1	; 0x01
     bd6:	82 81       	ldd	r24, Z+2	; 0x02
     bd8:	93 81       	ldd	r25, Z+3	; 0x03
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	4f e7       	ldi	r20, 0x7F	; 127
     be0:	53 e4       	ldi	r21, 0x43	; 67
     be2:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
     be6:	18 16       	cp	r1, r24
     be8:	0c f0       	brlt	.+2      	; 0xbec <steppermotor+0x33a>
     bea:	7e c0       	rjmp	.+252    	; 0xce8 <steppermotor+0x436>
	{
		_delay_ms(__us / 1000.0);
     bec:	fe 01       	movw	r30, r28
     bee:	eb 5b       	subi	r30, 0xBB	; 187
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	60 81       	ld	r22, Z
     bf4:	71 81       	ldd	r23, Z+1	; 0x01
     bf6:	82 81       	ldd	r24, Z+2	; 0x02
     bf8:	93 81       	ldd	r25, Z+3	; 0x03
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	4a e7       	ldi	r20, 0x7A	; 122
     c00:	54 e4       	ldi	r21, 0x44	; 68
     c02:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	8c af       	std	Y+60, r24	; 0x3c
     c0c:	9d af       	std	Y+61, r25	; 0x3d
     c0e:	ae af       	std	Y+62, r26	; 0x3e
     c10:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c12:	6c ad       	ldd	r22, Y+60	; 0x3c
     c14:	7d ad       	ldd	r23, Y+61	; 0x3d
     c16:	8e ad       	ldd	r24, Y+62	; 0x3e
     c18:	9f ad       	ldd	r25, Y+63	; 0x3f
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	4a e7       	ldi	r20, 0x7A	; 122
     c20:	55 e4       	ldi	r21, 0x45	; 69
     c22:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	88 af       	std	Y+56, r24	; 0x38
     c2c:	99 af       	std	Y+57, r25	; 0x39
     c2e:	aa af       	std	Y+58, r26	; 0x3a
     c30:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     c32:	68 ad       	ldd	r22, Y+56	; 0x38
     c34:	79 ad       	ldd	r23, Y+57	; 0x39
     c36:	8a ad       	ldd	r24, Y+58	; 0x3a
     c38:	9b ad       	ldd	r25, Y+59	; 0x3b
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e8       	ldi	r20, 0x80	; 128
     c40:	5f e3       	ldi	r21, 0x3F	; 63
     c42:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
     c46:	88 23       	and	r24, r24
     c48:	2c f4       	brge	.+10     	; 0xc54 <steppermotor+0x3a2>
		__ticks = 1;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	9f ab       	std	Y+55, r25	; 0x37
     c50:	8e ab       	std	Y+54, r24	; 0x36
     c52:	3f c0       	rjmp	.+126    	; 0xcd2 <steppermotor+0x420>
	else if (__tmp > 65535)
     c54:	68 ad       	ldd	r22, Y+56	; 0x38
     c56:	79 ad       	ldd	r23, Y+57	; 0x39
     c58:	8a ad       	ldd	r24, Y+58	; 0x3a
     c5a:	9b ad       	ldd	r25, Y+59	; 0x3b
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	4f e7       	ldi	r20, 0x7F	; 127
     c62:	57 e4       	ldi	r21, 0x47	; 71
     c64:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
     c68:	18 16       	cp	r1, r24
     c6a:	4c f5       	brge	.+82     	; 0xcbe <steppermotor+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c6c:	6c ad       	ldd	r22, Y+60	; 0x3c
     c6e:	7d ad       	ldd	r23, Y+61	; 0x3d
     c70:	8e ad       	ldd	r24, Y+62	; 0x3e
     c72:	9f ad       	ldd	r25, Y+63	; 0x3f
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e2       	ldi	r20, 0x20	; 32
     c7a:	51 e4       	ldi	r21, 0x41	; 65
     c7c:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	bc 01       	movw	r22, r24
     c86:	cd 01       	movw	r24, r26
     c88:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	9f ab       	std	Y+55, r25	; 0x37
     c92:	8e ab       	std	Y+54, r24	; 0x36
     c94:	0f c0       	rjmp	.+30     	; 0xcb4 <steppermotor+0x402>
     c96:	80 e9       	ldi	r24, 0x90	; 144
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	9d ab       	std	Y+53, r25	; 0x35
     c9c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9e:	8c a9       	ldd	r24, Y+52	; 0x34
     ca0:	9d a9       	ldd	r25, Y+53	; 0x35
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <steppermotor+0x3f0>
     ca6:	9d ab       	std	Y+53, r25	; 0x35
     ca8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     caa:	8e a9       	ldd	r24, Y+54	; 0x36
     cac:	9f a9       	ldd	r25, Y+55	; 0x37
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	9f ab       	std	Y+55, r25	; 0x37
     cb2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb4:	8e a9       	ldd	r24, Y+54	; 0x36
     cb6:	9f a9       	ldd	r25, Y+55	; 0x37
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	69 f7       	brne	.-38     	; 0xc96 <steppermotor+0x3e4>
     cbc:	2d c0       	rjmp	.+90     	; 0xd18 <steppermotor+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cbe:	68 ad       	ldd	r22, Y+56	; 0x38
     cc0:	79 ad       	ldd	r23, Y+57	; 0x39
     cc2:	8a ad       	ldd	r24, Y+58	; 0x3a
     cc4:	9b ad       	ldd	r25, Y+59	; 0x3b
     cc6:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	9f ab       	std	Y+55, r25	; 0x37
     cd0:	8e ab       	std	Y+54, r24	; 0x36
     cd2:	8e a9       	ldd	r24, Y+54	; 0x36
     cd4:	9f a9       	ldd	r25, Y+55	; 0x37
     cd6:	9b ab       	std	Y+51, r25	; 0x33
     cd8:	8a ab       	std	Y+50, r24	; 0x32
     cda:	8a a9       	ldd	r24, Y+50	; 0x32
     cdc:	9b a9       	ldd	r25, Y+51	; 0x33
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <steppermotor+0x42c>
     ce2:	9b ab       	std	Y+51, r25	; 0x33
     ce4:	8a ab       	std	Y+50, r24	; 0x32
     ce6:	18 c0       	rjmp	.+48     	; 0xd18 <steppermotor+0x466>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ce8:	fe 01       	movw	r30, r28
     cea:	ef 5b       	subi	r30, 0xBF	; 191
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	60 81       	ld	r22, Z
     cf0:	71 81       	ldd	r23, Z+1	; 0x01
     cf2:	82 81       	ldd	r24, Z+2	; 0x02
     cf4:	93 81       	ldd	r25, Z+3	; 0x03
     cf6:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	fe 01       	movw	r30, r28
     d00:	e0 5c       	subi	r30, 0xC0	; 192
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	80 83       	st	Z, r24
     d06:	fe 01       	movw	r30, r28
     d08:	e0 5c       	subi	r30, 0xC0	; 192
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	80 81       	ld	r24, Z
     d0e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d10:	89 a9       	ldd	r24, Y+49	; 0x31
     d12:	8a 95       	dec	r24
     d14:	f1 f7       	brne	.-4      	; 0xd12 <steppermotor+0x460>
     d16:	89 ab       	std	Y+49, r24	; 0x31

	_delay_us(100);

	DIO_write(stepper_org_1,LOW);
     d18:	83 e1       	ldi	r24, 0x13	; 19
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(stepper_yel_2,LOW);
     d20:	84 e1       	ldi	r24, 0x14	; 20
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(stepper_pink_3,HIGH);
     d28:	85 e1       	ldi	r24, 0x15	; 21
     d2a:	61 e0       	ldi	r22, 0x01	; 1
     d2c:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(stepper_blu_4,LOW);
     d30:	86 e1       	ldi	r24, 0x16	; 22
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a8 ec       	ldi	r26, 0xC8	; 200
     d3e:	b2 e4       	ldi	r27, 0x42	; 66
     d40:	8d a7       	std	Y+45, r24	; 0x2d
     d42:	9e a7       	std	Y+46, r25	; 0x2e
     d44:	af a7       	std	Y+47, r26	; 0x2f
     d46:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d48:	6d a5       	ldd	r22, Y+45	; 0x2d
     d4a:	7e a5       	ldd	r23, Y+46	; 0x2e
     d4c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d4e:	98 a9       	ldd	r25, Y+48	; 0x30
     d50:	2b ea       	ldi	r18, 0xAB	; 171
     d52:	3a ea       	ldi	r19, 0xAA	; 170
     d54:	4a ea       	ldi	r20, 0xAA	; 170
     d56:	50 e4       	ldi	r21, 0x40	; 64
     d58:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	89 a7       	std	Y+41, r24	; 0x29
     d62:	9a a7       	std	Y+42, r25	; 0x2a
     d64:	ab a7       	std	Y+43, r26	; 0x2b
     d66:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     d68:	69 a5       	ldd	r22, Y+41	; 0x29
     d6a:	7a a5       	ldd	r23, Y+42	; 0x2a
     d6c:	8b a5       	ldd	r24, Y+43	; 0x2b
     d6e:	9c a5       	ldd	r25, Y+44	; 0x2c
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e8       	ldi	r20, 0x80	; 128
     d76:	5f e3       	ldi	r21, 0x3F	; 63
     d78:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
     d7c:	88 23       	and	r24, r24
     d7e:	1c f4       	brge	.+6      	; 0xd86 <steppermotor+0x4d4>
		__ticks = 1;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	88 a7       	std	Y+40, r24	; 0x28
     d84:	91 c0       	rjmp	.+290    	; 0xea8 <steppermotor+0x5f6>
	else if (__tmp > 255)
     d86:	69 a5       	ldd	r22, Y+41	; 0x29
     d88:	7a a5       	ldd	r23, Y+42	; 0x2a
     d8a:	8b a5       	ldd	r24, Y+43	; 0x2b
     d8c:	9c a5       	ldd	r25, Y+44	; 0x2c
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	4f e7       	ldi	r20, 0x7F	; 127
     d94:	53 e4       	ldi	r21, 0x43	; 67
     d96:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
     d9a:	18 16       	cp	r1, r24
     d9c:	0c f0       	brlt	.+2      	; 0xda0 <steppermotor+0x4ee>
     d9e:	7b c0       	rjmp	.+246    	; 0xe96 <steppermotor+0x5e4>
	{
		_delay_ms(__us / 1000.0);
     da0:	6d a5       	ldd	r22, Y+45	; 0x2d
     da2:	7e a5       	ldd	r23, Y+46	; 0x2e
     da4:	8f a5       	ldd	r24, Y+47	; 0x2f
     da6:	98 a9       	ldd	r25, Y+48	; 0x30
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	4a e7       	ldi	r20, 0x7A	; 122
     dae:	54 e4       	ldi	r21, 0x44	; 68
     db0:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	8c a3       	std	Y+36, r24	; 0x24
     dba:	9d a3       	std	Y+37, r25	; 0x25
     dbc:	ae a3       	std	Y+38, r26	; 0x26
     dbe:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc0:	6c a1       	ldd	r22, Y+36	; 0x24
     dc2:	7d a1       	ldd	r23, Y+37	; 0x25
     dc4:	8e a1       	ldd	r24, Y+38	; 0x26
     dc6:	9f a1       	ldd	r25, Y+39	; 0x27
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	4a e7       	ldi	r20, 0x7A	; 122
     dce:	55 e4       	ldi	r21, 0x45	; 69
     dd0:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	88 a3       	std	Y+32, r24	; 0x20
     dda:	99 a3       	std	Y+33, r25	; 0x21
     ddc:	aa a3       	std	Y+34, r26	; 0x22
     dde:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     de0:	68 a1       	ldd	r22, Y+32	; 0x20
     de2:	79 a1       	ldd	r23, Y+33	; 0x21
     de4:	8a a1       	ldd	r24, Y+34	; 0x22
     de6:	9b a1       	ldd	r25, Y+35	; 0x23
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e8       	ldi	r20, 0x80	; 128
     dee:	5f e3       	ldi	r21, 0x3F	; 63
     df0:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
     df4:	88 23       	and	r24, r24
     df6:	2c f4       	brge	.+10     	; 0xe02 <steppermotor+0x550>
		__ticks = 1;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	9f 8f       	std	Y+31, r25	; 0x1f
     dfe:	8e 8f       	std	Y+30, r24	; 0x1e
     e00:	3f c0       	rjmp	.+126    	; 0xe80 <steppermotor+0x5ce>
	else if (__tmp > 65535)
     e02:	68 a1       	ldd	r22, Y+32	; 0x20
     e04:	79 a1       	ldd	r23, Y+33	; 0x21
     e06:	8a a1       	ldd	r24, Y+34	; 0x22
     e08:	9b a1       	ldd	r25, Y+35	; 0x23
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	3f ef       	ldi	r19, 0xFF	; 255
     e0e:	4f e7       	ldi	r20, 0x7F	; 127
     e10:	57 e4       	ldi	r21, 0x47	; 71
     e12:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
     e16:	18 16       	cp	r1, r24
     e18:	4c f5       	brge	.+82     	; 0xe6c <steppermotor+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1a:	6c a1       	ldd	r22, Y+36	; 0x24
     e1c:	7d a1       	ldd	r23, Y+37	; 0x25
     e1e:	8e a1       	ldd	r24, Y+38	; 0x26
     e20:	9f a1       	ldd	r25, Y+39	; 0x27
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e2       	ldi	r20, 0x20	; 32
     e28:	51 e4       	ldi	r21, 0x41	; 65
     e2a:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	bc 01       	movw	r22, r24
     e34:	cd 01       	movw	r24, r26
     e36:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	9f 8f       	std	Y+31, r25	; 0x1f
     e40:	8e 8f       	std	Y+30, r24	; 0x1e
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <steppermotor+0x5b0>
     e44:	80 e9       	ldi	r24, 0x90	; 144
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	9d 8f       	std	Y+29, r25	; 0x1d
     e4a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e4e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <steppermotor+0x59e>
     e54:	9d 8f       	std	Y+29, r25	; 0x1d
     e56:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e58:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	9f 8f       	std	Y+31, r25	; 0x1f
     e60:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e62:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e64:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	69 f7       	brne	.-38     	; 0xe44 <steppermotor+0x592>
     e6a:	24 c0       	rjmp	.+72     	; 0xeb4 <steppermotor+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6c:	68 a1       	ldd	r22, Y+32	; 0x20
     e6e:	79 a1       	ldd	r23, Y+33	; 0x21
     e70:	8a a1       	ldd	r24, Y+34	; 0x22
     e72:	9b a1       	ldd	r25, Y+35	; 0x23
     e74:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	9f 8f       	std	Y+31, r25	; 0x1f
     e7e:	8e 8f       	std	Y+30, r24	; 0x1e
     e80:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e82:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e84:	9b 8f       	std	Y+27, r25	; 0x1b
     e86:	8a 8f       	std	Y+26, r24	; 0x1a
     e88:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e8a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <steppermotor+0x5da>
     e90:	9b 8f       	std	Y+27, r25	; 0x1b
     e92:	8a 8f       	std	Y+26, r24	; 0x1a
     e94:	0f c0       	rjmp	.+30     	; 0xeb4 <steppermotor+0x602>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e96:	69 a5       	ldd	r22, Y+41	; 0x29
     e98:	7a a5       	ldd	r23, Y+42	; 0x2a
     e9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     e9c:	9c a5       	ldd	r25, Y+44	; 0x2c
     e9e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	88 a7       	std	Y+40, r24	; 0x28
     ea8:	88 a5       	ldd	r24, Y+40	; 0x28
     eaa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     eac:	89 8d       	ldd	r24, Y+25	; 0x19
     eae:	8a 95       	dec	r24
     eb0:	f1 f7       	brne	.-4      	; 0xeae <steppermotor+0x5fc>
     eb2:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(100);

	DIO_write(stepper_org_1,LOW);
     eb4:	83 e1       	ldi	r24, 0x13	; 19
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(stepper_yel_2,LOW);
     ebc:	84 e1       	ldi	r24, 0x14	; 20
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(stepper_pink_3,LOW);
     ec4:	85 e1       	ldi	r24, 0x15	; 21
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(stepper_blu_4,HIGH);
     ecc:	86 e1       	ldi	r24, 0x16	; 22
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	a8 ec       	ldi	r26, 0xC8	; 200
     eda:	b2 e4       	ldi	r27, 0x42	; 66
     edc:	8d 8b       	std	Y+21, r24	; 0x15
     ede:	9e 8b       	std	Y+22, r25	; 0x16
     ee0:	af 8b       	std	Y+23, r26	; 0x17
     ee2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ee4:	6d 89       	ldd	r22, Y+21	; 0x15
     ee6:	7e 89       	ldd	r23, Y+22	; 0x16
     ee8:	8f 89       	ldd	r24, Y+23	; 0x17
     eea:	98 8d       	ldd	r25, Y+24	; 0x18
     eec:	2b ea       	ldi	r18, 0xAB	; 171
     eee:	3a ea       	ldi	r19, 0xAA	; 170
     ef0:	4a ea       	ldi	r20, 0xAA	; 170
     ef2:	50 e4       	ldi	r21, 0x40	; 64
     ef4:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	89 8b       	std	Y+17, r24	; 0x11
     efe:	9a 8b       	std	Y+18, r25	; 0x12
     f00:	ab 8b       	std	Y+19, r26	; 0x13
     f02:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     f04:	69 89       	ldd	r22, Y+17	; 0x11
     f06:	7a 89       	ldd	r23, Y+18	; 0x12
     f08:	8b 89       	ldd	r24, Y+19	; 0x13
     f0a:	9c 89       	ldd	r25, Y+20	; 0x14
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
     f18:	88 23       	and	r24, r24
     f1a:	1c f4       	brge	.+6      	; 0xf22 <steppermotor+0x670>
		__ticks = 1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	88 8b       	std	Y+16, r24	; 0x10
     f20:	91 c0       	rjmp	.+290    	; 0x1044 <steppermotor+0x792>
	else if (__tmp > 255)
     f22:	69 89       	ldd	r22, Y+17	; 0x11
     f24:	7a 89       	ldd	r23, Y+18	; 0x12
     f26:	8b 89       	ldd	r24, Y+19	; 0x13
     f28:	9c 89       	ldd	r25, Y+20	; 0x14
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	4f e7       	ldi	r20, 0x7F	; 127
     f30:	53 e4       	ldi	r21, 0x43	; 67
     f32:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
     f36:	18 16       	cp	r1, r24
     f38:	0c f0       	brlt	.+2      	; 0xf3c <steppermotor+0x68a>
     f3a:	7b c0       	rjmp	.+246    	; 0x1032 <steppermotor+0x780>
	{
		_delay_ms(__us / 1000.0);
     f3c:	6d 89       	ldd	r22, Y+21	; 0x15
     f3e:	7e 89       	ldd	r23, Y+22	; 0x16
     f40:	8f 89       	ldd	r24, Y+23	; 0x17
     f42:	98 8d       	ldd	r25, Y+24	; 0x18
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	4a e7       	ldi	r20, 0x7A	; 122
     f4a:	54 e4       	ldi	r21, 0x44	; 68
     f4c:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	8c 87       	std	Y+12, r24	; 0x0c
     f56:	9d 87       	std	Y+13, r25	; 0x0d
     f58:	ae 87       	std	Y+14, r26	; 0x0e
     f5a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	6c 85       	ldd	r22, Y+12	; 0x0c
     f5e:	7d 85       	ldd	r23, Y+13	; 0x0d
     f60:	8e 85       	ldd	r24, Y+14	; 0x0e
     f62:	9f 85       	ldd	r25, Y+15	; 0x0f
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	4a e7       	ldi	r20, 0x7A	; 122
     f6a:	55 e4       	ldi	r21, 0x45	; 69
     f6c:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	88 87       	std	Y+8, r24	; 0x08
     f76:	99 87       	std	Y+9, r25	; 0x09
     f78:	aa 87       	std	Y+10, r26	; 0x0a
     f7a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f7c:	68 85       	ldd	r22, Y+8	; 0x08
     f7e:	79 85       	ldd	r23, Y+9	; 0x09
     f80:	8a 85       	ldd	r24, Y+10	; 0x0a
     f82:	9b 85       	ldd	r25, Y+11	; 0x0b
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	5f e3       	ldi	r21, 0x3F	; 63
     f8c:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
     f90:	88 23       	and	r24, r24
     f92:	2c f4       	brge	.+10     	; 0xf9e <steppermotor+0x6ec>
		__ticks = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9f 83       	std	Y+7, r25	; 0x07
     f9a:	8e 83       	std	Y+6, r24	; 0x06
     f9c:	3f c0       	rjmp	.+126    	; 0x101c <steppermotor+0x76a>
	else if (__tmp > 65535)
     f9e:	68 85       	ldd	r22, Y+8	; 0x08
     fa0:	79 85       	ldd	r23, Y+9	; 0x09
     fa2:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa4:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	3f ef       	ldi	r19, 0xFF	; 255
     faa:	4f e7       	ldi	r20, 0x7F	; 127
     fac:	57 e4       	ldi	r21, 0x47	; 71
     fae:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	4c f5       	brge	.+82     	; 0x1008 <steppermotor+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb6:	6c 85       	ldd	r22, Y+12	; 0x0c
     fb8:	7d 85       	ldd	r23, Y+13	; 0x0d
     fba:	8e 85       	ldd	r24, Y+14	; 0x0e
     fbc:	9f 85       	ldd	r25, Y+15	; 0x0f
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e2       	ldi	r20, 0x20	; 32
     fc4:	51 e4       	ldi	r21, 0x41	; 65
     fc6:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	9f 83       	std	Y+7, r25	; 0x07
     fdc:	8e 83       	std	Y+6, r24	; 0x06
     fde:	0f c0       	rjmp	.+30     	; 0xffe <steppermotor+0x74c>
     fe0:	80 e9       	ldi	r24, 0x90	; 144
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	9d 83       	std	Y+5, r25	; 0x05
     fe6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <steppermotor+0x73a>
     ff0:	9d 83       	std	Y+5, r25	; 0x05
     ff2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	8e 81       	ldd	r24, Y+6	; 0x06
     ff6:	9f 81       	ldd	r25, Y+7	; 0x07
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	9f 83       	std	Y+7, r25	; 0x07
     ffc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    1000:	9f 81       	ldd	r25, Y+7	; 0x07
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	69 f7       	brne	.-38     	; 0xfe0 <steppermotor+0x72e>
    1006:	24 c0       	rjmp	.+72     	; 0x1050 <steppermotor+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1008:	68 85       	ldd	r22, Y+8	; 0x08
    100a:	79 85       	ldd	r23, Y+9	; 0x09
    100c:	8a 85       	ldd	r24, Y+10	; 0x0a
    100e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1010:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	9f 83       	std	Y+7, r25	; 0x07
    101a:	8e 83       	std	Y+6, r24	; 0x06
    101c:	8e 81       	ldd	r24, Y+6	; 0x06
    101e:	9f 81       	ldd	r25, Y+7	; 0x07
    1020:	9b 83       	std	Y+3, r25	; 0x03
    1022:	8a 83       	std	Y+2, r24	; 0x02
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <steppermotor+0x776>
    102c:	9b 83       	std	Y+3, r25	; 0x03
    102e:	8a 83       	std	Y+2, r24	; 0x02
    1030:	0f c0       	rjmp	.+30     	; 0x1050 <steppermotor+0x79e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1032:	69 89       	ldd	r22, Y+17	; 0x11
    1034:	7a 89       	ldd	r23, Y+18	; 0x12
    1036:	8b 89       	ldd	r24, Y+19	; 0x13
    1038:	9c 89       	ldd	r25, Y+20	; 0x14
    103a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	88 8b       	std	Y+16, r24	; 0x10
    1044:	88 89       	ldd	r24, Y+16	; 0x10
    1046:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	8a 95       	dec	r24
    104c:	f1 f7       	brne	.-4      	; 0x104a <steppermotor+0x798>
    104e:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(100);

}
    1050:	c0 5a       	subi	r28, 0xA0	; 160
    1052:	df 4f       	sbci	r29, 0xFF	; 255
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	08 95       	ret

00001068 <getkeypress>:




unsigned char getkeypress(void)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
	//pullup
	DIO_write(col0,HIGH);
    1072:	8c e1       	ldi	r24, 0x1C	; 28
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(col1,HIGH);
    107a:	8d e1       	ldi	r24, 0x1D	; 29
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(col2,HIGH);
    1082:	8e e1       	ldi	r24, 0x1E	; 30
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(col3,HIGH);
    108a:	8f e1       	ldi	r24, 0x1F	; 31
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>


	DIO_write(row0,LOW);
    1092:	88 e1       	ldi	r24, 0x18	; 24
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(row1,LOW);
    109a:	89 e1       	ldi	r24, 0x19	; 25
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(row2,LOW);
    10a2:	8a e1       	ldi	r24, 0x1A	; 26
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(row3,LOW);
    10aa:	8b e1       	ldi	r24, 0x1B	; 27
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>

	if(DIO_read(col0) && DIO_read(col1) && DIO_read(col2) && DIO_read(col3))
    10b2:	8c e1       	ldi	r24, 0x1C	; 28
    10b4:	0e 94 04 02 	call	0x408	; 0x408 <DIO_read>
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	91 f0       	breq	.+36     	; 0x10e0 <getkeypress+0x78>
    10bc:	8d e1       	ldi	r24, 0x1D	; 29
    10be:	0e 94 04 02 	call	0x408	; 0x408 <DIO_read>
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	69 f0       	breq	.+26     	; 0x10e0 <getkeypress+0x78>
    10c6:	8e e1       	ldi	r24, 0x1E	; 30
    10c8:	0e 94 04 02 	call	0x408	; 0x408 <DIO_read>
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	41 f0       	breq	.+16     	; 0x10e0 <getkeypress+0x78>
    10d0:	8f e1       	ldi	r24, 0x1F	; 31
    10d2:	0e 94 04 02 	call	0x408	; 0x408 <DIO_read>
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	19 f0       	breq	.+6      	; 0x10e0 <getkeypress+0x78>
	{
		return 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <getkeypress+0x7a>
	}
	return 0;
    10e0:	19 82       	std	Y+1, r1	; 0x01
    10e2:	89 81       	ldd	r24, Y+1	; 0x01

}
    10e4:	0f 90       	pop	r0
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <lcd_init>:
 *      Author: Ali Ehab
 */
#include "LCD.h"

void lcd_init(void)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	2e 97       	sbiw	r28, 0x0e	; 14
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a8 e4       	ldi	r26, 0x48	; 72
    1106:	b3 e4       	ldi	r27, 0x43	; 67
    1108:	8b 87       	std	Y+11, r24	; 0x0b
    110a:	9c 87       	std	Y+12, r25	; 0x0c
    110c:	ad 87       	std	Y+13, r26	; 0x0d
    110e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1110:	6b 85       	ldd	r22, Y+11	; 0x0b
    1112:	7c 85       	ldd	r23, Y+12	; 0x0c
    1114:	8d 85       	ldd	r24, Y+13	; 0x0d
    1116:	9e 85       	ldd	r25, Y+14	; 0x0e
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	4a e7       	ldi	r20, 0x7A	; 122
    111e:	55 e4       	ldi	r21, 0x45	; 69
    1120:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	8f 83       	std	Y+7, r24	; 0x07
    112a:	98 87       	std	Y+8, r25	; 0x08
    112c:	a9 87       	std	Y+9, r26	; 0x09
    112e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1130:	6f 81       	ldd	r22, Y+7	; 0x07
    1132:	78 85       	ldd	r23, Y+8	; 0x08
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	9a 85       	ldd	r25, Y+10	; 0x0a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    1144:	88 23       	and	r24, r24
    1146:	2c f4       	brge	.+10     	; 0x1152 <lcd_init+0x66>
		__ticks = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	3f c0       	rjmp	.+126    	; 0x11d0 <lcd_init+0xe4>
	else if (__tmp > 65535)
    1152:	6f 81       	ldd	r22, Y+7	; 0x07
    1154:	78 85       	ldd	r23, Y+8	; 0x08
    1156:	89 85       	ldd	r24, Y+9	; 0x09
    1158:	9a 85       	ldd	r25, Y+10	; 0x0a
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	3f ef       	ldi	r19, 0xFF	; 255
    115e:	4f e7       	ldi	r20, 0x7F	; 127
    1160:	57 e4       	ldi	r21, 0x47	; 71
    1162:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    1166:	18 16       	cp	r1, r24
    1168:	4c f5       	brge	.+82     	; 0x11bc <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116a:	6b 85       	ldd	r22, Y+11	; 0x0b
    116c:	7c 85       	ldd	r23, Y+12	; 0x0c
    116e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1170:	9e 85       	ldd	r25, Y+14	; 0x0e
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e2       	ldi	r20, 0x20	; 32
    1178:	51 e4       	ldi	r21, 0x41	; 65
    117a:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	9e 83       	std	Y+6, r25	; 0x06
    1190:	8d 83       	std	Y+5, r24	; 0x05
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <lcd_init+0xc6>
    1194:	80 e9       	ldi	r24, 0x90	; 144
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <lcd_init+0xb4>
    11a4:	9c 83       	std	Y+4, r25	; 0x04
    11a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
    11aa:	9e 81       	ldd	r25, Y+6	; 0x06
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	9e 83       	std	Y+6, r25	; 0x06
    11b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b2:	8d 81       	ldd	r24, Y+5	; 0x05
    11b4:	9e 81       	ldd	r25, Y+6	; 0x06
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	69 f7       	brne	.-38     	; 0x1194 <lcd_init+0xa8>
    11ba:	14 c0       	rjmp	.+40     	; 0x11e4 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11bc:	6f 81       	ldd	r22, Y+7	; 0x07
    11be:	78 85       	ldd	r23, Y+8	; 0x08
    11c0:	89 85       	ldd	r24, Y+9	; 0x09
    11c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c4:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9e 83       	std	Y+6, r25	; 0x06
    11ce:	8d 83       	std	Y+5, r24	; 0x05
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	9a 83       	std	Y+2, r25	; 0x02
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <lcd_init+0xf0>
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	lcd_sendcmd(0x33);
    11e4:	83 e3       	ldi	r24, 0x33	; 51
    11e6:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lcd_sendcmd>
	lcd_sendcmd(0x32);
    11ea:	82 e3       	ldi	r24, 0x32	; 50
    11ec:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lcd_sendcmd>
	lcd_sendcmd(0x28);
    11f0:	88 e2       	ldi	r24, 0x28	; 40
    11f2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lcd_sendcmd>
	lcd_sendcmd(0x0f);
    11f6:	8f e0       	ldi	r24, 0x0F	; 15
    11f8:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lcd_sendcmd>
	lcd_sendcmd(0x06);
    11fc:	86 e0       	ldi	r24, 0x06	; 6
    11fe:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lcd_sendcmd>
	lcd_sendcmd(0x01);
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lcd_sendcmd>


}
    1208:	2e 96       	adiw	r28, 0x0e	; 14
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <lcd_sendchar>:

void lcd_sendchar(unsigned char data)
{
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	c1 56       	subi	r28, 0x61	; 97
    1228:	d0 40       	sbci	r29, 0x00	; 0
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	fe 01       	movw	r30, r28
    1236:	ef 59       	subi	r30, 0x9F	; 159
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	80 83       	st	Z, r24
	DIO_write(LCD_Rs,HIGH);
    123c:	89 e0       	ldi	r24, 0x09	; 9
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(LCD_Rw,LOW);
    1244:	8a e0       	ldi	r24, 0x0A	; 10
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	if(GET_BIT(data,4)){DIO_write(LCD_D4,HIGH);}else {DIO_write(LCD_D4,LOW);}
    124c:	fe 01       	movw	r30, r28
    124e:	ef 59       	subi	r30, 0x9F	; 159
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	80 81       	ld	r24, Z
    1254:	82 95       	swap	r24
    1256:	8f 70       	andi	r24, 0x0F	; 15
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	81 70       	andi	r24, 0x01	; 1
    125e:	90 70       	andi	r25, 0x00	; 0
    1260:	88 23       	and	r24, r24
    1262:	29 f0       	breq	.+10     	; 0x126e <lcd_sendchar+0x54>
    1264:	84 e0       	ldi	r24, 0x04	; 4
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <lcd_sendchar+0x5c>
    126e:	84 e0       	ldi	r24, 0x04	; 4
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	if(GET_BIT(data,5)){DIO_write(LCD_D5,HIGH);}else {DIO_write(LCD_D5,LOW);}
    1276:	fe 01       	movw	r30, r28
    1278:	ef 59       	subi	r30, 0x9F	; 159
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	80 81       	ld	r24, Z
    127e:	82 95       	swap	r24
    1280:	86 95       	lsr	r24
    1282:	87 70       	andi	r24, 0x07	; 7
    1284:	88 2f       	mov	r24, r24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	81 70       	andi	r24, 0x01	; 1
    128a:	90 70       	andi	r25, 0x00	; 0
    128c:	88 23       	and	r24, r24
    128e:	29 f0       	breq	.+10     	; 0x129a <lcd_sendchar+0x80>
    1290:	85 e0       	ldi	r24, 0x05	; 5
    1292:	61 e0       	ldi	r22, 0x01	; 1
    1294:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    1298:	04 c0       	rjmp	.+8      	; 0x12a2 <lcd_sendchar+0x88>
    129a:	85 e0       	ldi	r24, 0x05	; 5
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	if(GET_BIT(data,6)){DIO_write(LCD_D6,HIGH);}else {DIO_write(LCD_D6,LOW);}
    12a2:	fe 01       	movw	r30, r28
    12a4:	ef 59       	subi	r30, 0x9F	; 159
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	80 81       	ld	r24, Z
    12aa:	82 95       	swap	r24
    12ac:	86 95       	lsr	r24
    12ae:	86 95       	lsr	r24
    12b0:	83 70       	andi	r24, 0x03	; 3
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	81 70       	andi	r24, 0x01	; 1
    12b8:	90 70       	andi	r25, 0x00	; 0
    12ba:	88 23       	and	r24, r24
    12bc:	29 f0       	breq	.+10     	; 0x12c8 <lcd_sendchar+0xae>
    12be:	86 e0       	ldi	r24, 0x06	; 6
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    12c6:	04 c0       	rjmp	.+8      	; 0x12d0 <lcd_sendchar+0xb6>
    12c8:	86 e0       	ldi	r24, 0x06	; 6
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	if(GET_BIT(data,7)){DIO_write(LCD_D7,HIGH);}else {DIO_write(LCD_D7,LOW);}
    12d0:	fe 01       	movw	r30, r28
    12d2:	ef 59       	subi	r30, 0x9F	; 159
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	80 81       	ld	r24, Z
    12d8:	88 23       	and	r24, r24
    12da:	2c f4       	brge	.+10     	; 0x12e6 <lcd_sendchar+0xcc>
    12dc:	87 e0       	ldi	r24, 0x07	; 7
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <lcd_sendchar+0xd4>
    12e6:	87 e0       	ldi	r24, 0x07	; 7
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>

	DIO_write(LCD_E,HIGH);
    12ee:	8b e0       	ldi	r24, 0x0B	; 11
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    12f6:	fe 01       	movw	r30, r28
    12f8:	e3 5a       	subi	r30, 0xA3	; 163
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a0 e2       	ldi	r26, 0x20	; 32
    1302:	b1 e4       	ldi	r27, 0x41	; 65
    1304:	80 83       	st	Z, r24
    1306:	91 83       	std	Z+1, r25	; 0x01
    1308:	a2 83       	std	Z+2, r26	; 0x02
    130a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    130c:	8e 01       	movw	r16, r28
    130e:	07 5a       	subi	r16, 0xA7	; 167
    1310:	1f 4f       	sbci	r17, 0xFF	; 255
    1312:	fe 01       	movw	r30, r28
    1314:	e3 5a       	subi	r30, 0xA3	; 163
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	60 81       	ld	r22, Z
    131a:	71 81       	ldd	r23, Z+1	; 0x01
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	2b ea       	ldi	r18, 0xAB	; 171
    1322:	3a ea       	ldi	r19, 0xAA	; 170
    1324:	4a ea       	ldi	r20, 0xAA	; 170
    1326:	50 e4       	ldi	r21, 0x40	; 64
    1328:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	f8 01       	movw	r30, r16
    1332:	80 83       	st	Z, r24
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	a2 83       	std	Z+2, r26	; 0x02
    1338:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    133a:	fe 01       	movw	r30, r28
    133c:	e7 5a       	subi	r30, 0xA7	; 167
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e8       	ldi	r20, 0x80	; 128
    134e:	5f e3       	ldi	r21, 0x3F	; 63
    1350:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    1354:	88 23       	and	r24, r24
    1356:	34 f4       	brge	.+12     	; 0x1364 <lcd_sendchar+0x14a>
		__ticks = 1;
    1358:	fe 01       	movw	r30, r28
    135a:	e8 5a       	subi	r30, 0xA8	; 168
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 83       	st	Z, r24
    1362:	e0 c0       	rjmp	.+448    	; 0x1524 <lcd_sendchar+0x30a>
	else if (__tmp > 255)
    1364:	fe 01       	movw	r30, r28
    1366:	e7 5a       	subi	r30, 0xA7	; 167
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	60 81       	ld	r22, Z
    136c:	71 81       	ldd	r23, Z+1	; 0x01
    136e:	82 81       	ldd	r24, Z+2	; 0x02
    1370:	93 81       	ldd	r25, Z+3	; 0x03
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	4f e7       	ldi	r20, 0x7F	; 127
    1378:	53 e4       	ldi	r21, 0x43	; 67
    137a:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    137e:	18 16       	cp	r1, r24
    1380:	0c f0       	brlt	.+2      	; 0x1384 <lcd_sendchar+0x16a>
    1382:	c0 c0       	rjmp	.+384    	; 0x1504 <lcd_sendchar+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    1384:	fe 01       	movw	r30, r28
    1386:	e3 5a       	subi	r30, 0xA3	; 163
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	60 81       	ld	r22, Z
    138c:	71 81       	ldd	r23, Z+1	; 0x01
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	4a e7       	ldi	r20, 0x7A	; 122
    1398:	54 e4       	ldi	r21, 0x44	; 68
    139a:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	fe 01       	movw	r30, r28
    13a4:	ec 5a       	subi	r30, 0xAC	; 172
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	80 83       	st	Z, r24
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	a2 83       	std	Z+2, r26	; 0x02
    13ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b0:	8e 01       	movw	r16, r28
    13b2:	00 5b       	subi	r16, 0xB0	; 176
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	fe 01       	movw	r30, r28
    13b8:	ec 5a       	subi	r30, 0xAC	; 172
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	4a e7       	ldi	r20, 0x7A	; 122
    13ca:	55 e4       	ldi	r21, 0x45	; 69
    13cc:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	f8 01       	movw	r30, r16
    13d6:	80 83       	st	Z, r24
    13d8:	91 83       	std	Z+1, r25	; 0x01
    13da:	a2 83       	std	Z+2, r26	; 0x02
    13dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13de:	fe 01       	movw	r30, r28
    13e0:	e0 5b       	subi	r30, 0xB0	; 176
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	60 81       	ld	r22, Z
    13e6:	71 81       	ldd	r23, Z+1	; 0x01
    13e8:	82 81       	ldd	r24, Z+2	; 0x02
    13ea:	93 81       	ldd	r25, Z+3	; 0x03
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e8       	ldi	r20, 0x80	; 128
    13f2:	5f e3       	ldi	r21, 0x3F	; 63
    13f4:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    13f8:	88 23       	and	r24, r24
    13fa:	44 f4       	brge	.+16     	; 0x140c <lcd_sendchar+0x1f2>
		__ticks = 1;
    13fc:	fe 01       	movw	r30, r28
    13fe:	e2 5b       	subi	r30, 0xB2	; 178
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	91 83       	std	Z+1, r25	; 0x01
    1408:	80 83       	st	Z, r24
    140a:	64 c0       	rjmp	.+200    	; 0x14d4 <lcd_sendchar+0x2ba>
	else if (__tmp > 65535)
    140c:	fe 01       	movw	r30, r28
    140e:	e0 5b       	subi	r30, 0xB0	; 176
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	3f ef       	ldi	r19, 0xFF	; 255
    141e:	4f e7       	ldi	r20, 0x7F	; 127
    1420:	57 e4       	ldi	r21, 0x47	; 71
    1422:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    1426:	18 16       	cp	r1, r24
    1428:	0c f0       	brlt	.+2      	; 0x142c <lcd_sendchar+0x212>
    142a:	43 c0       	rjmp	.+134    	; 0x14b2 <lcd_sendchar+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	fe 01       	movw	r30, r28
    142e:	ec 5a       	subi	r30, 0xAC	; 172
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	60 81       	ld	r22, Z
    1434:	71 81       	ldd	r23, Z+1	; 0x01
    1436:	82 81       	ldd	r24, Z+2	; 0x02
    1438:	93 81       	ldd	r25, Z+3	; 0x03
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e2       	ldi	r20, 0x20	; 32
    1440:	51 e4       	ldi	r21, 0x41	; 65
    1442:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	8e 01       	movw	r16, r28
    144c:	02 5b       	subi	r16, 0xB2	; 178
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	f8 01       	movw	r30, r16
    145e:	91 83       	std	Z+1, r25	; 0x01
    1460:	80 83       	st	Z, r24
    1462:	1f c0       	rjmp	.+62     	; 0x14a2 <lcd_sendchar+0x288>
    1464:	fe 01       	movw	r30, r28
    1466:	e4 5b       	subi	r30, 0xB4	; 180
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	80 e9       	ldi	r24, 0x90	; 144
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24
    1472:	fe 01       	movw	r30, r28
    1474:	e4 5b       	subi	r30, 0xB4	; 180
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <lcd_sendchar+0x262>
    1480:	fe 01       	movw	r30, r28
    1482:	e4 5b       	subi	r30, 0xB4	; 180
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	91 83       	std	Z+1, r25	; 0x01
    1488:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148a:	de 01       	movw	r26, r28
    148c:	a2 5b       	subi	r26, 0xB2	; 178
    148e:	bf 4f       	sbci	r27, 0xFF	; 255
    1490:	fe 01       	movw	r30, r28
    1492:	e2 5b       	subi	r30, 0xB2	; 178
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	80 81       	ld	r24, Z
    1498:	91 81       	ldd	r25, Z+1	; 0x01
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	11 96       	adiw	r26, 0x01	; 1
    149e:	9c 93       	st	X, r25
    14a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a2:	fe 01       	movw	r30, r28
    14a4:	e2 5b       	subi	r30, 0xB2	; 178
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	80 81       	ld	r24, Z
    14aa:	91 81       	ldd	r25, Z+1	; 0x01
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	d1 f6       	brne	.-76     	; 0x1464 <lcd_sendchar+0x24a>
    14b0:	4b c0       	rjmp	.+150    	; 0x1548 <lcd_sendchar+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b2:	8e 01       	movw	r16, r28
    14b4:	02 5b       	subi	r16, 0xB2	; 178
    14b6:	1f 4f       	sbci	r17, 0xFF	; 255
    14b8:	fe 01       	movw	r30, r28
    14ba:	e0 5b       	subi	r30, 0xB0	; 176
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	60 81       	ld	r22, Z
    14c0:	71 81       	ldd	r23, Z+1	; 0x01
    14c2:	82 81       	ldd	r24, Z+2	; 0x02
    14c4:	93 81       	ldd	r25, Z+3	; 0x03
    14c6:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	f8 01       	movw	r30, r16
    14d0:	91 83       	std	Z+1, r25	; 0x01
    14d2:	80 83       	st	Z, r24
    14d4:	de 01       	movw	r26, r28
    14d6:	a6 5b       	subi	r26, 0xB6	; 182
    14d8:	bf 4f       	sbci	r27, 0xFF	; 255
    14da:	fe 01       	movw	r30, r28
    14dc:	e2 5b       	subi	r30, 0xB2	; 178
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	80 81       	ld	r24, Z
    14e2:	91 81       	ldd	r25, Z+1	; 0x01
    14e4:	11 96       	adiw	r26, 0x01	; 1
    14e6:	9c 93       	st	X, r25
    14e8:	8e 93       	st	-X, r24
    14ea:	fe 01       	movw	r30, r28
    14ec:	e6 5b       	subi	r30, 0xB6	; 182
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	80 81       	ld	r24, Z
    14f2:	91 81       	ldd	r25, Z+1	; 0x01
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <lcd_sendchar+0x2da>
    14f8:	fe 01       	movw	r30, r28
    14fa:	e6 5b       	subi	r30, 0xB6	; 182
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	91 83       	std	Z+1, r25	; 0x01
    1500:	80 83       	st	Z, r24
    1502:	22 c0       	rjmp	.+68     	; 0x1548 <lcd_sendchar+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1504:	8e 01       	movw	r16, r28
    1506:	08 5a       	subi	r16, 0xA8	; 168
    1508:	1f 4f       	sbci	r17, 0xFF	; 255
    150a:	fe 01       	movw	r30, r28
    150c:	e7 5a       	subi	r30, 0xA7	; 167
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	60 81       	ld	r22, Z
    1512:	71 81       	ldd	r23, Z+1	; 0x01
    1514:	82 81       	ldd	r24, Z+2	; 0x02
    1516:	93 81       	ldd	r25, Z+3	; 0x03
    1518:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	f8 01       	movw	r30, r16
    1522:	80 83       	st	Z, r24
    1524:	de 01       	movw	r26, r28
    1526:	a7 5b       	subi	r26, 0xB7	; 183
    1528:	bf 4f       	sbci	r27, 0xFF	; 255
    152a:	fe 01       	movw	r30, r28
    152c:	e8 5a       	subi	r30, 0xA8	; 168
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 81       	ld	r24, Z
    1532:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1534:	fe 01       	movw	r30, r28
    1536:	e7 5b       	subi	r30, 0xB7	; 183
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	80 81       	ld	r24, Z
    153c:	8a 95       	dec	r24
    153e:	f1 f7       	brne	.-4      	; 0x153c <lcd_sendchar+0x322>
    1540:	fe 01       	movw	r30, r28
    1542:	e7 5b       	subi	r30, 0xB7	; 183
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	80 83       	st	Z, r24
	_delay_us(10);
	DIO_write(LCD_E,LOW);
    1548:	8b e0       	ldi	r24, 0x0B	; 11
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    1550:	fe 01       	movw	r30, r28
    1552:	eb 5b       	subi	r30, 0xBB	; 187
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a8 e4       	ldi	r26, 0x48	; 72
    155c:	b3 e4       	ldi	r27, 0x43	; 67
    155e:	80 83       	st	Z, r24
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	a2 83       	std	Z+2, r26	; 0x02
    1564:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1566:	8e 01       	movw	r16, r28
    1568:	0f 5b       	subi	r16, 0xBF	; 191
    156a:	1f 4f       	sbci	r17, 0xFF	; 255
    156c:	fe 01       	movw	r30, r28
    156e:	eb 5b       	subi	r30, 0xBB	; 187
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	60 81       	ld	r22, Z
    1574:	71 81       	ldd	r23, Z+1	; 0x01
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	2b ea       	ldi	r18, 0xAB	; 171
    157c:	3a ea       	ldi	r19, 0xAA	; 170
    157e:	4a ea       	ldi	r20, 0xAA	; 170
    1580:	50 e4       	ldi	r21, 0x40	; 64
    1582:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	f8 01       	movw	r30, r16
    158c:	80 83       	st	Z, r24
    158e:	91 83       	std	Z+1, r25	; 0x01
    1590:	a2 83       	std	Z+2, r26	; 0x02
    1592:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1594:	fe 01       	movw	r30, r28
    1596:	ef 5b       	subi	r30, 0xBF	; 191
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	93 81       	ldd	r25, Z+3	; 0x03
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e8       	ldi	r20, 0x80	; 128
    15a8:	5f e3       	ldi	r21, 0x3F	; 63
    15aa:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	34 f4       	brge	.+12     	; 0x15be <lcd_sendchar+0x3a4>
		__ticks = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	fe 01       	movw	r30, r28
    15b6:	e0 5c       	subi	r30, 0xC0	; 192
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	80 83       	st	Z, r24
    15bc:	9d c0       	rjmp	.+314    	; 0x16f8 <lcd_sendchar+0x4de>
	else if (__tmp > 255)
    15be:	fe 01       	movw	r30, r28
    15c0:	ef 5b       	subi	r30, 0xBF	; 191
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	60 81       	ld	r22, Z
    15c6:	71 81       	ldd	r23, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	4f e7       	ldi	r20, 0x7F	; 127
    15d2:	53 e4       	ldi	r21, 0x43	; 67
    15d4:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    15d8:	18 16       	cp	r1, r24
    15da:	0c f0       	brlt	.+2      	; 0x15de <lcd_sendchar+0x3c4>
    15dc:	7e c0       	rjmp	.+252    	; 0x16da <lcd_sendchar+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    15de:	fe 01       	movw	r30, r28
    15e0:	eb 5b       	subi	r30, 0xBB	; 187
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	4a e7       	ldi	r20, 0x7A	; 122
    15f2:	54 e4       	ldi	r21, 0x44	; 68
    15f4:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	8c af       	std	Y+60, r24	; 0x3c
    15fe:	9d af       	std	Y+61, r25	; 0x3d
    1600:	ae af       	std	Y+62, r26	; 0x3e
    1602:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1604:	6c ad       	ldd	r22, Y+60	; 0x3c
    1606:	7d ad       	ldd	r23, Y+61	; 0x3d
    1608:	8e ad       	ldd	r24, Y+62	; 0x3e
    160a:	9f ad       	ldd	r25, Y+63	; 0x3f
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	4a e7       	ldi	r20, 0x7A	; 122
    1612:	55 e4       	ldi	r21, 0x45	; 69
    1614:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	88 af       	std	Y+56, r24	; 0x38
    161e:	99 af       	std	Y+57, r25	; 0x39
    1620:	aa af       	std	Y+58, r26	; 0x3a
    1622:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1624:	68 ad       	ldd	r22, Y+56	; 0x38
    1626:	79 ad       	ldd	r23, Y+57	; 0x39
    1628:	8a ad       	ldd	r24, Y+58	; 0x3a
    162a:	9b ad       	ldd	r25, Y+59	; 0x3b
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e8       	ldi	r20, 0x80	; 128
    1632:	5f e3       	ldi	r21, 0x3F	; 63
    1634:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    1638:	88 23       	and	r24, r24
    163a:	2c f4       	brge	.+10     	; 0x1646 <lcd_sendchar+0x42c>
		__ticks = 1;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	9f ab       	std	Y+55, r25	; 0x37
    1642:	8e ab       	std	Y+54, r24	; 0x36
    1644:	3f c0       	rjmp	.+126    	; 0x16c4 <lcd_sendchar+0x4aa>
	else if (__tmp > 65535)
    1646:	68 ad       	ldd	r22, Y+56	; 0x38
    1648:	79 ad       	ldd	r23, Y+57	; 0x39
    164a:	8a ad       	ldd	r24, Y+58	; 0x3a
    164c:	9b ad       	ldd	r25, Y+59	; 0x3b
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	3f ef       	ldi	r19, 0xFF	; 255
    1652:	4f e7       	ldi	r20, 0x7F	; 127
    1654:	57 e4       	ldi	r21, 0x47	; 71
    1656:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    165a:	18 16       	cp	r1, r24
    165c:	4c f5       	brge	.+82     	; 0x16b0 <lcd_sendchar+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1660:	7d ad       	ldd	r23, Y+61	; 0x3d
    1662:	8e ad       	ldd	r24, Y+62	; 0x3e
    1664:	9f ad       	ldd	r25, Y+63	; 0x3f
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e2       	ldi	r20, 0x20	; 32
    166c:	51 e4       	ldi	r21, 0x41	; 65
    166e:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	bc 01       	movw	r22, r24
    1678:	cd 01       	movw	r24, r26
    167a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	9f ab       	std	Y+55, r25	; 0x37
    1684:	8e ab       	std	Y+54, r24	; 0x36
    1686:	0f c0       	rjmp	.+30     	; 0x16a6 <lcd_sendchar+0x48c>
    1688:	80 e9       	ldi	r24, 0x90	; 144
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	9d ab       	std	Y+53, r25	; 0x35
    168e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1690:	8c a9       	ldd	r24, Y+52	; 0x34
    1692:	9d a9       	ldd	r25, Y+53	; 0x35
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <lcd_sendchar+0x47a>
    1698:	9d ab       	std	Y+53, r25	; 0x35
    169a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169c:	8e a9       	ldd	r24, Y+54	; 0x36
    169e:	9f a9       	ldd	r25, Y+55	; 0x37
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	9f ab       	std	Y+55, r25	; 0x37
    16a4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a6:	8e a9       	ldd	r24, Y+54	; 0x36
    16a8:	9f a9       	ldd	r25, Y+55	; 0x37
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	69 f7       	brne	.-38     	; 0x1688 <lcd_sendchar+0x46e>
    16ae:	2d c0       	rjmp	.+90     	; 0x170a <lcd_sendchar+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b0:	68 ad       	ldd	r22, Y+56	; 0x38
    16b2:	79 ad       	ldd	r23, Y+57	; 0x39
    16b4:	8a ad       	ldd	r24, Y+58	; 0x3a
    16b6:	9b ad       	ldd	r25, Y+59	; 0x3b
    16b8:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9f ab       	std	Y+55, r25	; 0x37
    16c2:	8e ab       	std	Y+54, r24	; 0x36
    16c4:	8e a9       	ldd	r24, Y+54	; 0x36
    16c6:	9f a9       	ldd	r25, Y+55	; 0x37
    16c8:	9b ab       	std	Y+51, r25	; 0x33
    16ca:	8a ab       	std	Y+50, r24	; 0x32
    16cc:	8a a9       	ldd	r24, Y+50	; 0x32
    16ce:	9b a9       	ldd	r25, Y+51	; 0x33
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <lcd_sendchar+0x4b6>
    16d4:	9b ab       	std	Y+51, r25	; 0x33
    16d6:	8a ab       	std	Y+50, r24	; 0x32
    16d8:	18 c0       	rjmp	.+48     	; 0x170a <lcd_sendchar+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16da:	fe 01       	movw	r30, r28
    16dc:	ef 5b       	subi	r30, 0xBF	; 191
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	fe 01       	movw	r30, r28
    16f2:	e0 5c       	subi	r30, 0xC0	; 192
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	80 83       	st	Z, r24
    16f8:	fe 01       	movw	r30, r28
    16fa:	e0 5c       	subi	r30, 0xC0	; 192
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	80 81       	ld	r24, Z
    1700:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1702:	89 a9       	ldd	r24, Y+49	; 0x31
    1704:	8a 95       	dec	r24
    1706:	f1 f7       	brne	.-4      	; 0x1704 <lcd_sendchar+0x4ea>
    1708:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);

	if(GET_BIT(data,0)){DIO_write(LCD_D4,HIGH);}else {DIO_write(LCD_D4,LOW);}
    170a:	fe 01       	movw	r30, r28
    170c:	ef 59       	subi	r30, 0x9F	; 159
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	80 81       	ld	r24, Z
    1712:	88 2f       	mov	r24, r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	81 70       	andi	r24, 0x01	; 1
    1718:	90 70       	andi	r25, 0x00	; 0
    171a:	88 23       	and	r24, r24
    171c:	29 f0       	breq	.+10     	; 0x1728 <lcd_sendchar+0x50e>
    171e:	84 e0       	ldi	r24, 0x04	; 4
    1720:	61 e0       	ldi	r22, 0x01	; 1
    1722:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <lcd_sendchar+0x516>
    1728:	84 e0       	ldi	r24, 0x04	; 4
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	if(GET_BIT(data,1)){DIO_write(LCD_D5,HIGH);}else {DIO_write(LCD_D5,LOW);}
    1730:	fe 01       	movw	r30, r28
    1732:	ef 59       	subi	r30, 0x9F	; 159
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	80 81       	ld	r24, Z
    1738:	86 95       	lsr	r24
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	81 70       	andi	r24, 0x01	; 1
    1740:	90 70       	andi	r25, 0x00	; 0
    1742:	88 23       	and	r24, r24
    1744:	29 f0       	breq	.+10     	; 0x1750 <lcd_sendchar+0x536>
    1746:	85 e0       	ldi	r24, 0x05	; 5
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    174e:	04 c0       	rjmp	.+8      	; 0x1758 <lcd_sendchar+0x53e>
    1750:	85 e0       	ldi	r24, 0x05	; 5
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	if(GET_BIT(data,2)){DIO_write(LCD_D6,HIGH);}else {DIO_write(LCD_D6,LOW);}
    1758:	fe 01       	movw	r30, r28
    175a:	ef 59       	subi	r30, 0x9F	; 159
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	80 81       	ld	r24, Z
    1760:	86 95       	lsr	r24
    1762:	86 95       	lsr	r24
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	81 70       	andi	r24, 0x01	; 1
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	88 23       	and	r24, r24
    176e:	29 f0       	breq	.+10     	; 0x177a <lcd_sendchar+0x560>
    1770:	86 e0       	ldi	r24, 0x06	; 6
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <lcd_sendchar+0x568>
    177a:	86 e0       	ldi	r24, 0x06	; 6
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	if(GET_BIT(data,3)){DIO_write(LCD_D7,HIGH);}else {DIO_write(LCD_D7,LOW);}
    1782:	fe 01       	movw	r30, r28
    1784:	ef 59       	subi	r30, 0x9F	; 159
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	86 95       	lsr	r24
    178c:	86 95       	lsr	r24
    178e:	86 95       	lsr	r24
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	81 70       	andi	r24, 0x01	; 1
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	88 23       	and	r24, r24
    179a:	29 f0       	breq	.+10     	; 0x17a6 <lcd_sendchar+0x58c>
    179c:	87 e0       	ldi	r24, 0x07	; 7
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    17a4:	04 c0       	rjmp	.+8      	; 0x17ae <lcd_sendchar+0x594>
    17a6:	87 e0       	ldi	r24, 0x07	; 7
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>

	DIO_write(LCD_E,HIGH);
    17ae:	8b e0       	ldi	r24, 0x0B	; 11
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a0 e2       	ldi	r26, 0x20	; 32
    17bc:	b1 e4       	ldi	r27, 0x41	; 65
    17be:	8d a7       	std	Y+45, r24	; 0x2d
    17c0:	9e a7       	std	Y+46, r25	; 0x2e
    17c2:	af a7       	std	Y+47, r26	; 0x2f
    17c4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17c6:	6d a5       	ldd	r22, Y+45	; 0x2d
    17c8:	7e a5       	ldd	r23, Y+46	; 0x2e
    17ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    17cc:	98 a9       	ldd	r25, Y+48	; 0x30
    17ce:	2b ea       	ldi	r18, 0xAB	; 171
    17d0:	3a ea       	ldi	r19, 0xAA	; 170
    17d2:	4a ea       	ldi	r20, 0xAA	; 170
    17d4:	50 e4       	ldi	r21, 0x40	; 64
    17d6:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	89 a7       	std	Y+41, r24	; 0x29
    17e0:	9a a7       	std	Y+42, r25	; 0x2a
    17e2:	ab a7       	std	Y+43, r26	; 0x2b
    17e4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    17e6:	69 a5       	ldd	r22, Y+41	; 0x29
    17e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    17ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e8       	ldi	r20, 0x80	; 128
    17f4:	5f e3       	ldi	r21, 0x3F	; 63
    17f6:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    17fa:	88 23       	and	r24, r24
    17fc:	1c f4       	brge	.+6      	; 0x1804 <lcd_sendchar+0x5ea>
		__ticks = 1;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	88 a7       	std	Y+40, r24	; 0x28
    1802:	91 c0       	rjmp	.+290    	; 0x1926 <lcd_sendchar+0x70c>
	else if (__tmp > 255)
    1804:	69 a5       	ldd	r22, Y+41	; 0x29
    1806:	7a a5       	ldd	r23, Y+42	; 0x2a
    1808:	8b a5       	ldd	r24, Y+43	; 0x2b
    180a:	9c a5       	ldd	r25, Y+44	; 0x2c
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	4f e7       	ldi	r20, 0x7F	; 127
    1812:	53 e4       	ldi	r21, 0x43	; 67
    1814:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    1818:	18 16       	cp	r1, r24
    181a:	0c f0       	brlt	.+2      	; 0x181e <lcd_sendchar+0x604>
    181c:	7b c0       	rjmp	.+246    	; 0x1914 <lcd_sendchar+0x6fa>
	{
		_delay_ms(__us / 1000.0);
    181e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1820:	7e a5       	ldd	r23, Y+46	; 0x2e
    1822:	8f a5       	ldd	r24, Y+47	; 0x2f
    1824:	98 a9       	ldd	r25, Y+48	; 0x30
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4a e7       	ldi	r20, 0x7A	; 122
    182c:	54 e4       	ldi	r21, 0x44	; 68
    182e:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	8c a3       	std	Y+36, r24	; 0x24
    1838:	9d a3       	std	Y+37, r25	; 0x25
    183a:	ae a3       	std	Y+38, r26	; 0x26
    183c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183e:	6c a1       	ldd	r22, Y+36	; 0x24
    1840:	7d a1       	ldd	r23, Y+37	; 0x25
    1842:	8e a1       	ldd	r24, Y+38	; 0x26
    1844:	9f a1       	ldd	r25, Y+39	; 0x27
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4a e7       	ldi	r20, 0x7A	; 122
    184c:	55 e4       	ldi	r21, 0x45	; 69
    184e:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	88 a3       	std	Y+32, r24	; 0x20
    1858:	99 a3       	std	Y+33, r25	; 0x21
    185a:	aa a3       	std	Y+34, r26	; 0x22
    185c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    185e:	68 a1       	ldd	r22, Y+32	; 0x20
    1860:	79 a1       	ldd	r23, Y+33	; 0x21
    1862:	8a a1       	ldd	r24, Y+34	; 0x22
    1864:	9b a1       	ldd	r25, Y+35	; 0x23
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	5f e3       	ldi	r21, 0x3F	; 63
    186e:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    1872:	88 23       	and	r24, r24
    1874:	2c f4       	brge	.+10     	; 0x1880 <lcd_sendchar+0x666>
		__ticks = 1;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	9f 8f       	std	Y+31, r25	; 0x1f
    187c:	8e 8f       	std	Y+30, r24	; 0x1e
    187e:	3f c0       	rjmp	.+126    	; 0x18fe <lcd_sendchar+0x6e4>
	else if (__tmp > 65535)
    1880:	68 a1       	ldd	r22, Y+32	; 0x20
    1882:	79 a1       	ldd	r23, Y+33	; 0x21
    1884:	8a a1       	ldd	r24, Y+34	; 0x22
    1886:	9b a1       	ldd	r25, Y+35	; 0x23
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	3f ef       	ldi	r19, 0xFF	; 255
    188c:	4f e7       	ldi	r20, 0x7F	; 127
    188e:	57 e4       	ldi	r21, 0x47	; 71
    1890:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    1894:	18 16       	cp	r1, r24
    1896:	4c f5       	brge	.+82     	; 0x18ea <lcd_sendchar+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1898:	6c a1       	ldd	r22, Y+36	; 0x24
    189a:	7d a1       	ldd	r23, Y+37	; 0x25
    189c:	8e a1       	ldd	r24, Y+38	; 0x26
    189e:	9f a1       	ldd	r25, Y+39	; 0x27
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e2       	ldi	r20, 0x20	; 32
    18a6:	51 e4       	ldi	r21, 0x41	; 65
    18a8:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	bc 01       	movw	r22, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9f 8f       	std	Y+31, r25	; 0x1f
    18be:	8e 8f       	std	Y+30, r24	; 0x1e
    18c0:	0f c0       	rjmp	.+30     	; 0x18e0 <lcd_sendchar+0x6c6>
    18c2:	80 e9       	ldi	r24, 0x90	; 144
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	9d 8f       	std	Y+29, r25	; 0x1d
    18c8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <lcd_sendchar+0x6b4>
    18d2:	9d 8f       	std	Y+29, r25	; 0x1d
    18d4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	9f 8f       	std	Y+31, r25	; 0x1f
    18de:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	69 f7       	brne	.-38     	; 0x18c2 <lcd_sendchar+0x6a8>
    18e8:	24 c0       	rjmp	.+72     	; 0x1932 <lcd_sendchar+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ea:	68 a1       	ldd	r22, Y+32	; 0x20
    18ec:	79 a1       	ldd	r23, Y+33	; 0x21
    18ee:	8a a1       	ldd	r24, Y+34	; 0x22
    18f0:	9b a1       	ldd	r25, Y+35	; 0x23
    18f2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9f 8f       	std	Y+31, r25	; 0x1f
    18fc:	8e 8f       	std	Y+30, r24	; 0x1e
    18fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1900:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1902:	9b 8f       	std	Y+27, r25	; 0x1b
    1904:	8a 8f       	std	Y+26, r24	; 0x1a
    1906:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1908:	9b 8d       	ldd	r25, Y+27	; 0x1b
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <lcd_sendchar+0x6f0>
    190e:	9b 8f       	std	Y+27, r25	; 0x1b
    1910:	8a 8f       	std	Y+26, r24	; 0x1a
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <lcd_sendchar+0x718>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1914:	69 a5       	ldd	r22, Y+41	; 0x29
    1916:	7a a5       	ldd	r23, Y+42	; 0x2a
    1918:	8b a5       	ldd	r24, Y+43	; 0x2b
    191a:	9c a5       	ldd	r25, Y+44	; 0x2c
    191c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	88 a7       	std	Y+40, r24	; 0x28
    1926:	88 a5       	ldd	r24, Y+40	; 0x28
    1928:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    192a:	89 8d       	ldd	r24, Y+25	; 0x19
    192c:	8a 95       	dec	r24
    192e:	f1 f7       	brne	.-4      	; 0x192c <lcd_sendchar+0x712>
    1930:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	DIO_write(LCD_E,LOW);
    1932:	8b e0       	ldi	r24, 0x0B	; 11
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a8 e4       	ldi	r26, 0x48	; 72
    1940:	b3 e4       	ldi	r27, 0x43	; 67
    1942:	8d 8b       	std	Y+21, r24	; 0x15
    1944:	9e 8b       	std	Y+22, r25	; 0x16
    1946:	af 8b       	std	Y+23, r26	; 0x17
    1948:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    194a:	6d 89       	ldd	r22, Y+21	; 0x15
    194c:	7e 89       	ldd	r23, Y+22	; 0x16
    194e:	8f 89       	ldd	r24, Y+23	; 0x17
    1950:	98 8d       	ldd	r25, Y+24	; 0x18
    1952:	2b ea       	ldi	r18, 0xAB	; 171
    1954:	3a ea       	ldi	r19, 0xAA	; 170
    1956:	4a ea       	ldi	r20, 0xAA	; 170
    1958:	50 e4       	ldi	r21, 0x40	; 64
    195a:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	89 8b       	std	Y+17, r24	; 0x11
    1964:	9a 8b       	std	Y+18, r25	; 0x12
    1966:	ab 8b       	std	Y+19, r26	; 0x13
    1968:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    196a:	69 89       	ldd	r22, Y+17	; 0x11
    196c:	7a 89       	ldd	r23, Y+18	; 0x12
    196e:	8b 89       	ldd	r24, Y+19	; 0x13
    1970:	9c 89       	ldd	r25, Y+20	; 0x14
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f e3       	ldi	r21, 0x3F	; 63
    197a:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    197e:	88 23       	and	r24, r24
    1980:	1c f4       	brge	.+6      	; 0x1988 <lcd_sendchar+0x76e>
		__ticks = 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	88 8b       	std	Y+16, r24	; 0x10
    1986:	91 c0       	rjmp	.+290    	; 0x1aaa <lcd_sendchar+0x890>
	else if (__tmp > 255)
    1988:	69 89       	ldd	r22, Y+17	; 0x11
    198a:	7a 89       	ldd	r23, Y+18	; 0x12
    198c:	8b 89       	ldd	r24, Y+19	; 0x13
    198e:	9c 89       	ldd	r25, Y+20	; 0x14
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4f e7       	ldi	r20, 0x7F	; 127
    1996:	53 e4       	ldi	r21, 0x43	; 67
    1998:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    199c:	18 16       	cp	r1, r24
    199e:	0c f0       	brlt	.+2      	; 0x19a2 <lcd_sendchar+0x788>
    19a0:	7b c0       	rjmp	.+246    	; 0x1a98 <lcd_sendchar+0x87e>
	{
		_delay_ms(__us / 1000.0);
    19a2:	6d 89       	ldd	r22, Y+21	; 0x15
    19a4:	7e 89       	ldd	r23, Y+22	; 0x16
    19a6:	8f 89       	ldd	r24, Y+23	; 0x17
    19a8:	98 8d       	ldd	r25, Y+24	; 0x18
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	4a e7       	ldi	r20, 0x7A	; 122
    19b0:	54 e4       	ldi	r21, 0x44	; 68
    19b2:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	8c 87       	std	Y+12, r24	; 0x0c
    19bc:	9d 87       	std	Y+13, r25	; 0x0d
    19be:	ae 87       	std	Y+14, r26	; 0x0e
    19c0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    19c4:	7d 85       	ldd	r23, Y+13	; 0x0d
    19c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    19c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a e7       	ldi	r20, 0x7A	; 122
    19d0:	55 e4       	ldi	r21, 0x45	; 69
    19d2:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	88 87       	std	Y+8, r24	; 0x08
    19dc:	99 87       	std	Y+9, r25	; 0x09
    19de:	aa 87       	std	Y+10, r26	; 0x0a
    19e0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    19e2:	68 85       	ldd	r22, Y+8	; 0x08
    19e4:	79 85       	ldd	r23, Y+9	; 0x09
    19e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    19e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	5f e3       	ldi	r21, 0x3F	; 63
    19f2:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    19f6:	88 23       	and	r24, r24
    19f8:	2c f4       	brge	.+10     	; 0x1a04 <lcd_sendchar+0x7ea>
		__ticks = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9f 83       	std	Y+7, r25	; 0x07
    1a00:	8e 83       	std	Y+6, r24	; 0x06
    1a02:	3f c0       	rjmp	.+126    	; 0x1a82 <lcd_sendchar+0x868>
	else if (__tmp > 65535)
    1a04:	68 85       	ldd	r22, Y+8	; 0x08
    1a06:	79 85       	ldd	r23, Y+9	; 0x09
    1a08:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	57 e4       	ldi	r21, 0x47	; 71
    1a14:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	4c f5       	brge	.+82     	; 0x1a6e <lcd_sendchar+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a1e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a20:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a22:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e2       	ldi	r20, 0x20	; 32
    1a2a:	51 e4       	ldi	r21, 0x41	; 65
    1a2c:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9f 83       	std	Y+7, r25	; 0x07
    1a42:	8e 83       	std	Y+6, r24	; 0x06
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <lcd_sendchar+0x84a>
    1a46:	80 e9       	ldi	r24, 0x90	; 144
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	9d 83       	std	Y+5, r25	; 0x05
    1a4c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a50:	9d 81       	ldd	r25, Y+5	; 0x05
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <lcd_sendchar+0x838>
    1a56:	9d 83       	std	Y+5, r25	; 0x05
    1a58:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	9f 83       	std	Y+7, r25	; 0x07
    1a62:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a64:	8e 81       	ldd	r24, Y+6	; 0x06
    1a66:	9f 81       	ldd	r25, Y+7	; 0x07
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <lcd_sendchar+0x82c>
    1a6c:	24 c0       	rjmp	.+72     	; 0x1ab6 <lcd_sendchar+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6e:	68 85       	ldd	r22, Y+8	; 0x08
    1a70:	79 85       	ldd	r23, Y+9	; 0x09
    1a72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a74:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a76:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9f 83       	std	Y+7, r25	; 0x07
    1a80:	8e 83       	std	Y+6, r24	; 0x06
    1a82:	8e 81       	ldd	r24, Y+6	; 0x06
    1a84:	9f 81       	ldd	r25, Y+7	; 0x07
    1a86:	9b 83       	std	Y+3, r25	; 0x03
    1a88:	8a 83       	std	Y+2, r24	; 0x02
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <lcd_sendchar+0x874>
    1a92:	9b 83       	std	Y+3, r25	; 0x03
    1a94:	8a 83       	std	Y+2, r24	; 0x02
    1a96:	0f c0       	rjmp	.+30     	; 0x1ab6 <lcd_sendchar+0x89c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a98:	69 89       	ldd	r22, Y+17	; 0x11
    1a9a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	88 8b       	std	Y+16, r24	; 0x10
    1aaa:	88 89       	ldd	r24, Y+16	; 0x10
    1aac:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	8a 95       	dec	r24
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <lcd_sendchar+0x896>
    1ab4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(200);
}
    1ab6:	cf 59       	subi	r28, 0x9F	; 159
    1ab8:	df 4f       	sbci	r29, 0xFF	; 255
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	08 95       	ret

00001ace <lcd_sendcmd>:

void lcd_sendcmd(unsigned char cmd)
{
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	c1 56       	subi	r28, 0x61	; 97
    1adc:	d0 40       	sbci	r29, 0x00	; 0
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	fe 01       	movw	r30, r28
    1aea:	ef 59       	subi	r30, 0x9F	; 159
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	80 83       	st	Z, r24
	DIO_write(LCD_Rs,LOW);
    1af0:	89 e0       	ldi	r24, 0x09	; 9
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
	DIO_write(LCD_Rw,LOW);
    1af8:	8a e0       	ldi	r24, 0x0A	; 10
    1afa:	60 e0       	ldi	r22, 0x00	; 0
    1afc:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
		if(GET_BIT(cmd,4)){DIO_write(LCD_D4,HIGH);}else {DIO_write(LCD_D4,LOW);}
    1b00:	fe 01       	movw	r30, r28
    1b02:	ef 59       	subi	r30, 0x9F	; 159
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	80 81       	ld	r24, Z
    1b08:	82 95       	swap	r24
    1b0a:	8f 70       	andi	r24, 0x0F	; 15
    1b0c:	88 2f       	mov	r24, r24
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	81 70       	andi	r24, 0x01	; 1
    1b12:	90 70       	andi	r25, 0x00	; 0
    1b14:	88 23       	and	r24, r24
    1b16:	29 f0       	breq	.+10     	; 0x1b22 <lcd_sendcmd+0x54>
    1b18:	84 e0       	ldi	r24, 0x04	; 4
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    1b20:	04 c0       	rjmp	.+8      	; 0x1b2a <lcd_sendcmd+0x5c>
    1b22:	84 e0       	ldi	r24, 0x04	; 4
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
		if(GET_BIT(cmd,5)){DIO_write(LCD_D5,HIGH);}else {DIO_write(LCD_D5,LOW);}
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ef 59       	subi	r30, 0x9F	; 159
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	82 95       	swap	r24
    1b34:	86 95       	lsr	r24
    1b36:	87 70       	andi	r24, 0x07	; 7
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	81 70       	andi	r24, 0x01	; 1
    1b3e:	90 70       	andi	r25, 0x00	; 0
    1b40:	88 23       	and	r24, r24
    1b42:	29 f0       	breq	.+10     	; 0x1b4e <lcd_sendcmd+0x80>
    1b44:	85 e0       	ldi	r24, 0x05	; 5
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    1b4c:	04 c0       	rjmp	.+8      	; 0x1b56 <lcd_sendcmd+0x88>
    1b4e:	85 e0       	ldi	r24, 0x05	; 5
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
		if(GET_BIT(cmd,6)){DIO_write(LCD_D6,HIGH);}else {DIO_write(LCD_D6,LOW);}
    1b56:	fe 01       	movw	r30, r28
    1b58:	ef 59       	subi	r30, 0x9F	; 159
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	80 81       	ld	r24, Z
    1b5e:	82 95       	swap	r24
    1b60:	86 95       	lsr	r24
    1b62:	86 95       	lsr	r24
    1b64:	83 70       	andi	r24, 0x03	; 3
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	81 70       	andi	r24, 0x01	; 1
    1b6c:	90 70       	andi	r25, 0x00	; 0
    1b6e:	88 23       	and	r24, r24
    1b70:	29 f0       	breq	.+10     	; 0x1b7c <lcd_sendcmd+0xae>
    1b72:	86 e0       	ldi	r24, 0x06	; 6
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <lcd_sendcmd+0xb6>
    1b7c:	86 e0       	ldi	r24, 0x06	; 6
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
		if(GET_BIT(cmd,7)){DIO_write(LCD_D7,HIGH);}else {DIO_write(LCD_D7,LOW);}
    1b84:	fe 01       	movw	r30, r28
    1b86:	ef 59       	subi	r30, 0x9F	; 159
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	80 81       	ld	r24, Z
    1b8c:	88 23       	and	r24, r24
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <lcd_sendcmd+0xcc>
    1b90:	87 e0       	ldi	r24, 0x07	; 7
    1b92:	61 e0       	ldi	r22, 0x01	; 1
    1b94:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <lcd_sendcmd+0xd4>
    1b9a:	87 e0       	ldi	r24, 0x07	; 7
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>

		DIO_write(LCD_E,HIGH);
    1ba2:	8b e0       	ldi	r24, 0x0B	; 11
    1ba4:	61 e0       	ldi	r22, 0x01	; 1
    1ba6:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    1baa:	fe 01       	movw	r30, r28
    1bac:	e3 5a       	subi	r30, 0xA3	; 163
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a0 e2       	ldi	r26, 0x20	; 32
    1bb6:	b1 e4       	ldi	r27, 0x41	; 65
    1bb8:	80 83       	st	Z, r24
    1bba:	91 83       	std	Z+1, r25	; 0x01
    1bbc:	a2 83       	std	Z+2, r26	; 0x02
    1bbe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bc0:	8e 01       	movw	r16, r28
    1bc2:	07 5a       	subi	r16, 0xA7	; 167
    1bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e3 5a       	subi	r30, 0xA3	; 163
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	2b ea       	ldi	r18, 0xAB	; 171
    1bd6:	3a ea       	ldi	r19, 0xAA	; 170
    1bd8:	4a ea       	ldi	r20, 0xAA	; 170
    1bda:	50 e4       	ldi	r21, 0x40	; 64
    1bdc:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	f8 01       	movw	r30, r16
    1be6:	80 83       	st	Z, r24
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	a2 83       	std	Z+2, r26	; 0x02
    1bec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bee:	fe 01       	movw	r30, r28
    1bf0:	e7 5a       	subi	r30, 0xA7	; 167
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	60 81       	ld	r22, Z
    1bf6:	71 81       	ldd	r23, Z+1	; 0x01
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e8       	ldi	r20, 0x80	; 128
    1c02:	5f e3       	ldi	r21, 0x3F	; 63
    1c04:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    1c08:	88 23       	and	r24, r24
    1c0a:	34 f4       	brge	.+12     	; 0x1c18 <lcd_sendcmd+0x14a>
		__ticks = 1;
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e8 5a       	subi	r30, 0xA8	; 168
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	80 83       	st	Z, r24
    1c16:	e0 c0       	rjmp	.+448    	; 0x1dd8 <lcd_sendcmd+0x30a>
	else if (__tmp > 255)
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e7 5a       	subi	r30, 0xA7	; 167
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4f e7       	ldi	r20, 0x7F	; 127
    1c2c:	53 e4       	ldi	r21, 0x43	; 67
    1c2e:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    1c32:	18 16       	cp	r1, r24
    1c34:	0c f0       	brlt	.+2      	; 0x1c38 <lcd_sendcmd+0x16a>
    1c36:	c0 c0       	rjmp	.+384    	; 0x1db8 <lcd_sendcmd+0x2ea>
	{
		_delay_ms(__us / 1000.0);
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e3 5a       	subi	r30, 0xA3	; 163
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	4a e7       	ldi	r20, 0x7A	; 122
    1c4c:	54 e4       	ldi	r21, 0x44	; 68
    1c4e:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	fe 01       	movw	r30, r28
    1c58:	ec 5a       	subi	r30, 0xAC	; 172
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 83       	st	Z, r24
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	a2 83       	std	Z+2, r26	; 0x02
    1c62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c64:	8e 01       	movw	r16, r28
    1c66:	00 5b       	subi	r16, 0xB0	; 176
    1c68:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ec 5a       	subi	r30, 0xAC	; 172
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	60 81       	ld	r22, Z
    1c72:	71 81       	ldd	r23, Z+1	; 0x01
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	93 81       	ldd	r25, Z+3	; 0x03
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	4a e7       	ldi	r20, 0x7A	; 122
    1c7e:	55 e4       	ldi	r21, 0x45	; 69
    1c80:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	f8 01       	movw	r30, r16
    1c8a:	80 83       	st	Z, r24
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	a2 83       	std	Z+2, r26	; 0x02
    1c90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c92:	fe 01       	movw	r30, r28
    1c94:	e0 5b       	subi	r30, 0xB0	; 176
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	60 81       	ld	r22, Z
    1c9a:	71 81       	ldd	r23, Z+1	; 0x01
    1c9c:	82 81       	ldd	r24, Z+2	; 0x02
    1c9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e8       	ldi	r20, 0x80	; 128
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    1cac:	88 23       	and	r24, r24
    1cae:	44 f4       	brge	.+16     	; 0x1cc0 <lcd_sendcmd+0x1f2>
		__ticks = 1;
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e2 5b       	subi	r30, 0xB2	; 178
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	80 83       	st	Z, r24
    1cbe:	64 c0       	rjmp	.+200    	; 0x1d88 <lcd_sendcmd+0x2ba>
	else if (__tmp > 65535)
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e0 5b       	subi	r30, 0xB0	; 176
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	60 81       	ld	r22, Z
    1cc8:	71 81       	ldd	r23, Z+1	; 0x01
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	93 81       	ldd	r25, Z+3	; 0x03
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	3f ef       	ldi	r19, 0xFF	; 255
    1cd2:	4f e7       	ldi	r20, 0x7F	; 127
    1cd4:	57 e4       	ldi	r21, 0x47	; 71
    1cd6:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    1cda:	18 16       	cp	r1, r24
    1cdc:	0c f0       	brlt	.+2      	; 0x1ce0 <lcd_sendcmd+0x212>
    1cde:	43 c0       	rjmp	.+134    	; 0x1d66 <lcd_sendcmd+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ec 5a       	subi	r30, 0xAC	; 172
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	60 81       	ld	r22, Z
    1ce8:	71 81       	ldd	r23, Z+1	; 0x01
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8e 01       	movw	r16, r28
    1d00:	02 5b       	subi	r16, 0xB2	; 178
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	f8 01       	movw	r30, r16
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
    1d16:	1f c0       	rjmp	.+62     	; 0x1d56 <lcd_sendcmd+0x288>
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e4 5b       	subi	r30, 0xB4	; 180
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 e9       	ldi	r24, 0x90	; 144
    1d20:	91 e0       	ldi	r25, 0x01	; 1
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d26:	fe 01       	movw	r30, r28
    1d28:	e4 5b       	subi	r30, 0xB4	; 180
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <lcd_sendcmd+0x262>
    1d34:	fe 01       	movw	r30, r28
    1d36:	e4 5b       	subi	r30, 0xB4	; 180
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	de 01       	movw	r26, r28
    1d40:	a2 5b       	subi	r26, 0xB2	; 178
    1d42:	bf 4f       	sbci	r27, 0xFF	; 255
    1d44:	fe 01       	movw	r30, r28
    1d46:	e2 5b       	subi	r30, 0xB2	; 178
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	80 81       	ld	r24, Z
    1d4c:	91 81       	ldd	r25, Z+1	; 0x01
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	11 96       	adiw	r26, 0x01	; 1
    1d52:	9c 93       	st	X, r25
    1d54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d56:	fe 01       	movw	r30, r28
    1d58:	e2 5b       	subi	r30, 0xB2	; 178
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	d1 f6       	brne	.-76     	; 0x1d18 <lcd_sendcmd+0x24a>
    1d64:	4b c0       	rjmp	.+150    	; 0x1dfc <lcd_sendcmd+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	8e 01       	movw	r16, r28
    1d68:	02 5b       	subi	r16, 0xB2	; 178
    1d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e0 5b       	subi	r30, 0xB0	; 176
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	f8 01       	movw	r30, r16
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
    1d88:	de 01       	movw	r26, r28
    1d8a:	a6 5b       	subi	r26, 0xB6	; 182
    1d8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e2 5b       	subi	r30, 0xB2	; 178
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	11 96       	adiw	r26, 0x01	; 1
    1d9a:	9c 93       	st	X, r25
    1d9c:	8e 93       	st	-X, r24
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e6 5b       	subi	r30, 0xB6	; 182
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <lcd_sendcmd+0x2da>
    1dac:	fe 01       	movw	r30, r28
    1dae:	e6 5b       	subi	r30, 0xB6	; 182
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
    1db6:	22 c0       	rjmp	.+68     	; 0x1dfc <lcd_sendcmd+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1db8:	8e 01       	movw	r16, r28
    1dba:	08 5a       	subi	r16, 0xA8	; 168
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e7 5a       	subi	r30, 0xA7	; 167
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	80 83       	st	Z, r24
    1dd8:	de 01       	movw	r26, r28
    1dda:	a7 5b       	subi	r26, 0xB7	; 183
    1ddc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dde:	fe 01       	movw	r30, r28
    1de0:	e8 5a       	subi	r30, 0xA8	; 168
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	80 81       	ld	r24, Z
    1de6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1de8:	fe 01       	movw	r30, r28
    1dea:	e7 5b       	subi	r30, 0xB7	; 183
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 81       	ld	r24, Z
    1df0:	8a 95       	dec	r24
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <lcd_sendcmd+0x322>
    1df4:	fe 01       	movw	r30, r28
    1df6:	e7 5b       	subi	r30, 0xB7	; 183
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 83       	st	Z, r24
		_delay_us(10);
		DIO_write(LCD_E,LOW);
    1dfc:	8b e0       	ldi	r24, 0x0B	; 11
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    1e04:	fe 01       	movw	r30, r28
    1e06:	eb 5b       	subi	r30, 0xBB	; 187
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	aa ef       	ldi	r26, 0xFA	; 250
    1e10:	b4 e4       	ldi	r27, 0x44	; 68
    1e12:	80 83       	st	Z, r24
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	a2 83       	std	Z+2, r26	; 0x02
    1e18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e1a:	8e 01       	movw	r16, r28
    1e1c:	0f 5b       	subi	r16, 0xBF	; 191
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	fe 01       	movw	r30, r28
    1e22:	eb 5b       	subi	r30, 0xBB	; 187
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	60 81       	ld	r22, Z
    1e28:	71 81       	ldd	r23, Z+1	; 0x01
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	93 81       	ldd	r25, Z+3	; 0x03
    1e2e:	2b ea       	ldi	r18, 0xAB	; 171
    1e30:	3a ea       	ldi	r19, 0xAA	; 170
    1e32:	4a ea       	ldi	r20, 0xAA	; 170
    1e34:	50 e4       	ldi	r21, 0x40	; 64
    1e36:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	f8 01       	movw	r30, r16
    1e40:	80 83       	st	Z, r24
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	a2 83       	std	Z+2, r26	; 0x02
    1e46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ef 5b       	subi	r30, 0xBF	; 191
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	93 81       	ldd	r25, Z+3	; 0x03
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e8       	ldi	r20, 0x80	; 128
    1e5c:	5f e3       	ldi	r21, 0x3F	; 63
    1e5e:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    1e62:	88 23       	and	r24, r24
    1e64:	34 f4       	brge	.+12     	; 0x1e72 <lcd_sendcmd+0x3a4>
		__ticks = 1;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e0 5c       	subi	r30, 0xC0	; 192
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 83       	st	Z, r24
    1e70:	9d c0       	rjmp	.+314    	; 0x1fac <lcd_sendcmd+0x4de>
	else if (__tmp > 255)
    1e72:	fe 01       	movw	r30, r28
    1e74:	ef 5b       	subi	r30, 0xBF	; 191
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	60 81       	ld	r22, Z
    1e7a:	71 81       	ldd	r23, Z+1	; 0x01
    1e7c:	82 81       	ldd	r24, Z+2	; 0x02
    1e7e:	93 81       	ldd	r25, Z+3	; 0x03
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4f e7       	ldi	r20, 0x7F	; 127
    1e86:	53 e4       	ldi	r21, 0x43	; 67
    1e88:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	0c f0       	brlt	.+2      	; 0x1e92 <lcd_sendcmd+0x3c4>
    1e90:	7e c0       	rjmp	.+252    	; 0x1f8e <lcd_sendcmd+0x4c0>
	{
		_delay_ms(__us / 1000.0);
    1e92:	fe 01       	movw	r30, r28
    1e94:	eb 5b       	subi	r30, 0xBB	; 187
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	60 81       	ld	r22, Z
    1e9a:	71 81       	ldd	r23, Z+1	; 0x01
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	4a e7       	ldi	r20, 0x7A	; 122
    1ea6:	54 e4       	ldi	r21, 0x44	; 68
    1ea8:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	8c af       	std	Y+60, r24	; 0x3c
    1eb2:	9d af       	std	Y+61, r25	; 0x3d
    1eb4:	ae af       	std	Y+62, r26	; 0x3e
    1eb6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1eba:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ebc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ebe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a e7       	ldi	r20, 0x7A	; 122
    1ec6:	55 e4       	ldi	r21, 0x45	; 69
    1ec8:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	88 af       	std	Y+56, r24	; 0x38
    1ed2:	99 af       	std	Y+57, r25	; 0x39
    1ed4:	aa af       	std	Y+58, r26	; 0x3a
    1ed6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1ed8:	68 ad       	ldd	r22, Y+56	; 0x38
    1eda:	79 ad       	ldd	r23, Y+57	; 0x39
    1edc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ede:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <lcd_sendcmd+0x42c>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9f ab       	std	Y+55, r25	; 0x37
    1ef6:	8e ab       	std	Y+54, r24	; 0x36
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <lcd_sendcmd+0x4aa>
	else if (__tmp > 65535)
    1efa:	68 ad       	ldd	r22, Y+56	; 0x38
    1efc:	79 ad       	ldd	r23, Y+57	; 0x39
    1efe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f00:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <lcd_sendcmd+0x496>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f14:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f16:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f18:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9f ab       	std	Y+55, r25	; 0x37
    1f38:	8e ab       	std	Y+54, r24	; 0x36
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <lcd_sendcmd+0x48c>
    1f3c:	80 e9       	ldi	r24, 0x90	; 144
    1f3e:	91 e0       	ldi	r25, 0x01	; 1
    1f40:	9d ab       	std	Y+53, r25	; 0x35
    1f42:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f44:	8c a9       	ldd	r24, Y+52	; 0x34
    1f46:	9d a9       	ldd	r25, Y+53	; 0x35
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <lcd_sendcmd+0x47a>
    1f4c:	9d ab       	std	Y+53, r25	; 0x35
    1f4e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	8e a9       	ldd	r24, Y+54	; 0x36
    1f52:	9f a9       	ldd	r25, Y+55	; 0x37
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9f ab       	std	Y+55, r25	; 0x37
    1f58:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	8e a9       	ldd	r24, Y+54	; 0x36
    1f5c:	9f a9       	ldd	r25, Y+55	; 0x37
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <lcd_sendcmd+0x46e>
    1f62:	2d c0       	rjmp	.+90     	; 0x1fbe <lcd_sendcmd+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	68 ad       	ldd	r22, Y+56	; 0x38
    1f66:	79 ad       	ldd	r23, Y+57	; 0x39
    1f68:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f6a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f6c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9f ab       	std	Y+55, r25	; 0x37
    1f76:	8e ab       	std	Y+54, r24	; 0x36
    1f78:	8e a9       	ldd	r24, Y+54	; 0x36
    1f7a:	9f a9       	ldd	r25, Y+55	; 0x37
    1f7c:	9b ab       	std	Y+51, r25	; 0x33
    1f7e:	8a ab       	std	Y+50, r24	; 0x32
    1f80:	8a a9       	ldd	r24, Y+50	; 0x32
    1f82:	9b a9       	ldd	r25, Y+51	; 0x33
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <lcd_sendcmd+0x4b6>
    1f88:	9b ab       	std	Y+51, r25	; 0x33
    1f8a:	8a ab       	std	Y+50, r24	; 0x32
    1f8c:	18 c0       	rjmp	.+48     	; 0x1fbe <lcd_sendcmd+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ef 5b       	subi	r30, 0xBF	; 191
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	60 81       	ld	r22, Z
    1f96:	71 81       	ldd	r23, Z+1	; 0x01
    1f98:	82 81       	ldd	r24, Z+2	; 0x02
    1f9a:	93 81       	ldd	r25, Z+3	; 0x03
    1f9c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e0 5c       	subi	r30, 0xC0	; 192
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 83       	st	Z, r24
    1fac:	fe 01       	movw	r30, r28
    1fae:	e0 5c       	subi	r30, 0xC0	; 192
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fb6:	89 a9       	ldd	r24, Y+49	; 0x31
    1fb8:	8a 95       	dec	r24
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <lcd_sendcmd+0x4ea>
    1fbc:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(2000);

		if(GET_BIT(cmd,0)){DIO_write(LCD_D4,HIGH);}else {DIO_write(LCD_D4,LOW);}
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	ef 59       	subi	r30, 0x9F	; 159
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	80 81       	ld	r24, Z
    1fc6:	88 2f       	mov	r24, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	81 70       	andi	r24, 0x01	; 1
    1fcc:	90 70       	andi	r25, 0x00	; 0
    1fce:	88 23       	and	r24, r24
    1fd0:	29 f0       	breq	.+10     	; 0x1fdc <lcd_sendcmd+0x50e>
    1fd2:	84 e0       	ldi	r24, 0x04	; 4
    1fd4:	61 e0       	ldi	r22, 0x01	; 1
    1fd6:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    1fda:	04 c0       	rjmp	.+8      	; 0x1fe4 <lcd_sendcmd+0x516>
    1fdc:	84 e0       	ldi	r24, 0x04	; 4
    1fde:	60 e0       	ldi	r22, 0x00	; 0
    1fe0:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
		if(GET_BIT(cmd,1)){DIO_write(LCD_D5,HIGH);}else {DIO_write(LCD_D5,LOW);}
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ef 59       	subi	r30, 0x9F	; 159
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 81       	ld	r24, Z
    1fec:	86 95       	lsr	r24
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	81 70       	andi	r24, 0x01	; 1
    1ff4:	90 70       	andi	r25, 0x00	; 0
    1ff6:	88 23       	and	r24, r24
    1ff8:	29 f0       	breq	.+10     	; 0x2004 <lcd_sendcmd+0x536>
    1ffa:	85 e0       	ldi	r24, 0x05	; 5
    1ffc:	61 e0       	ldi	r22, 0x01	; 1
    1ffe:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    2002:	04 c0       	rjmp	.+8      	; 0x200c <lcd_sendcmd+0x53e>
    2004:	85 e0       	ldi	r24, 0x05	; 5
    2006:	60 e0       	ldi	r22, 0x00	; 0
    2008:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
		if(GET_BIT(cmd,2)){DIO_write(LCD_D6,HIGH);}else {DIO_write(LCD_D6,LOW);}
    200c:	fe 01       	movw	r30, r28
    200e:	ef 59       	subi	r30, 0x9F	; 159
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	80 81       	ld	r24, Z
    2014:	86 95       	lsr	r24
    2016:	86 95       	lsr	r24
    2018:	88 2f       	mov	r24, r24
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	81 70       	andi	r24, 0x01	; 1
    201e:	90 70       	andi	r25, 0x00	; 0
    2020:	88 23       	and	r24, r24
    2022:	29 f0       	breq	.+10     	; 0x202e <lcd_sendcmd+0x560>
    2024:	86 e0       	ldi	r24, 0x06	; 6
    2026:	61 e0       	ldi	r22, 0x01	; 1
    2028:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    202c:	04 c0       	rjmp	.+8      	; 0x2036 <lcd_sendcmd+0x568>
    202e:	86 e0       	ldi	r24, 0x06	; 6
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
		if(GET_BIT(cmd,3)){DIO_write(LCD_D7,HIGH);}else {DIO_write(LCD_D7,LOW);}
    2036:	fe 01       	movw	r30, r28
    2038:	ef 59       	subi	r30, 0x9F	; 159
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	86 95       	lsr	r24
    2040:	86 95       	lsr	r24
    2042:	86 95       	lsr	r24
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	81 70       	andi	r24, 0x01	; 1
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	88 23       	and	r24, r24
    204e:	29 f0       	breq	.+10     	; 0x205a <lcd_sendcmd+0x58c>
    2050:	87 e0       	ldi	r24, 0x07	; 7
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    2058:	04 c0       	rjmp	.+8      	; 0x2062 <lcd_sendcmd+0x594>
    205a:	87 e0       	ldi	r24, 0x07	; 7
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>

		DIO_write(LCD_E,HIGH);
    2062:	8b e0       	ldi	r24, 0x0B	; 11
    2064:	61 e0       	ldi	r22, 0x01	; 1
    2066:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 e2       	ldi	r26, 0x20	; 32
    2070:	b1 e4       	ldi	r27, 0x41	; 65
    2072:	8d a7       	std	Y+45, r24	; 0x2d
    2074:	9e a7       	std	Y+46, r25	; 0x2e
    2076:	af a7       	std	Y+47, r26	; 0x2f
    2078:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    207a:	6d a5       	ldd	r22, Y+45	; 0x2d
    207c:	7e a5       	ldd	r23, Y+46	; 0x2e
    207e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2080:	98 a9       	ldd	r25, Y+48	; 0x30
    2082:	2b ea       	ldi	r18, 0xAB	; 171
    2084:	3a ea       	ldi	r19, 0xAA	; 170
    2086:	4a ea       	ldi	r20, 0xAA	; 170
    2088:	50 e4       	ldi	r21, 0x40	; 64
    208a:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	89 a7       	std	Y+41, r24	; 0x29
    2094:	9a a7       	std	Y+42, r25	; 0x2a
    2096:	ab a7       	std	Y+43, r26	; 0x2b
    2098:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    209a:	69 a5       	ldd	r22, Y+41	; 0x29
    209c:	7a a5       	ldd	r23, Y+42	; 0x2a
    209e:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	1c f4       	brge	.+6      	; 0x20b8 <lcd_sendcmd+0x5ea>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	88 a7       	std	Y+40, r24	; 0x28
    20b6:	91 c0       	rjmp	.+290    	; 0x21da <lcd_sendcmd+0x70c>
	else if (__tmp > 255)
    20b8:	69 a5       	ldd	r22, Y+41	; 0x29
    20ba:	7a a5       	ldd	r23, Y+42	; 0x2a
    20bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20be:	9c a5       	ldd	r25, Y+44	; 0x2c
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	4f e7       	ldi	r20, 0x7F	; 127
    20c6:	53 e4       	ldi	r21, 0x43	; 67
    20c8:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    20cc:	18 16       	cp	r1, r24
    20ce:	0c f0       	brlt	.+2      	; 0x20d2 <lcd_sendcmd+0x604>
    20d0:	7b c0       	rjmp	.+246    	; 0x21c8 <lcd_sendcmd+0x6fa>
	{
		_delay_ms(__us / 1000.0);
    20d2:	6d a5       	ldd	r22, Y+45	; 0x2d
    20d4:	7e a5       	ldd	r23, Y+46	; 0x2e
    20d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d8:	98 a9       	ldd	r25, Y+48	; 0x30
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	4a e7       	ldi	r20, 0x7A	; 122
    20e0:	54 e4       	ldi	r21, 0x44	; 68
    20e2:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	8c a3       	std	Y+36, r24	; 0x24
    20ec:	9d a3       	std	Y+37, r25	; 0x25
    20ee:	ae a3       	std	Y+38, r26	; 0x26
    20f0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	6c a1       	ldd	r22, Y+36	; 0x24
    20f4:	7d a1       	ldd	r23, Y+37	; 0x25
    20f6:	8e a1       	ldd	r24, Y+38	; 0x26
    20f8:	9f a1       	ldd	r25, Y+39	; 0x27
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a e7       	ldi	r20, 0x7A	; 122
    2100:	55 e4       	ldi	r21, 0x45	; 69
    2102:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	88 a3       	std	Y+32, r24	; 0x20
    210c:	99 a3       	std	Y+33, r25	; 0x21
    210e:	aa a3       	std	Y+34, r26	; 0x22
    2110:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2112:	68 a1       	ldd	r22, Y+32	; 0x20
    2114:	79 a1       	ldd	r23, Y+33	; 0x21
    2116:	8a a1       	ldd	r24, Y+34	; 0x22
    2118:	9b a1       	ldd	r25, Y+35	; 0x23
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <lcd_sendcmd+0x666>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9f 8f       	std	Y+31, r25	; 0x1f
    2130:	8e 8f       	std	Y+30, r24	; 0x1e
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <lcd_sendcmd+0x6e4>
	else if (__tmp > 65535)
    2134:	68 a1       	ldd	r22, Y+32	; 0x20
    2136:	79 a1       	ldd	r23, Y+33	; 0x21
    2138:	8a a1       	ldd	r24, Y+34	; 0x22
    213a:	9b a1       	ldd	r25, Y+35	; 0x23
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <lcd_sendcmd+0x6d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	6c a1       	ldd	r22, Y+36	; 0x24
    214e:	7d a1       	ldd	r23, Y+37	; 0x25
    2150:	8e a1       	ldd	r24, Y+38	; 0x26
    2152:	9f a1       	ldd	r25, Y+39	; 0x27
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9f 8f       	std	Y+31, r25	; 0x1f
    2172:	8e 8f       	std	Y+30, r24	; 0x1e
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <lcd_sendcmd+0x6c6>
    2176:	80 e9       	ldi	r24, 0x90	; 144
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	9d 8f       	std	Y+29, r25	; 0x1d
    217c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    217e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2180:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <lcd_sendcmd+0x6b4>
    2186:	9d 8f       	std	Y+29, r25	; 0x1d
    2188:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    218c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9f 8f       	std	Y+31, r25	; 0x1f
    2192:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2196:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <lcd_sendcmd+0x6a8>
    219c:	24 c0       	rjmp	.+72     	; 0x21e6 <lcd_sendcmd+0x718>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	68 a1       	ldd	r22, Y+32	; 0x20
    21a0:	79 a1       	ldd	r23, Y+33	; 0x21
    21a2:	8a a1       	ldd	r24, Y+34	; 0x22
    21a4:	9b a1       	ldd	r25, Y+35	; 0x23
    21a6:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9f 8f       	std	Y+31, r25	; 0x1f
    21b0:	8e 8f       	std	Y+30, r24	; 0x1e
    21b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21b6:	9b 8f       	std	Y+27, r25	; 0x1b
    21b8:	8a 8f       	std	Y+26, r24	; 0x1a
    21ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21bc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <lcd_sendcmd+0x6f0>
    21c2:	9b 8f       	std	Y+27, r25	; 0x1b
    21c4:	8a 8f       	std	Y+26, r24	; 0x1a
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <lcd_sendcmd+0x718>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21c8:	69 a5       	ldd	r22, Y+41	; 0x29
    21ca:	7a a5       	ldd	r23, Y+42	; 0x2a
    21cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    21d0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	88 a7       	std	Y+40, r24	; 0x28
    21da:	88 a5       	ldd	r24, Y+40	; 0x28
    21dc:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21de:	89 8d       	ldd	r24, Y+25	; 0x19
    21e0:	8a 95       	dec	r24
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <lcd_sendcmd+0x712>
    21e4:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(10);
		DIO_write(LCD_E,LOW);
    21e6:	8b e0       	ldi	r24, 0x0B	; 11
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	0e 94 22 01 	call	0x244	; 0x244 <DIO_write>
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	aa ef       	ldi	r26, 0xFA	; 250
    21f4:	b4 e4       	ldi	r27, 0x44	; 68
    21f6:	8d 8b       	std	Y+21, r24	; 0x15
    21f8:	9e 8b       	std	Y+22, r25	; 0x16
    21fa:	af 8b       	std	Y+23, r26	; 0x17
    21fc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2200:	7e 89       	ldd	r23, Y+22	; 0x16
    2202:	8f 89       	ldd	r24, Y+23	; 0x17
    2204:	98 8d       	ldd	r25, Y+24	; 0x18
    2206:	2b ea       	ldi	r18, 0xAB	; 171
    2208:	3a ea       	ldi	r19, 0xAA	; 170
    220a:	4a ea       	ldi	r20, 0xAA	; 170
    220c:	50 e4       	ldi	r21, 0x40	; 64
    220e:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	89 8b       	std	Y+17, r24	; 0x11
    2218:	9a 8b       	std	Y+18, r25	; 0x12
    221a:	ab 8b       	std	Y+19, r26	; 0x13
    221c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    221e:	69 89       	ldd	r22, Y+17	; 0x11
    2220:	7a 89       	ldd	r23, Y+18	; 0x12
    2222:	8b 89       	ldd	r24, Y+19	; 0x13
    2224:	9c 89       	ldd	r25, Y+20	; 0x14
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e8       	ldi	r20, 0x80	; 128
    222c:	5f e3       	ldi	r21, 0x3F	; 63
    222e:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    2232:	88 23       	and	r24, r24
    2234:	1c f4       	brge	.+6      	; 0x223c <lcd_sendcmd+0x76e>
		__ticks = 1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	88 8b       	std	Y+16, r24	; 0x10
    223a:	91 c0       	rjmp	.+290    	; 0x235e <lcd_sendcmd+0x890>
	else if (__tmp > 255)
    223c:	69 89       	ldd	r22, Y+17	; 0x11
    223e:	7a 89       	ldd	r23, Y+18	; 0x12
    2240:	8b 89       	ldd	r24, Y+19	; 0x13
    2242:	9c 89       	ldd	r25, Y+20	; 0x14
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	4f e7       	ldi	r20, 0x7F	; 127
    224a:	53 e4       	ldi	r21, 0x43	; 67
    224c:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    2250:	18 16       	cp	r1, r24
    2252:	0c f0       	brlt	.+2      	; 0x2256 <lcd_sendcmd+0x788>
    2254:	7b c0       	rjmp	.+246    	; 0x234c <lcd_sendcmd+0x87e>
	{
		_delay_ms(__us / 1000.0);
    2256:	6d 89       	ldd	r22, Y+21	; 0x15
    2258:	7e 89       	ldd	r23, Y+22	; 0x16
    225a:	8f 89       	ldd	r24, Y+23	; 0x17
    225c:	98 8d       	ldd	r25, Y+24	; 0x18
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	4a e7       	ldi	r20, 0x7A	; 122
    2264:	54 e4       	ldi	r21, 0x44	; 68
    2266:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	8c 87       	std	Y+12, r24	; 0x0c
    2270:	9d 87       	std	Y+13, r25	; 0x0d
    2272:	ae 87       	std	Y+14, r26	; 0x0e
    2274:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2276:	6c 85       	ldd	r22, Y+12	; 0x0c
    2278:	7d 85       	ldd	r23, Y+13	; 0x0d
    227a:	8e 85       	ldd	r24, Y+14	; 0x0e
    227c:	9f 85       	ldd	r25, Y+15	; 0x0f
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4a e7       	ldi	r20, 0x7A	; 122
    2284:	55 e4       	ldi	r21, 0x45	; 69
    2286:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	88 87       	std	Y+8, r24	; 0x08
    2290:	99 87       	std	Y+9, r25	; 0x09
    2292:	aa 87       	std	Y+10, r26	; 0x0a
    2294:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2296:	68 85       	ldd	r22, Y+8	; 0x08
    2298:	79 85       	ldd	r23, Y+9	; 0x09
    229a:	8a 85       	ldd	r24, Y+10	; 0x0a
    229c:	9b 85       	ldd	r25, Y+11	; 0x0b
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    22aa:	88 23       	and	r24, r24
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <lcd_sendcmd+0x7ea>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9f 83       	std	Y+7, r25	; 0x07
    22b4:	8e 83       	std	Y+6, r24	; 0x06
    22b6:	3f c0       	rjmp	.+126    	; 0x2336 <lcd_sendcmd+0x868>
	else if (__tmp > 65535)
    22b8:	68 85       	ldd	r22, Y+8	; 0x08
    22ba:	79 85       	ldd	r23, Y+9	; 0x09
    22bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    22be:	9b 85       	ldd	r25, Y+11	; 0x0b
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	3f ef       	ldi	r19, 0xFF	; 255
    22c4:	4f e7       	ldi	r20, 0x7F	; 127
    22c6:	57 e4       	ldi	r21, 0x47	; 71
    22c8:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	4c f5       	brge	.+82     	; 0x2322 <lcd_sendcmd+0x854>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    22d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    22d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    22d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e2       	ldi	r20, 0x20	; 32
    22de:	51 e4       	ldi	r21, 0x41	; 65
    22e0:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9f 83       	std	Y+7, r25	; 0x07
    22f6:	8e 83       	std	Y+6, r24	; 0x06
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <lcd_sendcmd+0x84a>
    22fa:	80 e9       	ldi	r24, 0x90	; 144
    22fc:	91 e0       	ldi	r25, 0x01	; 1
    22fe:	9d 83       	std	Y+5, r25	; 0x05
    2300:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2302:	8c 81       	ldd	r24, Y+4	; 0x04
    2304:	9d 81       	ldd	r25, Y+5	; 0x05
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <lcd_sendcmd+0x838>
    230a:	9d 83       	std	Y+5, r25	; 0x05
    230c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230e:	8e 81       	ldd	r24, Y+6	; 0x06
    2310:	9f 81       	ldd	r25, Y+7	; 0x07
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	9f 83       	std	Y+7, r25	; 0x07
    2316:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2318:	8e 81       	ldd	r24, Y+6	; 0x06
    231a:	9f 81       	ldd	r25, Y+7	; 0x07
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	69 f7       	brne	.-38     	; 0x22fa <lcd_sendcmd+0x82c>
    2320:	24 c0       	rjmp	.+72     	; 0x236a <lcd_sendcmd+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2322:	68 85       	ldd	r22, Y+8	; 0x08
    2324:	79 85       	ldd	r23, Y+9	; 0x09
    2326:	8a 85       	ldd	r24, Y+10	; 0x0a
    2328:	9b 85       	ldd	r25, Y+11	; 0x0b
    232a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9f 83       	std	Y+7, r25	; 0x07
    2334:	8e 83       	std	Y+6, r24	; 0x06
    2336:	8e 81       	ldd	r24, Y+6	; 0x06
    2338:	9f 81       	ldd	r25, Y+7	; 0x07
    233a:	9b 83       	std	Y+3, r25	; 0x03
    233c:	8a 83       	std	Y+2, r24	; 0x02
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	9b 81       	ldd	r25, Y+3	; 0x03
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <lcd_sendcmd+0x874>
    2346:	9b 83       	std	Y+3, r25	; 0x03
    2348:	8a 83       	std	Y+2, r24	; 0x02
    234a:	0f c0       	rjmp	.+30     	; 0x236a <lcd_sendcmd+0x89c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    234c:	69 89       	ldd	r22, Y+17	; 0x11
    234e:	7a 89       	ldd	r23, Y+18	; 0x12
    2350:	8b 89       	ldd	r24, Y+19	; 0x13
    2352:	9c 89       	ldd	r25, Y+20	; 0x14
    2354:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	88 8b       	std	Y+16, r24	; 0x10
    235e:	88 89       	ldd	r24, Y+16	; 0x10
    2360:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	8a 95       	dec	r24
    2366:	f1 f7       	brne	.-4      	; 0x2364 <lcd_sendcmd+0x896>
    2368:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(2000);

}
    236a:	cf 59       	subi	r28, 0x9F	; 159
    236c:	df 4f       	sbci	r29, 0xFF	; 255
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	de bf       	out	0x3e, r29	; 62
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	cd bf       	out	0x3d, r28	; 61
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	1f 91       	pop	r17
    237e:	0f 91       	pop	r16
    2380:	08 95       	ret

00002382 <lcd_sendstring>:

void lcd_sendstring(unsigned char * string)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <lcd_sendstring+0x6>
    2388:	00 d0       	rcall	.+0      	; 0x238a <lcd_sendstring+0x8>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
   int i=0;
    2392:	1a 82       	std	Y+2, r1	; 0x02
    2394:	19 82       	std	Y+1, r1	; 0x01
   for(i=0;string[i]!=0;i++)
    2396:	1a 82       	std	Y+2, r1	; 0x02
    2398:	19 82       	std	Y+1, r1	; 0x01
    239a:	0f c0       	rjmp	.+30     	; 0x23ba <lcd_sendstring+0x38>
   {
	lcd_sendchar(string[i]);
    239c:	29 81       	ldd	r18, Y+1	; 0x01
    239e:	3a 81       	ldd	r19, Y+2	; 0x02
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	fc 01       	movw	r30, r24
    23a6:	e2 0f       	add	r30, r18
    23a8:	f3 1f       	adc	r31, r19
    23aa:	80 81       	ld	r24, Z
    23ac:	0e 94 0d 09 	call	0x121a	; 0x121a <lcd_sendchar>
}

void lcd_sendstring(unsigned char * string)
{
   int i=0;
   for(i=0;string[i]!=0;i++)
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	01 96       	adiw	r24, 0x01	; 1
    23b6:	9a 83       	std	Y+2, r25	; 0x02
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	29 81       	ldd	r18, Y+1	; 0x01
    23bc:	3a 81       	ldd	r19, Y+2	; 0x02
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	fc 01       	movw	r30, r24
    23c4:	e2 0f       	add	r30, r18
    23c6:	f3 1f       	adc	r31, r19
    23c8:	80 81       	ld	r24, Z
    23ca:	88 23       	and	r24, r24
    23cc:	39 f7       	brne	.-50     	; 0x239c <lcd_sendstring+0x1a>
   {
	lcd_sendchar(string[i]);
   }

}
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <glcd_cmd>:




void glcd_cmd(unsigned char cmd) //subroutine for command
 {
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	6d 97       	sbiw	r28, 0x1d	; 29
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	8d 8f       	std	Y+29, r24	; 0x1d
	   PORTC=cmd;
    23f2:	e5 e3       	ldi	r30, 0x35	; 53
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f8:	80 83       	st	Z, r24

	SET_BIT(PORTD,0); // Enable GLCD
    23fa:	a2 e3       	ldi	r26, 0x32	; 50
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e2 e3       	ldi	r30, 0x32	; 50
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	81 60       	ori	r24, 0x01	; 1
    2406:	8c 93       	st	X, r24
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e0       	ldi	r26, 0x00	; 0
    240e:	b0 e4       	ldi	r27, 0x40	; 64
    2410:	89 8f       	std	Y+25, r24	; 0x19
    2412:	9a 8f       	std	Y+26, r25	; 0x1a
    2414:	ab 8f       	std	Y+27, r26	; 0x1b
    2416:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	69 8d       	ldd	r22, Y+25	; 0x19
    241a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a e7       	ldi	r20, 0x7A	; 122
    2426:	55 e4       	ldi	r21, 0x45	; 69
    2428:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8d 8b       	std	Y+21, r24	; 0x15
    2432:	9e 8b       	std	Y+22, r25	; 0x16
    2434:	af 8b       	std	Y+23, r26	; 0x17
    2436:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2438:	6d 89       	ldd	r22, Y+21	; 0x15
    243a:	7e 89       	ldd	r23, Y+22	; 0x16
    243c:	8f 89       	ldd	r24, Y+23	; 0x17
    243e:	98 8d       	ldd	r25, Y+24	; 0x18
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <glcd_cmd+0x7e>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9c 8b       	std	Y+20, r25	; 0x14
    2456:	8b 8b       	std	Y+19, r24	; 0x13
    2458:	3f c0       	rjmp	.+126    	; 0x24d8 <glcd_cmd+0xfc>
	else if (__tmp > 65535)
    245a:	6d 89       	ldd	r22, Y+21	; 0x15
    245c:	7e 89       	ldd	r23, Y+22	; 0x16
    245e:	8f 89       	ldd	r24, Y+23	; 0x17
    2460:	98 8d       	ldd	r25, Y+24	; 0x18
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	3f ef       	ldi	r19, 0xFF	; 255
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	57 e4       	ldi	r21, 0x47	; 71
    246a:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	4c f5       	brge	.+82     	; 0x24c4 <glcd_cmd+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	69 8d       	ldd	r22, Y+25	; 0x19
    2474:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9c 8b       	std	Y+20, r25	; 0x14
    2498:	8b 8b       	std	Y+19, r24	; 0x13
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <glcd_cmd+0xde>
    249c:	80 e9       	ldi	r24, 0x90	; 144
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	9a 8b       	std	Y+18, r25	; 0x12
    24a2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	9a 89       	ldd	r25, Y+18	; 0x12
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <glcd_cmd+0xcc>
    24ac:	9a 8b       	std	Y+18, r25	; 0x12
    24ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	8b 89       	ldd	r24, Y+19	; 0x13
    24b2:	9c 89       	ldd	r25, Y+20	; 0x14
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9c 8b       	std	Y+20, r25	; 0x14
    24b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	8b 89       	ldd	r24, Y+19	; 0x13
    24bc:	9c 89       	ldd	r25, Y+20	; 0x14
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <glcd_cmd+0xc0>
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <glcd_cmd+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	6d 89       	ldd	r22, Y+21	; 0x15
    24c6:	7e 89       	ldd	r23, Y+22	; 0x16
    24c8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ca:	98 8d       	ldd	r25, Y+24	; 0x18
    24cc:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9c 8b       	std	Y+20, r25	; 0x14
    24d6:	8b 8b       	std	Y+19, r24	; 0x13
    24d8:	8b 89       	ldd	r24, Y+19	; 0x13
    24da:	9c 89       	ldd	r25, Y+20	; 0x14
    24dc:	98 8b       	std	Y+16, r25	; 0x10
    24de:	8f 87       	std	Y+15, r24	; 0x0f
    24e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e2:	98 89       	ldd	r25, Y+16	; 0x10
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <glcd_cmd+0x108>
    24e8:	98 8b       	std	Y+16, r25	; 0x10
    24ea:	8f 87       	std	Y+15, r24	; 0x0f
   _delay_ms(2);

   CLR_BIT(PORTD,2); // To create an instruction
    24ec:	a2 e3       	ldi	r26, 0x32	; 50
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e2 e3       	ldi	r30, 0x32	; 50
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	8b 7f       	andi	r24, 0xFB	; 251
    24f8:	8c 93       	st	X, r24
   CLR_BIT(PORTD,1); // To write instruction
    24fa:	a2 e3       	ldi	r26, 0x32	; 50
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e2 e3       	ldi	r30, 0x32	; 50
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	8d 7f       	andi	r24, 0xFD	; 253
    2506:	8c 93       	st	X, r24
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a0 e0       	ldi	r26, 0x00	; 0
    250e:	b0 e4       	ldi	r27, 0x40	; 64
    2510:	8b 87       	std	Y+11, r24	; 0x0b
    2512:	9c 87       	std	Y+12, r25	; 0x0c
    2514:	ad 87       	std	Y+13, r26	; 0x0d
    2516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	6b 85       	ldd	r22, Y+11	; 0x0b
    251a:	7c 85       	ldd	r23, Y+12	; 0x0c
    251c:	8d 85       	ldd	r24, Y+13	; 0x0d
    251e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a e7       	ldi	r20, 0x7A	; 122
    2526:	55 e4       	ldi	r21, 0x45	; 69
    2528:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	8f 83       	std	Y+7, r24	; 0x07
    2532:	98 87       	std	Y+8, r25	; 0x08
    2534:	a9 87       	std	Y+9, r26	; 0x09
    2536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	2c f4       	brge	.+10     	; 0x255a <glcd_cmd+0x17e>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <glcd_cmd+0x1fc>
	else if (__tmp > 65535)
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	3f ef       	ldi	r19, 0xFF	; 255
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	57 e4       	ldi	r21, 0x47	; 71
    256a:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	4c f5       	brge	.+82     	; 0x25c4 <glcd_cmd+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	6b 85       	ldd	r22, Y+11	; 0x0b
    2574:	7c 85       	ldd	r23, Y+12	; 0x0c
    2576:	8d 85       	ldd	r24, Y+13	; 0x0d
    2578:	9e 85       	ldd	r25, Y+14	; 0x0e
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <glcd_cmd+0x1de>
    259c:	80 e9       	ldi	r24, 0x90	; 144
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	9c 83       	std	Y+4, r25	; 0x04
    25a2:	8b 83       	std	Y+3, r24	; 0x03
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <glcd_cmd+0x1cc>
    25ac:	9c 83       	std	Y+4, r25	; 0x04
    25ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f7       	brne	.-38     	; 0x259c <glcd_cmd+0x1c0>
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <glcd_cmd+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	6f 81       	ldd	r22, Y+7	; 0x07
    25c6:	78 85       	ldd	r23, Y+8	; 0x08
    25c8:	89 85       	ldd	r24, Y+9	; 0x09
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	9a 83       	std	Y+2, r25	; 0x02
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	9a 81       	ldd	r25, Y+2	; 0x02
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <glcd_cmd+0x208>
    25e8:	9a 83       	std	Y+2, r25	; 0x02
    25ea:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(2);
 }
    25ec:	6d 96       	adiw	r28, 0x1d	; 29
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	08 95       	ret

000025fe <glcd_data>:

void glcd_data(unsigned char dat)  //subroutine for data
 {
    25fe:	df 93       	push	r29
    2600:	cf 93       	push	r28
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	6d 97       	sbiw	r28, 0x1d	; 29
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	de bf       	out	0x3e, r29	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	cd bf       	out	0x3d, r28	; 61
    2612:	8d 8f       	std	Y+29, r24	; 0x1d
	  PORTC=dat;
    2614:	e5 e3       	ldi	r30, 0x35	; 53
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	8d 8d       	ldd	r24, Y+29	; 0x1d
    261a:	80 83       	st	Z, r24
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	a0 e0       	ldi	r26, 0x00	; 0
    2622:	b0 e4       	ldi	r27, 0x40	; 64
    2624:	89 8f       	std	Y+25, r24	; 0x19
    2626:	9a 8f       	std	Y+26, r25	; 0x1a
    2628:	ab 8f       	std	Y+27, r26	; 0x1b
    262a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262c:	69 8d       	ldd	r22, Y+25	; 0x19
    262e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	4a e7       	ldi	r20, 0x7A	; 122
    263a:	55 e4       	ldi	r21, 0x45	; 69
    263c:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	8d 8b       	std	Y+21, r24	; 0x15
    2646:	9e 8b       	std	Y+22, r25	; 0x16
    2648:	af 8b       	std	Y+23, r26	; 0x17
    264a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    264c:	6d 89       	ldd	r22, Y+21	; 0x15
    264e:	7e 89       	ldd	r23, Y+22	; 0x16
    2650:	8f 89       	ldd	r24, Y+23	; 0x17
    2652:	98 8d       	ldd	r25, Y+24	; 0x18
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e8       	ldi	r20, 0x80	; 128
    265a:	5f e3       	ldi	r21, 0x3F	; 63
    265c:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    2660:	88 23       	and	r24, r24
    2662:	2c f4       	brge	.+10     	; 0x266e <glcd_data+0x70>
		__ticks = 1;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 8b       	std	Y+20, r25	; 0x14
    266a:	8b 8b       	std	Y+19, r24	; 0x13
    266c:	3f c0       	rjmp	.+126    	; 0x26ec <glcd_data+0xee>
	else if (__tmp > 65535)
    266e:	6d 89       	ldd	r22, Y+21	; 0x15
    2670:	7e 89       	ldd	r23, Y+22	; 0x16
    2672:	8f 89       	ldd	r24, Y+23	; 0x17
    2674:	98 8d       	ldd	r25, Y+24	; 0x18
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	3f ef       	ldi	r19, 0xFF	; 255
    267a:	4f e7       	ldi	r20, 0x7F	; 127
    267c:	57 e4       	ldi	r21, 0x47	; 71
    267e:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    2682:	18 16       	cp	r1, r24
    2684:	4c f5       	brge	.+82     	; 0x26d8 <glcd_data+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2686:	69 8d       	ldd	r22, Y+25	; 0x19
    2688:	7a 8d       	ldd	r23, Y+26	; 0x1a
    268a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e2       	ldi	r20, 0x20	; 32
    2694:	51 e4       	ldi	r21, 0x41	; 65
    2696:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9c 8b       	std	Y+20, r25	; 0x14
    26ac:	8b 8b       	std	Y+19, r24	; 0x13
    26ae:	0f c0       	rjmp	.+30     	; 0x26ce <glcd_data+0xd0>
    26b0:	80 e9       	ldi	r24, 0x90	; 144
    26b2:	91 e0       	ldi	r25, 0x01	; 1
    26b4:	9a 8b       	std	Y+18, r25	; 0x12
    26b6:	89 8b       	std	Y+17, r24	; 0x11
    26b8:	89 89       	ldd	r24, Y+17	; 0x11
    26ba:	9a 89       	ldd	r25, Y+18	; 0x12
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <glcd_data+0xbe>
    26c0:	9a 8b       	std	Y+18, r25	; 0x12
    26c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c4:	8b 89       	ldd	r24, Y+19	; 0x13
    26c6:	9c 89       	ldd	r25, Y+20	; 0x14
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ce:	8b 89       	ldd	r24, Y+19	; 0x13
    26d0:	9c 89       	ldd	r25, Y+20	; 0x14
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	69 f7       	brne	.-38     	; 0x26b0 <glcd_data+0xb2>
    26d6:	14 c0       	rjmp	.+40     	; 0x2700 <glcd_data+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	9c 8b       	std	Y+20, r25	; 0x14
    26ea:	8b 8b       	std	Y+19, r24	; 0x13
    26ec:	8b 89       	ldd	r24, Y+19	; 0x13
    26ee:	9c 89       	ldd	r25, Y+20	; 0x14
    26f0:	98 8b       	std	Y+16, r25	; 0x10
    26f2:	8f 87       	std	Y+15, r24	; 0x0f
    26f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f6:	98 89       	ldd	r25, Y+16	; 0x10
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <glcd_data+0xfa>
    26fc:	98 8b       	std	Y+16, r25	; 0x10
    26fe:	8f 87       	std	Y+15, r24	; 0x0f

   _delay_ms(2);
   SET_BIT(PORTD,0);
    2700:	a2 e3       	ldi	r26, 0x32	; 50
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e2 e3       	ldi	r30, 0x32	; 50
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	81 60       	ori	r24, 0x01	; 1
    270c:	8c 93       	st	X, r24
  SET_BIT(PORTD,2);
    270e:	a2 e3       	ldi	r26, 0x32	; 50
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e2 e3       	ldi	r30, 0x32	; 50
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	84 60       	ori	r24, 0x04	; 4
    271a:	8c 93       	st	X, r24
  CLR_BIT(PORTD,1);
    271c:	a2 e3       	ldi	r26, 0x32	; 50
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	e2 e3       	ldi	r30, 0x32	; 50
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	8d 7f       	andi	r24, 0xFD	; 253
    2728:	8c 93       	st	X, r24
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	a0 e0       	ldi	r26, 0x00	; 0
    2730:	b0 e4       	ldi	r27, 0x40	; 64
    2732:	8b 87       	std	Y+11, r24	; 0x0b
    2734:	9c 87       	std	Y+12, r25	; 0x0c
    2736:	ad 87       	std	Y+13, r26	; 0x0d
    2738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273a:	6b 85       	ldd	r22, Y+11	; 0x0b
    273c:	7c 85       	ldd	r23, Y+12	; 0x0c
    273e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2740:	9e 85       	ldd	r25, Y+14	; 0x0e
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	4a e7       	ldi	r20, 0x7A	; 122
    2748:	55 e4       	ldi	r21, 0x45	; 69
    274a:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	8f 83       	std	Y+7, r24	; 0x07
    2754:	98 87       	std	Y+8, r25	; 0x08
    2756:	a9 87       	std	Y+9, r26	; 0x09
    2758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    275a:	6f 81       	ldd	r22, Y+7	; 0x07
    275c:	78 85       	ldd	r23, Y+8	; 0x08
    275e:	89 85       	ldd	r24, Y+9	; 0x09
    2760:	9a 85       	ldd	r25, Y+10	; 0x0a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e8       	ldi	r20, 0x80	; 128
    2768:	5f e3       	ldi	r21, 0x3F	; 63
    276a:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    276e:	88 23       	and	r24, r24
    2770:	2c f4       	brge	.+10     	; 0x277c <glcd_data+0x17e>
		__ticks = 1;
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9e 83       	std	Y+6, r25	; 0x06
    2778:	8d 83       	std	Y+5, r24	; 0x05
    277a:	3f c0       	rjmp	.+126    	; 0x27fa <glcd_data+0x1fc>
	else if (__tmp > 65535)
    277c:	6f 81       	ldd	r22, Y+7	; 0x07
    277e:	78 85       	ldd	r23, Y+8	; 0x08
    2780:	89 85       	ldd	r24, Y+9	; 0x09
    2782:	9a 85       	ldd	r25, Y+10	; 0x0a
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	3f ef       	ldi	r19, 0xFF	; 255
    2788:	4f e7       	ldi	r20, 0x7F	; 127
    278a:	57 e4       	ldi	r21, 0x47	; 71
    278c:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    2790:	18 16       	cp	r1, r24
    2792:	4c f5       	brge	.+82     	; 0x27e6 <glcd_data+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2794:	6b 85       	ldd	r22, Y+11	; 0x0b
    2796:	7c 85       	ldd	r23, Y+12	; 0x0c
    2798:	8d 85       	ldd	r24, Y+13	; 0x0d
    279a:	9e 85       	ldd	r25, Y+14	; 0x0e
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e2       	ldi	r20, 0x20	; 32
    27a2:	51 e4       	ldi	r21, 0x41	; 65
    27a4:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9e 83       	std	Y+6, r25	; 0x06
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	0f c0       	rjmp	.+30     	; 0x27dc <glcd_data+0x1de>
    27be:	80 e9       	ldi	r24, 0x90	; 144
    27c0:	91 e0       	ldi	r25, 0x01	; 1
    27c2:	9c 83       	std	Y+4, r25	; 0x04
    27c4:	8b 83       	std	Y+3, r24	; 0x03
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <glcd_data+0x1cc>
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	9e 83       	std	Y+6, r25	; 0x06
    27da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	69 f7       	brne	.-38     	; 0x27be <glcd_data+0x1c0>
    27e4:	14 c0       	rjmp	.+40     	; 0x280e <glcd_data+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e6:	6f 81       	ldd	r22, Y+7	; 0x07
    27e8:	78 85       	ldd	r23, Y+8	; 0x08
    27ea:	89 85       	ldd	r24, Y+9	; 0x09
    27ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ee:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9e 83       	std	Y+6, r25	; 0x06
    27f8:	8d 83       	std	Y+5, r24	; 0x05
    27fa:	8d 81       	ldd	r24, Y+5	; 0x05
    27fc:	9e 81       	ldd	r25, Y+6	; 0x06
    27fe:	9a 83       	std	Y+2, r25	; 0x02
    2800:	89 83       	std	Y+1, r24	; 0x01
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <glcd_data+0x208>
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(2);
   CLR_BIT(PORTD,0);
    280e:	a2 e3       	ldi	r26, 0x32	; 50
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e2 e3       	ldi	r30, 0x32	; 50
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	8e 7f       	andi	r24, 0xFE	; 254
    281a:	8c 93       	st	X, r24
 }
    281c:	6d 96       	adiw	r28, 0x1d	; 29
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <glcd_init>:

void glcd_init()                //subroutine for initialaization
{
    282e:	df 93       	push	r29
    2830:	cf 93       	push	r28
    2832:	00 d0       	rcall	.+0      	; 0x2834 <glcd_init+0x6>
    2834:	00 d0       	rcall	.+0      	; 0x2836 <glcd_init+0x8>
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
  unsigned char command[4]={0x10,0xb8,0x40,0x3f};
    283a:	80 e1       	ldi	r24, 0x10	; 16
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	88 eb       	ldi	r24, 0xB8	; 184
    2840:	8a 83       	std	Y+2, r24	; 0x02
    2842:	80 e4       	ldi	r24, 0x40	; 64
    2844:	8b 83       	std	Y+3, r24	; 0x03
    2846:	8f e3       	ldi	r24, 0x3F	; 63
    2848:	8c 83       	std	Y+4, r24	; 0x04
  select_chip(1);                      //Chip selection
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	0e 94 76 14 	call	0x28ec	; 0x28ec <select_chip>
  for(i=0;i<4;i++)
    2852:	10 92 f5 01 	sts	0x01F5, r1
    2856:	10 92 f4 01 	sts	0x01F4, r1
    285a:	15 c0       	rjmp	.+42     	; 0x2886 <glcd_init+0x58>
  glcd_cmd(command[i]);
    285c:	20 91 f4 01 	lds	r18, 0x01F4
    2860:	30 91 f5 01 	lds	r19, 0x01F5
    2864:	ce 01       	movw	r24, r28
    2866:	01 96       	adiw	r24, 0x01	; 1
    2868:	fc 01       	movw	r30, r24
    286a:	e2 0f       	add	r30, r18
    286c:	f3 1f       	adc	r31, r19
    286e:	80 81       	ld	r24, Z
    2870:	0e 94 ee 11 	call	0x23dc	; 0x23dc <glcd_cmd>

void glcd_init()                //subroutine for initialaization
{
  unsigned char command[4]={0x10,0xb8,0x40,0x3f};
  select_chip(1);                      //Chip selection
  for(i=0;i<4;i++)
    2874:	80 91 f4 01 	lds	r24, 0x01F4
    2878:	90 91 f5 01 	lds	r25, 0x01F5
    287c:	01 96       	adiw	r24, 0x01	; 1
    287e:	90 93 f5 01 	sts	0x01F5, r25
    2882:	80 93 f4 01 	sts	0x01F4, r24
    2886:	80 91 f4 01 	lds	r24, 0x01F4
    288a:	90 91 f5 01 	lds	r25, 0x01F5
    288e:	84 30       	cpi	r24, 0x04	; 4
    2890:	91 05       	cpc	r25, r1
    2892:	24 f3       	brlt	.-56     	; 0x285c <glcd_init+0x2e>
  glcd_cmd(command[i]);
  select_chip(0);
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 76 14 	call	0x28ec	; 0x28ec <select_chip>
  for(i=0;i<4;i++)
    289c:	10 92 f5 01 	sts	0x01F5, r1
    28a0:	10 92 f4 01 	sts	0x01F4, r1
    28a4:	15 c0       	rjmp	.+42     	; 0x28d0 <glcd_init+0xa2>
   glcd_cmd(command[i]);
    28a6:	20 91 f4 01 	lds	r18, 0x01F4
    28aa:	30 91 f5 01 	lds	r19, 0x01F5
    28ae:	ce 01       	movw	r24, r28
    28b0:	01 96       	adiw	r24, 0x01	; 1
    28b2:	fc 01       	movw	r30, r24
    28b4:	e2 0f       	add	r30, r18
    28b6:	f3 1f       	adc	r31, r19
    28b8:	80 81       	ld	r24, Z
    28ba:	0e 94 ee 11 	call	0x23dc	; 0x23dc <glcd_cmd>
  unsigned char command[4]={0x10,0xb8,0x40,0x3f};
  select_chip(1);                      //Chip selection
  for(i=0;i<4;i++)
  glcd_cmd(command[i]);
  select_chip(0);
  for(i=0;i<4;i++)
    28be:	80 91 f4 01 	lds	r24, 0x01F4
    28c2:	90 91 f5 01 	lds	r25, 0x01F5
    28c6:	01 96       	adiw	r24, 0x01	; 1
    28c8:	90 93 f5 01 	sts	0x01F5, r25
    28cc:	80 93 f4 01 	sts	0x01F4, r24
    28d0:	80 91 f4 01 	lds	r24, 0x01F4
    28d4:	90 91 f5 01 	lds	r25, 0x01F5
    28d8:	84 30       	cpi	r24, 0x04	; 4
    28da:	91 05       	cpc	r25, r1
    28dc:	24 f3       	brlt	.-56     	; 0x28a6 <glcd_init+0x78>
   glcd_cmd(command[i]);
 }
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <select_chip>:

void select_chip(int chip)    //Chip selection
 {
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <select_chip+0x6>
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
  if(chip==1)
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	9a 81       	ldd	r25, Y+2	; 0x02
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	91 05       	cpc	r25, r1
    2902:	79 f4       	brne	.+30     	; 0x2922 <select_chip+0x36>
   {
      PORTD|=(1<<4);
    2904:	a2 e3       	ldi	r26, 0x32	; 50
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	e2 e3       	ldi	r30, 0x32	; 50
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	80 61       	ori	r24, 0x10	; 16
    2910:	8c 93       	st	X, r24
      PORTD&=~(1<<3);
    2912:	a2 e3       	ldi	r26, 0x32	; 50
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	e2 e3       	ldi	r30, 0x32	; 50
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	87 7f       	andi	r24, 0xF7	; 247
    291e:	8c 93       	st	X, r24
    2920:	0e c0       	rjmp	.+28     	; 0x293e <select_chip+0x52>
   }
  else
   {
      PORTD&=~(1<<4);
    2922:	a2 e3       	ldi	r26, 0x32	; 50
    2924:	b0 e0       	ldi	r27, 0x00	; 0
    2926:	e2 e3       	ldi	r30, 0x32	; 50
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
    292c:	8f 7e       	andi	r24, 0xEF	; 239
    292e:	8c 93       	st	X, r24
      PORTD|=(1<<3);
    2930:	a2 e3       	ldi	r26, 0x32	; 50
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	e2 e3       	ldi	r30, 0x32	; 50
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	88 60       	ori	r24, 0x08	; 8
    293c:	8c 93       	st	X, r24
   }
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <glcd_picture>:

void glcd_picture(const unsigned char *ip)  //Subroutine for printing
 {
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	00 d0       	rcall	.+0      	; 0x294e <glcd_picture+0x6>
    294e:	00 d0       	rcall	.+0      	; 0x2950 <glcd_picture+0x8>
    2950:	00 d0       	rcall	.+0      	; 0x2952 <glcd_picture+0xa>
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
   int page,column;
    for(page=0;page<8;page++)
    295a:	1c 82       	std	Y+4, r1	; 0x04
    295c:	1b 82       	std	Y+3, r1	; 0x03
    295e:	38 c0       	rjmp	.+112    	; 0x29d0 <glcd_picture+0x88>
{
  select_chip(0);
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 76 14 	call	0x28ec	; 0x28ec <select_chip>
  glcd_cmd(0xb8|page);
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	88 6b       	ori	r24, 0xB8	; 184
    296c:	0e 94 ee 11 	call	0x23dc	; 0x23dc <glcd_cmd>
  glcd_cmd(0x40);
    2970:	80 e4       	ldi	r24, 0x40	; 64
    2972:	0e 94 ee 11 	call	0x23dc	; 0x23dc <glcd_cmd>
    for(column=0;column<128;column++)
    2976:	1a 82       	std	Y+2, r1	; 0x02
    2978:	19 82       	std	Y+1, r1	; 0x01
    297a:	20 c0       	rjmp	.+64     	; 0x29bc <glcd_picture+0x74>
     {
if(column==64)
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	9a 81       	ldd	r25, Y+2	; 0x02
    2980:	80 34       	cpi	r24, 0x40	; 64
    2982:	91 05       	cpc	r25, r1
    2984:	59 f4       	brne	.+22     	; 0x299c <glcd_picture+0x54>
{
 select_chip(1);
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	0e 94 76 14 	call	0x28ec	; 0x28ec <select_chip>
 glcd_cmd(0xb8|page);
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	88 6b       	ori	r24, 0xB8	; 184
    2992:	0e 94 ee 11 	call	0x23dc	; 0x23dc <glcd_cmd>
 glcd_cmd(0x40);
    2996:	80 e4       	ldi	r24, 0x40	; 64
    2998:	0e 94 ee 11 	call	0x23dc	; 0x23dc <glcd_cmd>
}
glcd_data(*ip++);    //acessing array values using pointers
    299c:	ed 81       	ldd	r30, Y+5	; 0x05
    299e:	fe 81       	ldd	r31, Y+6	; 0x06
    29a0:	20 81       	ld	r18, Z
    29a2:	8d 81       	ldd	r24, Y+5	; 0x05
    29a4:	9e 81       	ldd	r25, Y+6	; 0x06
    29a6:	01 96       	adiw	r24, 0x01	; 1
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
    29ac:	82 2f       	mov	r24, r18
    29ae:	0e 94 ff 12 	call	0x25fe	; 0x25fe <glcd_data>
    for(page=0;page<8;page++)
{
  select_chip(0);
  glcd_cmd(0xb8|page);
  glcd_cmd(0x40);
    for(column=0;column<128;column++)
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	9a 81       	ldd	r25, Y+2	; 0x02
    29b6:	01 96       	adiw	r24, 0x01	; 1
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	89 83       	std	Y+1, r24	; 0x01
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	9a 81       	ldd	r25, Y+2	; 0x02
    29c0:	80 38       	cpi	r24, 0x80	; 128
    29c2:	91 05       	cpc	r25, r1
    29c4:	dc f2       	brlt	.-74     	; 0x297c <glcd_picture+0x34>
}

void glcd_picture(const unsigned char *ip)  //Subroutine for printing
 {
   int page,column;
    for(page=0;page<8;page++)
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ca:	01 96       	adiw	r24, 0x01	; 1
    29cc:	9c 83       	std	Y+4, r25	; 0x04
    29ce:	8b 83       	std	Y+3, r24	; 0x03
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	9c 81       	ldd	r25, Y+4	; 0x04
    29d4:	88 30       	cpi	r24, 0x08	; 8
    29d6:	91 05       	cpc	r25, r1
    29d8:	1c f2       	brlt	.-122    	; 0x2960 <glcd_picture+0x18>
 glcd_cmd(0x40);
}
glcd_data(*ip++);    //acessing array values using pointers
    }
       }
  }
    29da:	26 96       	adiw	r28, 0x06	; 6
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	cf 91       	pop	r28
    29e8:	df 91       	pop	r29
    29ea:	08 95       	ret

000029ec <timer1_init>:
#include"HAL/LCD/LCD.h"
#include"STD_Types.h"
#define f_cpu 16000000UL

void timer1_init(void)
{
    29ec:	df 93       	push	r29
    29ee:	cf 93       	push	r28
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A,COM1B1);
    29f4:	af e4       	ldi	r26, 0x4F	; 79
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	ef e4       	ldi	r30, 0x4F	; 79
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	80 62       	ori	r24, 0x20	; 32
    2a00:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    2a02:	af e4       	ldi	r26, 0x4F	; 79
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	ef e4       	ldi	r30, 0x4F	; 79
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	82 60       	ori	r24, 0x02	; 2
    2a0e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM10);
    2a10:	af e4       	ldi	r26, 0x4F	; 79
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	ef e4       	ldi	r30, 0x4F	; 79
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	81 60       	ori	r24, 0x01	; 1
    2a1c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS10);
    2a1e:	ae e4       	ldi	r26, 0x4E	; 78
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	ee e4       	ldi	r30, 0x4E	; 78
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	81 60       	ori	r24, 0x01	; 1
    2a2a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    2a2c:	ae e4       	ldi	r26, 0x4E	; 78
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	ee e4       	ldi	r30, 0x4E	; 78
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	82 60       	ori	r24, 0x02	; 2
    2a38:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    2a3a:	ae e4       	ldi	r26, 0x4E	; 78
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	ee e4       	ldi	r30, 0x4E	; 78
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	88 60       	ori	r24, 0x08	; 8
    2a46:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TICIE1); // enable the icp interrupt
    2a48:	a9 e5       	ldi	r26, 0x59	; 89
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	e9 e5       	ldi	r30, 0x59	; 89
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	80 62       	ori	r24, 0x20	; 32
    2a54:	8c 93       	st	X, r24
}
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <main>:

int main()
{
    2a5c:	ef 92       	push	r14
    2a5e:	ff 92       	push	r15
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	e7 97       	sbiw	r28, 0x37	; 55
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
	unsigned int a,b,c,high,period;
	uint8_t frequency[14],duty_cy[7];
	uint16_t value;
	DIO_init();
    2a78:	0e 94 72 02 	call	0x4e4	; 0x4e4 <DIO_init>
	lcd_init();
    2a7c:	0e 94 76 08 	call	0x10ec	; 0x10ec <lcd_init>
	ADC_init();
    2a80:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <ADC_init>
	init_INT0();
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <init_INT0>
	timer1_init();
    2a88:	0e 94 f6 14 	call	0x29ec	; 0x29ec <timer1_init>
	PORTD = 0xFF;      /* Turn ON pull-up resistor */
    2a8c:	e2 e3       	ldi	r30, 0x32	; 50
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	8f ef       	ldi	r24, 0xFF	; 255
    2a92:	80 83       	st	Z, r24
	while(1)
	{
		//if(ADC_read(1)>512)
		//{ value=1;}
		//else { value=0;}
		OCR1A=ADC_read(1);
    2a94:	0a e4       	ldi	r16, 0x4A	; 74
    2a96:	10 e0       	ldi	r17, 0x00	; 0
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	0e 94 28 04 	call	0x850	; 0x850 <ADC_read>
    2a9e:	f8 01       	movw	r30, r16
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
				TCNT1=0;
    2aa4:	ec e4       	ldi	r30, 0x4C	; 76
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	11 82       	std	Z+1, r1	; 0x01
    2aaa:	10 82       	st	Z, r1
				TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag) flag */
    2aac:	e8 e5       	ldi	r30, 0x58	; 88
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 e2       	ldi	r24, 0x20	; 32
    2ab2:	80 83       	st	Z, r24

				TCCR1B = 0x41;  	/* Rising edge, no prescaler */
    2ab4:	ee e4       	ldi	r30, 0x4E	; 78
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	81 e4       	ldi	r24, 0x41	; 65
    2aba:	80 83       	st	Z, r24
				while ((TIFR&(1<<ICF1)) == 0);
    2abc:	e8 e5       	ldi	r30, 0x58	; 88
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	88 2f       	mov	r24, r24
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	80 72       	andi	r24, 0x20	; 32
    2ac8:	90 70       	andi	r25, 0x00	; 0
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	b9 f3       	breq	.-18     	; 0x2abc <main+0x60>
				a = ICR1;  		/* Take value of capture register */
    2ace:	e6 e4       	ldi	r30, 0x46	; 70
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	91 81       	ldd	r25, Z+1	; 0x01
    2ad6:	9a a3       	std	Y+34, r25	; 0x22
    2ad8:	89 a3       	std	Y+33, r24	; 0x21
				TIFR = (1<<ICF1);  	/* Clear ICF flag */
    2ada:	e8 e5       	ldi	r30, 0x58	; 88
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 e2       	ldi	r24, 0x20	; 32
    2ae0:	80 83       	st	Z, r24

				TCCR1B = 0x01;  	/* Falling edge, no prescaler */
    2ae2:	ee e4       	ldi	r30, 0x4E	; 78
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	80 83       	st	Z, r24
				while ((TIFR&(1<<ICF1)) == 0);
    2aea:	e8 e5       	ldi	r30, 0x58	; 88
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	88 2f       	mov	r24, r24
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	80 72       	andi	r24, 0x20	; 32
    2af6:	90 70       	andi	r25, 0x00	; 0
    2af8:	00 97       	sbiw	r24, 0x00	; 0
    2afa:	b9 f3       	breq	.-18     	; 0x2aea <main+0x8e>
				b = ICR1;  		/* Take value of capture register */
    2afc:	e6 e4       	ldi	r30, 0x46	; 70
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	91 81       	ldd	r25, Z+1	; 0x01
    2b04:	98 a3       	std	Y+32, r25	; 0x20
    2b06:	8f 8f       	std	Y+31, r24	; 0x1f
				TIFR = (1<<ICF1);  	/* Clear ICF flag */
    2b08:	e8 e5       	ldi	r30, 0x58	; 88
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 e2       	ldi	r24, 0x20	; 32
    2b0e:	80 83       	st	Z, r24

				TCCR1B = 0x41;  	/* Rising edge, no prescaler */
    2b10:	ee e4       	ldi	r30, 0x4E	; 78
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	81 e4       	ldi	r24, 0x41	; 65
    2b16:	80 83       	st	Z, r24
				while ((TIFR&(1<<ICF1)) == 0);
    2b18:	e8 e5       	ldi	r30, 0x58	; 88
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	88 2f       	mov	r24, r24
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	80 72       	andi	r24, 0x20	; 32
    2b24:	90 70       	andi	r25, 0x00	; 0
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	b9 f3       	breq	.-18     	; 0x2b18 <main+0xbc>
				c = ICR1;  		/* Take value of capture register */
    2b2a:	e6 e4       	ldi	r30, 0x46	; 70
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
    2b30:	91 81       	ldd	r25, Z+1	; 0x01
    2b32:	9e 8f       	std	Y+30, r25	; 0x1e
    2b34:	8d 8f       	std	Y+29, r24	; 0x1d
				TIFR = (1<<ICF1);  	/* Clear ICF flag */
    2b36:	e8 e5       	ldi	r30, 0x58	; 88
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 e2       	ldi	r24, 0x20	; 32
    2b3c:	80 83       	st	Z, r24

				TCCR1B = 0;  		/* Stop the timer */
    2b3e:	ee e4       	ldi	r30, 0x4E	; 78
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	10 82       	st	Z, r1

				if(a<b && b<c)  	/* Check for valid condition,
    2b44:	29 a1       	ldd	r18, Y+33	; 0x21
    2b46:	3a a1       	ldd	r19, Y+34	; 0x22
    2b48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b4a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b4c:	28 17       	cp	r18, r24
    2b4e:	39 07       	cpc	r19, r25
    2b50:	08 f0       	brcs	.+2      	; 0x2b54 <main+0xf8>
    2b52:	96 c0       	rjmp	.+300    	; 0x2c80 <main+0x224>
    2b54:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2b56:	38 a1       	ldd	r19, Y+32	; 0x20
    2b58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b5c:	28 17       	cp	r18, r24
    2b5e:	39 07       	cpc	r19, r25
    2b60:	08 f0       	brcs	.+2      	; 0x2b64 <main+0x108>
    2b62:	8e c0       	rjmp	.+284    	; 0x2c80 <main+0x224>
							to avoid timer overflow reading */
				{
					high=b-a;
    2b64:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2b66:	38 a1       	ldd	r19, Y+32	; 0x20
    2b68:	89 a1       	ldd	r24, Y+33	; 0x21
    2b6a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b6c:	a9 01       	movw	r20, r18
    2b6e:	48 1b       	sub	r20, r24
    2b70:	59 0b       	sbc	r21, r25
    2b72:	ca 01       	movw	r24, r20
    2b74:	9c 8f       	std	Y+28, r25	; 0x1c
    2b76:	8b 8f       	std	Y+27, r24	; 0x1b
					period=c-a;
    2b78:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2b7a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2b7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b80:	f9 01       	movw	r30, r18
    2b82:	e8 1b       	sub	r30, r24
    2b84:	f9 0b       	sbc	r31, r25
    2b86:	cf 01       	movw	r24, r30
    2b88:	9a 8f       	std	Y+26, r25	; 0x1a
    2b8a:	89 8f       	std	Y+25, r24	; 0x19

					long freq= f_cpu/period;/* Calculate frequency */
    2b8c:	89 8d       	ldd	r24, Y+25	; 0x19
    2b8e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b90:	9c 01       	movw	r18, r24
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	50 e0       	ldi	r21, 0x00	; 0
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	94 e2       	ldi	r25, 0x24	; 36
    2b9a:	a4 ef       	ldi	r26, 0xF4	; 244
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__udivmodsi4>
    2ba6:	da 01       	movw	r26, r20
    2ba8:	c9 01       	movw	r24, r18
    2baa:	8b 8b       	std	Y+19, r24	; 0x13
    2bac:	9c 8b       	std	Y+20, r25	; 0x14
    2bae:	ad 8b       	std	Y+21, r26	; 0x15
    2bb0:	be 8b       	std	Y+22, r27	; 0x16

								/* Calculate duty cycle */
		            		float duty_cycle =((float) high /(float)period)*100;
    2bb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bb6:	cc 01       	movw	r24, r24
    2bb8:	a0 e0       	ldi	r26, 0x00	; 0
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	0e 94 17 1b 	call	0x362e	; 0x362e <__floatunsisf>
    2bc4:	7b 01       	movw	r14, r22
    2bc6:	8c 01       	movw	r16, r24
    2bc8:	89 8d       	ldd	r24, Y+25	; 0x19
    2bca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bcc:	cc 01       	movw	r24, r24
    2bce:	a0 e0       	ldi	r26, 0x00	; 0
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	bc 01       	movw	r22, r24
    2bd4:	cd 01       	movw	r24, r26
    2bd6:	0e 94 17 1b 	call	0x362e	; 0x362e <__floatunsisf>
    2bda:	9b 01       	movw	r18, r22
    2bdc:	ac 01       	movw	r20, r24
    2bde:	c8 01       	movw	r24, r16
    2be0:	b7 01       	movw	r22, r14
    2be2:	0e 94 87 19 	call	0x330e	; 0x330e <__divsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	bc 01       	movw	r22, r24
    2bec:	cd 01       	movw	r24, r26
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	48 ec       	ldi	r20, 0xC8	; 200
    2bf4:	52 e4       	ldi	r21, 0x42	; 66
    2bf6:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	8f 87       	std	Y+15, r24	; 0x0f
    2c00:	98 8b       	std	Y+16, r25	; 0x10
    2c02:	a9 8b       	std	Y+17, r26	; 0x11
    2c04:	ba 8b       	std	Y+18, r27	; 0x12
					ltoa(freq,frequency,10);
    2c06:	8b 89       	ldd	r24, Y+19	; 0x13
    2c08:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0a:	ad 89       	ldd	r26, Y+21	; 0x15
    2c0c:	be 89       	ldd	r27, Y+22	; 0x16
    2c0e:	9e 01       	movw	r18, r28
    2c10:	2d 5d       	subi	r18, 0xDD	; 221
    2c12:	3f 4f       	sbci	r19, 0xFF	; 255
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	a9 01       	movw	r20, r18
    2c1a:	2a e0       	ldi	r18, 0x0A	; 10
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <ltoa>

					itoa((int)duty_cycle,duty_cy,10);
    2c22:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c24:	78 89       	ldd	r23, Y+16	; 0x10
    2c26:	89 89       	ldd	r24, Y+17	; 0x11
    2c28:	9a 89       	ldd	r25, Y+18	; 0x12
    2c2a:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__fixsfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	9e 01       	movw	r18, r28
    2c34:	2f 5c       	subi	r18, 0xCF	; 207
    2c36:	3f 4f       	sbci	r19, 0xFF	; 255
    2c38:	b9 01       	movw	r22, r18
    2c3a:	4a e0       	ldi	r20, 0x0A	; 10
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <itoa>

					lcd_sendcmd(0x80);
    2c42:	80 e8       	ldi	r24, 0x80	; 128
    2c44:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lcd_sendcmd>
					lcd_sendstring("Freq: ");
    2c48:	87 eb       	ldi	r24, 0xB7	; 183
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	0e 94 c1 11 	call	0x2382	; 0x2382 <lcd_sendstring>
					lcd_sendstring(frequency);
    2c50:	ce 01       	movw	r24, r28
    2c52:	83 96       	adiw	r24, 0x23	; 35
    2c54:	0e 94 c1 11 	call	0x2382	; 0x2382 <lcd_sendstring>
					lcd_sendstring(" Hz    ");
    2c58:	8e eb       	ldi	r24, 0xBE	; 190
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	0e 94 c1 11 	call	0x2382	; 0x2382 <lcd_sendstring>

					lcd_sendcmd(0xC0);
    2c60:	80 ec       	ldi	r24, 0xC0	; 192
    2c62:	0e 94 67 0d 	call	0x1ace	; 0x1ace <lcd_sendcmd>
					lcd_sendstring("Duty: ");
    2c66:	86 ec       	ldi	r24, 0xC6	; 198
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	0e 94 c1 11 	call	0x2382	; 0x2382 <lcd_sendstring>
					lcd_sendstring(duty_cy);
    2c6e:	ce 01       	movw	r24, r28
    2c70:	c1 96       	adiw	r24, 0x31	; 49
    2c72:	0e 94 c1 11 	call	0x2382	; 0x2382 <lcd_sendstring>
					lcd_sendstring(" %      ");
    2c76:	8d ec       	ldi	r24, 0xCD	; 205
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	0e 94 c1 11 	call	0x2382	; 0x2382 <lcd_sendstring>
    2c7e:	04 c0       	rjmp	.+8      	; 0x2c88 <main+0x22c>

				}

				else
				{
					lcd_sendstring("OUT OF RANGE!!");
    2c80:	86 ed       	ldi	r24, 0xD6	; 214
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0e 94 c1 11 	call	0x2382	; 0x2382 <lcd_sendstring>
    2c88:	80 e0       	ldi	r24, 0x00	; 0
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	a8 e4       	ldi	r26, 0x48	; 72
    2c8e:	b2 e4       	ldi	r27, 0x42	; 66
    2c90:	8b 87       	std	Y+11, r24	; 0x0b
    2c92:	9c 87       	std	Y+12, r25	; 0x0c
    2c94:	ad 87       	std	Y+13, r26	; 0x0d
    2c96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	4a e7       	ldi	r20, 0x7A	; 122
    2ca6:	55 e4       	ldi	r21, 0x45	; 69
    2ca8:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	8f 83       	std	Y+7, r24	; 0x07
    2cb2:	98 87       	std	Y+8, r25	; 0x08
    2cb4:	a9 87       	std	Y+9, r26	; 0x09
    2cb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cba:	78 85       	ldd	r23, Y+8	; 0x08
    2cbc:	89 85       	ldd	r24, Y+9	; 0x09
    2cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	40 e8       	ldi	r20, 0x80	; 128
    2cc6:	5f e3       	ldi	r21, 0x3F	; 63
    2cc8:	0e 94 93 1a 	call	0x3526	; 0x3526 <__ltsf2>
    2ccc:	88 23       	and	r24, r24
    2cce:	2c f4       	brge	.+10     	; 0x2cda <main+0x27e>
		__ticks = 1;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	9e 83       	std	Y+6, r25	; 0x06
    2cd6:	8d 83       	std	Y+5, r24	; 0x05
    2cd8:	3f c0       	rjmp	.+126    	; 0x2d58 <main+0x2fc>
	else if (__tmp > 65535)
    2cda:	6f 81       	ldd	r22, Y+7	; 0x07
    2cdc:	78 85       	ldd	r23, Y+8	; 0x08
    2cde:	89 85       	ldd	r24, Y+9	; 0x09
    2ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	3f ef       	ldi	r19, 0xFF	; 255
    2ce6:	4f e7       	ldi	r20, 0x7F	; 127
    2ce8:	57 e4       	ldi	r21, 0x47	; 71
    2cea:	0e 94 33 1a 	call	0x3466	; 0x3466 <__gtsf2>
    2cee:	18 16       	cp	r1, r24
    2cf0:	4c f5       	brge	.+82     	; 0x2d44 <main+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	40 e2       	ldi	r20, 0x20	; 32
    2d00:	51 e4       	ldi	r21, 0x41	; 65
    2d02:	0e 94 8d 18 	call	0x311a	; 0x311a <__mulsf3>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	bc 01       	movw	r22, r24
    2d0c:	cd 01       	movw	r24, r26
    2d0e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	9e 83       	std	Y+6, r25	; 0x06
    2d18:	8d 83       	std	Y+5, r24	; 0x05
    2d1a:	0f c0       	rjmp	.+30     	; 0x2d3a <main+0x2de>
    2d1c:	80 e9       	ldi	r24, 0x90	; 144
    2d1e:	91 e0       	ldi	r25, 0x01	; 1
    2d20:	9c 83       	std	Y+4, r25	; 0x04
    2d22:	8b 83       	std	Y+3, r24	; 0x03
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	9c 81       	ldd	r25, Y+4	; 0x04
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <main+0x2cc>
    2d2c:	9c 83       	std	Y+4, r25	; 0x04
    2d2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d30:	8d 81       	ldd	r24, Y+5	; 0x05
    2d32:	9e 81       	ldd	r25, Y+6	; 0x06
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	69 f7       	brne	.-38     	; 0x2d1c <main+0x2c0>
    2d42:	a8 ce       	rjmp	.-688    	; 0x2a94 <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d44:	6f 81       	ldd	r22, Y+7	; 0x07
    2d46:	78 85       	ldd	r23, Y+8	; 0x08
    2d48:	89 85       	ldd	r24, Y+9	; 0x09
    2d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	9e 83       	std	Y+6, r25	; 0x06
    2d56:	8d 83       	std	Y+5, r24	; 0x05
    2d58:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5c:	9a 83       	std	Y+2, r25	; 0x02
    2d5e:	89 83       	std	Y+1, r24	; 0x01
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	9a 81       	ldd	r25, Y+2	; 0x02
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <main+0x308>
    2d68:	9a 83       	std	Y+2, r25	; 0x02
    2d6a:	89 83       	std	Y+1, r24	; 0x01
    2d6c:	93 ce       	rjmp	.-730    	; 0x2a94 <main+0x38>

00002d6e <__fixunssfsi>:
    2d6e:	ef 92       	push	r14
    2d70:	ff 92       	push	r15
    2d72:	0f 93       	push	r16
    2d74:	1f 93       	push	r17
    2d76:	7b 01       	movw	r14, r22
    2d78:	8c 01       	movw	r16, r24
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	5f e4       	ldi	r21, 0x4F	; 79
    2d82:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <__gesf2>
    2d86:	88 23       	and	r24, r24
    2d88:	8c f0       	brlt	.+34     	; 0x2dac <__fixunssfsi+0x3e>
    2d8a:	c8 01       	movw	r24, r16
    2d8c:	b7 01       	movw	r22, r14
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	40 e0       	ldi	r20, 0x00	; 0
    2d94:	5f e4       	ldi	r21, 0x4F	; 79
    2d96:	0e 94 2f 18 	call	0x305e	; 0x305e <__subsf3>
    2d9a:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__fixsfsi>
    2d9e:	9b 01       	movw	r18, r22
    2da0:	ac 01       	movw	r20, r24
    2da2:	20 50       	subi	r18, 0x00	; 0
    2da4:	30 40       	sbci	r19, 0x00	; 0
    2da6:	40 40       	sbci	r20, 0x00	; 0
    2da8:	50 48       	sbci	r21, 0x80	; 128
    2daa:	06 c0       	rjmp	.+12     	; 0x2db8 <__fixunssfsi+0x4a>
    2dac:	c8 01       	movw	r24, r16
    2dae:	b7 01       	movw	r22, r14
    2db0:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__fixsfsi>
    2db4:	9b 01       	movw	r18, r22
    2db6:	ac 01       	movw	r20, r24
    2db8:	b9 01       	movw	r22, r18
    2dba:	ca 01       	movw	r24, r20
    2dbc:	1f 91       	pop	r17
    2dbe:	0f 91       	pop	r16
    2dc0:	ff 90       	pop	r15
    2dc2:	ef 90       	pop	r14
    2dc4:	08 95       	ret

00002dc6 <_fpadd_parts>:
    2dc6:	a0 e0       	ldi	r26, 0x00	; 0
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e9 ee       	ldi	r30, 0xE9	; 233
    2dcc:	f6 e1       	ldi	r31, 0x16	; 22
    2dce:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__prologue_saves__>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	2b 01       	movw	r4, r22
    2dd6:	fa 01       	movw	r30, r20
    2dd8:	9c 91       	ld	r25, X
    2dda:	92 30       	cpi	r25, 0x02	; 2
    2ddc:	08 f4       	brcc	.+2      	; 0x2de0 <_fpadd_parts+0x1a>
    2dde:	39 c1       	rjmp	.+626    	; 0x3052 <_fpadd_parts+0x28c>
    2de0:	eb 01       	movw	r28, r22
    2de2:	88 81       	ld	r24, Y
    2de4:	82 30       	cpi	r24, 0x02	; 2
    2de6:	08 f4       	brcc	.+2      	; 0x2dea <_fpadd_parts+0x24>
    2de8:	33 c1       	rjmp	.+614    	; 0x3050 <_fpadd_parts+0x28a>
    2dea:	94 30       	cpi	r25, 0x04	; 4
    2dec:	69 f4       	brne	.+26     	; 0x2e08 <_fpadd_parts+0x42>
    2dee:	84 30       	cpi	r24, 0x04	; 4
    2df0:	09 f0       	breq	.+2      	; 0x2df4 <_fpadd_parts+0x2e>
    2df2:	2f c1       	rjmp	.+606    	; 0x3052 <_fpadd_parts+0x28c>
    2df4:	11 96       	adiw	r26, 0x01	; 1
    2df6:	9c 91       	ld	r25, X
    2df8:	11 97       	sbiw	r26, 0x01	; 1
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	98 17       	cp	r25, r24
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <_fpadd_parts+0x3c>
    2e00:	28 c1       	rjmp	.+592    	; 0x3052 <_fpadd_parts+0x28c>
    2e02:	a5 ee       	ldi	r26, 0xE5	; 229
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	25 c1       	rjmp	.+586    	; 0x3052 <_fpadd_parts+0x28c>
    2e08:	84 30       	cpi	r24, 0x04	; 4
    2e0a:	09 f4       	brne	.+2      	; 0x2e0e <_fpadd_parts+0x48>
    2e0c:	21 c1       	rjmp	.+578    	; 0x3050 <_fpadd_parts+0x28a>
    2e0e:	82 30       	cpi	r24, 0x02	; 2
    2e10:	a9 f4       	brne	.+42     	; 0x2e3c <_fpadd_parts+0x76>
    2e12:	92 30       	cpi	r25, 0x02	; 2
    2e14:	09 f0       	breq	.+2      	; 0x2e18 <_fpadd_parts+0x52>
    2e16:	1d c1       	rjmp	.+570    	; 0x3052 <_fpadd_parts+0x28c>
    2e18:	9a 01       	movw	r18, r20
    2e1a:	ad 01       	movw	r20, r26
    2e1c:	88 e0       	ldi	r24, 0x08	; 8
    2e1e:	ea 01       	movw	r28, r20
    2e20:	09 90       	ld	r0, Y+
    2e22:	ae 01       	movw	r20, r28
    2e24:	e9 01       	movw	r28, r18
    2e26:	09 92       	st	Y+, r0
    2e28:	9e 01       	movw	r18, r28
    2e2a:	81 50       	subi	r24, 0x01	; 1
    2e2c:	c1 f7       	brne	.-16     	; 0x2e1e <_fpadd_parts+0x58>
    2e2e:	e2 01       	movw	r28, r4
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	11 96       	adiw	r26, 0x01	; 1
    2e34:	9c 91       	ld	r25, X
    2e36:	89 23       	and	r24, r25
    2e38:	81 83       	std	Z+1, r24	; 0x01
    2e3a:	08 c1       	rjmp	.+528    	; 0x304c <_fpadd_parts+0x286>
    2e3c:	92 30       	cpi	r25, 0x02	; 2
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <_fpadd_parts+0x7c>
    2e40:	07 c1       	rjmp	.+526    	; 0x3050 <_fpadd_parts+0x28a>
    2e42:	12 96       	adiw	r26, 0x02	; 2
    2e44:	2d 90       	ld	r2, X+
    2e46:	3c 90       	ld	r3, X
    2e48:	13 97       	sbiw	r26, 0x03	; 3
    2e4a:	eb 01       	movw	r28, r22
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e50:	14 96       	adiw	r26, 0x04	; 4
    2e52:	ad 90       	ld	r10, X+
    2e54:	bd 90       	ld	r11, X+
    2e56:	cd 90       	ld	r12, X+
    2e58:	dc 90       	ld	r13, X
    2e5a:	17 97       	sbiw	r26, 0x07	; 7
    2e5c:	ec 80       	ldd	r14, Y+4	; 0x04
    2e5e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e60:	0e 81       	ldd	r16, Y+6	; 0x06
    2e62:	1f 81       	ldd	r17, Y+7	; 0x07
    2e64:	91 01       	movw	r18, r2
    2e66:	28 1b       	sub	r18, r24
    2e68:	39 0b       	sbc	r19, r25
    2e6a:	b9 01       	movw	r22, r18
    2e6c:	37 ff       	sbrs	r19, 7
    2e6e:	04 c0       	rjmp	.+8      	; 0x2e78 <_fpadd_parts+0xb2>
    2e70:	66 27       	eor	r22, r22
    2e72:	77 27       	eor	r23, r23
    2e74:	62 1b       	sub	r22, r18
    2e76:	73 0b       	sbc	r23, r19
    2e78:	60 32       	cpi	r22, 0x20	; 32
    2e7a:	71 05       	cpc	r23, r1
    2e7c:	0c f0       	brlt	.+2      	; 0x2e80 <_fpadd_parts+0xba>
    2e7e:	61 c0       	rjmp	.+194    	; 0x2f42 <_fpadd_parts+0x17c>
    2e80:	12 16       	cp	r1, r18
    2e82:	13 06       	cpc	r1, r19
    2e84:	6c f5       	brge	.+90     	; 0x2ee0 <_fpadd_parts+0x11a>
    2e86:	37 01       	movw	r6, r14
    2e88:	48 01       	movw	r8, r16
    2e8a:	06 2e       	mov	r0, r22
    2e8c:	04 c0       	rjmp	.+8      	; 0x2e96 <_fpadd_parts+0xd0>
    2e8e:	96 94       	lsr	r9
    2e90:	87 94       	ror	r8
    2e92:	77 94       	ror	r7
    2e94:	67 94       	ror	r6
    2e96:	0a 94       	dec	r0
    2e98:	d2 f7       	brpl	.-12     	; 0x2e8e <_fpadd_parts+0xc8>
    2e9a:	21 e0       	ldi	r18, 0x01	; 1
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e0       	ldi	r20, 0x00	; 0
    2ea0:	50 e0       	ldi	r21, 0x00	; 0
    2ea2:	04 c0       	rjmp	.+8      	; 0x2eac <_fpadd_parts+0xe6>
    2ea4:	22 0f       	add	r18, r18
    2ea6:	33 1f       	adc	r19, r19
    2ea8:	44 1f       	adc	r20, r20
    2eaa:	55 1f       	adc	r21, r21
    2eac:	6a 95       	dec	r22
    2eae:	d2 f7       	brpl	.-12     	; 0x2ea4 <_fpadd_parts+0xde>
    2eb0:	21 50       	subi	r18, 0x01	; 1
    2eb2:	30 40       	sbci	r19, 0x00	; 0
    2eb4:	40 40       	sbci	r20, 0x00	; 0
    2eb6:	50 40       	sbci	r21, 0x00	; 0
    2eb8:	2e 21       	and	r18, r14
    2eba:	3f 21       	and	r19, r15
    2ebc:	40 23       	and	r20, r16
    2ebe:	51 23       	and	r21, r17
    2ec0:	21 15       	cp	r18, r1
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	41 05       	cpc	r20, r1
    2ec6:	51 05       	cpc	r21, r1
    2ec8:	21 f0       	breq	.+8      	; 0x2ed2 <_fpadd_parts+0x10c>
    2eca:	21 e0       	ldi	r18, 0x01	; 1
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e0       	ldi	r20, 0x00	; 0
    2ed0:	50 e0       	ldi	r21, 0x00	; 0
    2ed2:	79 01       	movw	r14, r18
    2ed4:	8a 01       	movw	r16, r20
    2ed6:	e6 28       	or	r14, r6
    2ed8:	f7 28       	or	r15, r7
    2eda:	08 29       	or	r16, r8
    2edc:	19 29       	or	r17, r9
    2ede:	3c c0       	rjmp	.+120    	; 0x2f58 <_fpadd_parts+0x192>
    2ee0:	23 2b       	or	r18, r19
    2ee2:	d1 f1       	breq	.+116    	; 0x2f58 <_fpadd_parts+0x192>
    2ee4:	26 0e       	add	r2, r22
    2ee6:	37 1e       	adc	r3, r23
    2ee8:	35 01       	movw	r6, r10
    2eea:	46 01       	movw	r8, r12
    2eec:	06 2e       	mov	r0, r22
    2eee:	04 c0       	rjmp	.+8      	; 0x2ef8 <_fpadd_parts+0x132>
    2ef0:	96 94       	lsr	r9
    2ef2:	87 94       	ror	r8
    2ef4:	77 94       	ror	r7
    2ef6:	67 94       	ror	r6
    2ef8:	0a 94       	dec	r0
    2efa:	d2 f7       	brpl	.-12     	; 0x2ef0 <_fpadd_parts+0x12a>
    2efc:	21 e0       	ldi	r18, 0x01	; 1
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e0       	ldi	r20, 0x00	; 0
    2f02:	50 e0       	ldi	r21, 0x00	; 0
    2f04:	04 c0       	rjmp	.+8      	; 0x2f0e <_fpadd_parts+0x148>
    2f06:	22 0f       	add	r18, r18
    2f08:	33 1f       	adc	r19, r19
    2f0a:	44 1f       	adc	r20, r20
    2f0c:	55 1f       	adc	r21, r21
    2f0e:	6a 95       	dec	r22
    2f10:	d2 f7       	brpl	.-12     	; 0x2f06 <_fpadd_parts+0x140>
    2f12:	21 50       	subi	r18, 0x01	; 1
    2f14:	30 40       	sbci	r19, 0x00	; 0
    2f16:	40 40       	sbci	r20, 0x00	; 0
    2f18:	50 40       	sbci	r21, 0x00	; 0
    2f1a:	2a 21       	and	r18, r10
    2f1c:	3b 21       	and	r19, r11
    2f1e:	4c 21       	and	r20, r12
    2f20:	5d 21       	and	r21, r13
    2f22:	21 15       	cp	r18, r1
    2f24:	31 05       	cpc	r19, r1
    2f26:	41 05       	cpc	r20, r1
    2f28:	51 05       	cpc	r21, r1
    2f2a:	21 f0       	breq	.+8      	; 0x2f34 <_fpadd_parts+0x16e>
    2f2c:	21 e0       	ldi	r18, 0x01	; 1
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	50 e0       	ldi	r21, 0x00	; 0
    2f34:	59 01       	movw	r10, r18
    2f36:	6a 01       	movw	r12, r20
    2f38:	a6 28       	or	r10, r6
    2f3a:	b7 28       	or	r11, r7
    2f3c:	c8 28       	or	r12, r8
    2f3e:	d9 28       	or	r13, r9
    2f40:	0b c0       	rjmp	.+22     	; 0x2f58 <_fpadd_parts+0x192>
    2f42:	82 15       	cp	r24, r2
    2f44:	93 05       	cpc	r25, r3
    2f46:	2c f0       	brlt	.+10     	; 0x2f52 <_fpadd_parts+0x18c>
    2f48:	1c 01       	movw	r2, r24
    2f4a:	aa 24       	eor	r10, r10
    2f4c:	bb 24       	eor	r11, r11
    2f4e:	65 01       	movw	r12, r10
    2f50:	03 c0       	rjmp	.+6      	; 0x2f58 <_fpadd_parts+0x192>
    2f52:	ee 24       	eor	r14, r14
    2f54:	ff 24       	eor	r15, r15
    2f56:	87 01       	movw	r16, r14
    2f58:	11 96       	adiw	r26, 0x01	; 1
    2f5a:	9c 91       	ld	r25, X
    2f5c:	d2 01       	movw	r26, r4
    2f5e:	11 96       	adiw	r26, 0x01	; 1
    2f60:	8c 91       	ld	r24, X
    2f62:	98 17       	cp	r25, r24
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <_fpadd_parts+0x1a2>
    2f66:	45 c0       	rjmp	.+138    	; 0x2ff2 <_fpadd_parts+0x22c>
    2f68:	99 23       	and	r25, r25
    2f6a:	39 f0       	breq	.+14     	; 0x2f7a <_fpadd_parts+0x1b4>
    2f6c:	a8 01       	movw	r20, r16
    2f6e:	97 01       	movw	r18, r14
    2f70:	2a 19       	sub	r18, r10
    2f72:	3b 09       	sbc	r19, r11
    2f74:	4c 09       	sbc	r20, r12
    2f76:	5d 09       	sbc	r21, r13
    2f78:	06 c0       	rjmp	.+12     	; 0x2f86 <_fpadd_parts+0x1c0>
    2f7a:	a6 01       	movw	r20, r12
    2f7c:	95 01       	movw	r18, r10
    2f7e:	2e 19       	sub	r18, r14
    2f80:	3f 09       	sbc	r19, r15
    2f82:	40 0b       	sbc	r20, r16
    2f84:	51 0b       	sbc	r21, r17
    2f86:	57 fd       	sbrc	r21, 7
    2f88:	08 c0       	rjmp	.+16     	; 0x2f9a <_fpadd_parts+0x1d4>
    2f8a:	11 82       	std	Z+1, r1	; 0x01
    2f8c:	33 82       	std	Z+3, r3	; 0x03
    2f8e:	22 82       	std	Z+2, r2	; 0x02
    2f90:	24 83       	std	Z+4, r18	; 0x04
    2f92:	35 83       	std	Z+5, r19	; 0x05
    2f94:	46 83       	std	Z+6, r20	; 0x06
    2f96:	57 83       	std	Z+7, r21	; 0x07
    2f98:	1d c0       	rjmp	.+58     	; 0x2fd4 <_fpadd_parts+0x20e>
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	81 83       	std	Z+1, r24	; 0x01
    2f9e:	33 82       	std	Z+3, r3	; 0x03
    2fa0:	22 82       	std	Z+2, r2	; 0x02
    2fa2:	88 27       	eor	r24, r24
    2fa4:	99 27       	eor	r25, r25
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	82 1b       	sub	r24, r18
    2faa:	93 0b       	sbc	r25, r19
    2fac:	a4 0b       	sbc	r26, r20
    2fae:	b5 0b       	sbc	r27, r21
    2fb0:	84 83       	std	Z+4, r24	; 0x04
    2fb2:	95 83       	std	Z+5, r25	; 0x05
    2fb4:	a6 83       	std	Z+6, r26	; 0x06
    2fb6:	b7 83       	std	Z+7, r27	; 0x07
    2fb8:	0d c0       	rjmp	.+26     	; 0x2fd4 <_fpadd_parts+0x20e>
    2fba:	22 0f       	add	r18, r18
    2fbc:	33 1f       	adc	r19, r19
    2fbe:	44 1f       	adc	r20, r20
    2fc0:	55 1f       	adc	r21, r21
    2fc2:	24 83       	std	Z+4, r18	; 0x04
    2fc4:	35 83       	std	Z+5, r19	; 0x05
    2fc6:	46 83       	std	Z+6, r20	; 0x06
    2fc8:	57 83       	std	Z+7, r21	; 0x07
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	93 83       	std	Z+3, r25	; 0x03
    2fd2:	82 83       	std	Z+2, r24	; 0x02
    2fd4:	24 81       	ldd	r18, Z+4	; 0x04
    2fd6:	35 81       	ldd	r19, Z+5	; 0x05
    2fd8:	46 81       	ldd	r20, Z+6	; 0x06
    2fda:	57 81       	ldd	r21, Z+7	; 0x07
    2fdc:	da 01       	movw	r26, r20
    2fde:	c9 01       	movw	r24, r18
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	a1 09       	sbc	r26, r1
    2fe4:	b1 09       	sbc	r27, r1
    2fe6:	8f 5f       	subi	r24, 0xFF	; 255
    2fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fea:	af 4f       	sbci	r26, 0xFF	; 255
    2fec:	bf 43       	sbci	r27, 0x3F	; 63
    2fee:	28 f3       	brcs	.-54     	; 0x2fba <_fpadd_parts+0x1f4>
    2ff0:	0b c0       	rjmp	.+22     	; 0x3008 <_fpadd_parts+0x242>
    2ff2:	91 83       	std	Z+1, r25	; 0x01
    2ff4:	33 82       	std	Z+3, r3	; 0x03
    2ff6:	22 82       	std	Z+2, r2	; 0x02
    2ff8:	ea 0c       	add	r14, r10
    2ffa:	fb 1c       	adc	r15, r11
    2ffc:	0c 1d       	adc	r16, r12
    2ffe:	1d 1d       	adc	r17, r13
    3000:	e4 82       	std	Z+4, r14	; 0x04
    3002:	f5 82       	std	Z+5, r15	; 0x05
    3004:	06 83       	std	Z+6, r16	; 0x06
    3006:	17 83       	std	Z+7, r17	; 0x07
    3008:	83 e0       	ldi	r24, 0x03	; 3
    300a:	80 83       	st	Z, r24
    300c:	24 81       	ldd	r18, Z+4	; 0x04
    300e:	35 81       	ldd	r19, Z+5	; 0x05
    3010:	46 81       	ldd	r20, Z+6	; 0x06
    3012:	57 81       	ldd	r21, Z+7	; 0x07
    3014:	57 ff       	sbrs	r21, 7
    3016:	1a c0       	rjmp	.+52     	; 0x304c <_fpadd_parts+0x286>
    3018:	c9 01       	movw	r24, r18
    301a:	aa 27       	eor	r26, r26
    301c:	97 fd       	sbrc	r25, 7
    301e:	a0 95       	com	r26
    3020:	ba 2f       	mov	r27, r26
    3022:	81 70       	andi	r24, 0x01	; 1
    3024:	90 70       	andi	r25, 0x00	; 0
    3026:	a0 70       	andi	r26, 0x00	; 0
    3028:	b0 70       	andi	r27, 0x00	; 0
    302a:	56 95       	lsr	r21
    302c:	47 95       	ror	r20
    302e:	37 95       	ror	r19
    3030:	27 95       	ror	r18
    3032:	82 2b       	or	r24, r18
    3034:	93 2b       	or	r25, r19
    3036:	a4 2b       	or	r26, r20
    3038:	b5 2b       	or	r27, r21
    303a:	84 83       	std	Z+4, r24	; 0x04
    303c:	95 83       	std	Z+5, r25	; 0x05
    303e:	a6 83       	std	Z+6, r26	; 0x06
    3040:	b7 83       	std	Z+7, r27	; 0x07
    3042:	82 81       	ldd	r24, Z+2	; 0x02
    3044:	93 81       	ldd	r25, Z+3	; 0x03
    3046:	01 96       	adiw	r24, 0x01	; 1
    3048:	93 83       	std	Z+3, r25	; 0x03
    304a:	82 83       	std	Z+2, r24	; 0x02
    304c:	df 01       	movw	r26, r30
    304e:	01 c0       	rjmp	.+2      	; 0x3052 <_fpadd_parts+0x28c>
    3050:	d2 01       	movw	r26, r4
    3052:	cd 01       	movw	r24, r26
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    3058:	e2 e1       	ldi	r30, 0x12	; 18
    305a:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__epilogue_restores__>

0000305e <__subsf3>:
    305e:	a0 e2       	ldi	r26, 0x20	; 32
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	e5 e3       	ldi	r30, 0x35	; 53
    3064:	f8 e1       	ldi	r31, 0x18	; 24
    3066:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__+0x18>
    306a:	69 83       	std	Y+1, r22	; 0x01
    306c:	7a 83       	std	Y+2, r23	; 0x02
    306e:	8b 83       	std	Y+3, r24	; 0x03
    3070:	9c 83       	std	Y+4, r25	; 0x04
    3072:	2d 83       	std	Y+5, r18	; 0x05
    3074:	3e 83       	std	Y+6, r19	; 0x06
    3076:	4f 83       	std	Y+7, r20	; 0x07
    3078:	58 87       	std	Y+8, r21	; 0x08
    307a:	e9 e0       	ldi	r30, 0x09	; 9
    307c:	ee 2e       	mov	r14, r30
    307e:	f1 2c       	mov	r15, r1
    3080:	ec 0e       	add	r14, r28
    3082:	fd 1e       	adc	r15, r29
    3084:	ce 01       	movw	r24, r28
    3086:	01 96       	adiw	r24, 0x01	; 1
    3088:	b7 01       	movw	r22, r14
    308a:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    308e:	8e 01       	movw	r16, r28
    3090:	0f 5e       	subi	r16, 0xEF	; 239
    3092:	1f 4f       	sbci	r17, 0xFF	; 255
    3094:	ce 01       	movw	r24, r28
    3096:	05 96       	adiw	r24, 0x05	; 5
    3098:	b8 01       	movw	r22, r16
    309a:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    309e:	8a 89       	ldd	r24, Y+18	; 0x12
    30a0:	91 e0       	ldi	r25, 0x01	; 1
    30a2:	89 27       	eor	r24, r25
    30a4:	8a 8b       	std	Y+18, r24	; 0x12
    30a6:	c7 01       	movw	r24, r14
    30a8:	b8 01       	movw	r22, r16
    30aa:	ae 01       	movw	r20, r28
    30ac:	47 5e       	subi	r20, 0xE7	; 231
    30ae:	5f 4f       	sbci	r21, 0xFF	; 255
    30b0:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_fpadd_parts>
    30b4:	0e 94 df 1b 	call	0x37be	; 0x37be <__pack_f>
    30b8:	a0 96       	adiw	r28, 0x20	; 32
    30ba:	e6 e0       	ldi	r30, 0x06	; 6
    30bc:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__+0x18>

000030c0 <__addsf3>:
    30c0:	a0 e2       	ldi	r26, 0x20	; 32
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	e6 e6       	ldi	r30, 0x66	; 102
    30c6:	f8 e1       	ldi	r31, 0x18	; 24
    30c8:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__+0x18>
    30cc:	69 83       	std	Y+1, r22	; 0x01
    30ce:	7a 83       	std	Y+2, r23	; 0x02
    30d0:	8b 83       	std	Y+3, r24	; 0x03
    30d2:	9c 83       	std	Y+4, r25	; 0x04
    30d4:	2d 83       	std	Y+5, r18	; 0x05
    30d6:	3e 83       	std	Y+6, r19	; 0x06
    30d8:	4f 83       	std	Y+7, r20	; 0x07
    30da:	58 87       	std	Y+8, r21	; 0x08
    30dc:	f9 e0       	ldi	r31, 0x09	; 9
    30de:	ef 2e       	mov	r14, r31
    30e0:	f1 2c       	mov	r15, r1
    30e2:	ec 0e       	add	r14, r28
    30e4:	fd 1e       	adc	r15, r29
    30e6:	ce 01       	movw	r24, r28
    30e8:	01 96       	adiw	r24, 0x01	; 1
    30ea:	b7 01       	movw	r22, r14
    30ec:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    30f0:	8e 01       	movw	r16, r28
    30f2:	0f 5e       	subi	r16, 0xEF	; 239
    30f4:	1f 4f       	sbci	r17, 0xFF	; 255
    30f6:	ce 01       	movw	r24, r28
    30f8:	05 96       	adiw	r24, 0x05	; 5
    30fa:	b8 01       	movw	r22, r16
    30fc:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    3100:	c7 01       	movw	r24, r14
    3102:	b8 01       	movw	r22, r16
    3104:	ae 01       	movw	r20, r28
    3106:	47 5e       	subi	r20, 0xE7	; 231
    3108:	5f 4f       	sbci	r21, 0xFF	; 255
    310a:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <_fpadd_parts>
    310e:	0e 94 df 1b 	call	0x37be	; 0x37be <__pack_f>
    3112:	a0 96       	adiw	r28, 0x20	; 32
    3114:	e6 e0       	ldi	r30, 0x06	; 6
    3116:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__+0x18>

0000311a <__mulsf3>:
    311a:	a0 e2       	ldi	r26, 0x20	; 32
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	e3 e9       	ldi	r30, 0x93	; 147
    3120:	f8 e1       	ldi	r31, 0x18	; 24
    3122:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__prologue_saves__>
    3126:	69 83       	std	Y+1, r22	; 0x01
    3128:	7a 83       	std	Y+2, r23	; 0x02
    312a:	8b 83       	std	Y+3, r24	; 0x03
    312c:	9c 83       	std	Y+4, r25	; 0x04
    312e:	2d 83       	std	Y+5, r18	; 0x05
    3130:	3e 83       	std	Y+6, r19	; 0x06
    3132:	4f 83       	std	Y+7, r20	; 0x07
    3134:	58 87       	std	Y+8, r21	; 0x08
    3136:	ce 01       	movw	r24, r28
    3138:	01 96       	adiw	r24, 0x01	; 1
    313a:	be 01       	movw	r22, r28
    313c:	67 5f       	subi	r22, 0xF7	; 247
    313e:	7f 4f       	sbci	r23, 0xFF	; 255
    3140:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    3144:	ce 01       	movw	r24, r28
    3146:	05 96       	adiw	r24, 0x05	; 5
    3148:	be 01       	movw	r22, r28
    314a:	6f 5e       	subi	r22, 0xEF	; 239
    314c:	7f 4f       	sbci	r23, 0xFF	; 255
    314e:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    3152:	99 85       	ldd	r25, Y+9	; 0x09
    3154:	92 30       	cpi	r25, 0x02	; 2
    3156:	88 f0       	brcs	.+34     	; 0x317a <__mulsf3+0x60>
    3158:	89 89       	ldd	r24, Y+17	; 0x11
    315a:	82 30       	cpi	r24, 0x02	; 2
    315c:	c8 f0       	brcs	.+50     	; 0x3190 <__mulsf3+0x76>
    315e:	94 30       	cpi	r25, 0x04	; 4
    3160:	19 f4       	brne	.+6      	; 0x3168 <__mulsf3+0x4e>
    3162:	82 30       	cpi	r24, 0x02	; 2
    3164:	51 f4       	brne	.+20     	; 0x317a <__mulsf3+0x60>
    3166:	04 c0       	rjmp	.+8      	; 0x3170 <__mulsf3+0x56>
    3168:	84 30       	cpi	r24, 0x04	; 4
    316a:	29 f4       	brne	.+10     	; 0x3176 <__mulsf3+0x5c>
    316c:	92 30       	cpi	r25, 0x02	; 2
    316e:	81 f4       	brne	.+32     	; 0x3190 <__mulsf3+0x76>
    3170:	85 ee       	ldi	r24, 0xE5	; 229
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	c6 c0       	rjmp	.+396    	; 0x3302 <__mulsf3+0x1e8>
    3176:	92 30       	cpi	r25, 0x02	; 2
    3178:	49 f4       	brne	.+18     	; 0x318c <__mulsf3+0x72>
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	9a 85       	ldd	r25, Y+10	; 0x0a
    317e:	8a 89       	ldd	r24, Y+18	; 0x12
    3180:	98 13       	cpse	r25, r24
    3182:	21 e0       	ldi	r18, 0x01	; 1
    3184:	2a 87       	std	Y+10, r18	; 0x0a
    3186:	ce 01       	movw	r24, r28
    3188:	09 96       	adiw	r24, 0x09	; 9
    318a:	bb c0       	rjmp	.+374    	; 0x3302 <__mulsf3+0x1e8>
    318c:	82 30       	cpi	r24, 0x02	; 2
    318e:	49 f4       	brne	.+18     	; 0x31a2 <__mulsf3+0x88>
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	9a 85       	ldd	r25, Y+10	; 0x0a
    3194:	8a 89       	ldd	r24, Y+18	; 0x12
    3196:	98 13       	cpse	r25, r24
    3198:	21 e0       	ldi	r18, 0x01	; 1
    319a:	2a 8b       	std	Y+18, r18	; 0x12
    319c:	ce 01       	movw	r24, r28
    319e:	41 96       	adiw	r24, 0x11	; 17
    31a0:	b0 c0       	rjmp	.+352    	; 0x3302 <__mulsf3+0x1e8>
    31a2:	2d 84       	ldd	r2, Y+13	; 0x0d
    31a4:	3e 84       	ldd	r3, Y+14	; 0x0e
    31a6:	4f 84       	ldd	r4, Y+15	; 0x0f
    31a8:	58 88       	ldd	r5, Y+16	; 0x10
    31aa:	6d 88       	ldd	r6, Y+21	; 0x15
    31ac:	7e 88       	ldd	r7, Y+22	; 0x16
    31ae:	8f 88       	ldd	r8, Y+23	; 0x17
    31b0:	98 8c       	ldd	r9, Y+24	; 0x18
    31b2:	ee 24       	eor	r14, r14
    31b4:	ff 24       	eor	r15, r15
    31b6:	87 01       	movw	r16, r14
    31b8:	aa 24       	eor	r10, r10
    31ba:	bb 24       	eor	r11, r11
    31bc:	65 01       	movw	r12, r10
    31be:	40 e0       	ldi	r20, 0x00	; 0
    31c0:	50 e0       	ldi	r21, 0x00	; 0
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	e0 e0       	ldi	r30, 0x00	; 0
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	c1 01       	movw	r24, r2
    31cc:	81 70       	andi	r24, 0x01	; 1
    31ce:	90 70       	andi	r25, 0x00	; 0
    31d0:	89 2b       	or	r24, r25
    31d2:	e9 f0       	breq	.+58     	; 0x320e <__mulsf3+0xf4>
    31d4:	e6 0c       	add	r14, r6
    31d6:	f7 1c       	adc	r15, r7
    31d8:	08 1d       	adc	r16, r8
    31da:	19 1d       	adc	r17, r9
    31dc:	9a 01       	movw	r18, r20
    31de:	ab 01       	movw	r20, r22
    31e0:	2a 0d       	add	r18, r10
    31e2:	3b 1d       	adc	r19, r11
    31e4:	4c 1d       	adc	r20, r12
    31e6:	5d 1d       	adc	r21, r13
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	a0 e0       	ldi	r26, 0x00	; 0
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	e6 14       	cp	r14, r6
    31f2:	f7 04       	cpc	r15, r7
    31f4:	08 05       	cpc	r16, r8
    31f6:	19 05       	cpc	r17, r9
    31f8:	20 f4       	brcc	.+8      	; 0x3202 <__mulsf3+0xe8>
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	a0 e0       	ldi	r26, 0x00	; 0
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	ba 01       	movw	r22, r20
    3204:	a9 01       	movw	r20, r18
    3206:	48 0f       	add	r20, r24
    3208:	59 1f       	adc	r21, r25
    320a:	6a 1f       	adc	r22, r26
    320c:	7b 1f       	adc	r23, r27
    320e:	aa 0c       	add	r10, r10
    3210:	bb 1c       	adc	r11, r11
    3212:	cc 1c       	adc	r12, r12
    3214:	dd 1c       	adc	r13, r13
    3216:	97 fe       	sbrs	r9, 7
    3218:	08 c0       	rjmp	.+16     	; 0x322a <__mulsf3+0x110>
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	a0 e0       	ldi	r26, 0x00	; 0
    3220:	b0 e0       	ldi	r27, 0x00	; 0
    3222:	a8 2a       	or	r10, r24
    3224:	b9 2a       	or	r11, r25
    3226:	ca 2a       	or	r12, r26
    3228:	db 2a       	or	r13, r27
    322a:	31 96       	adiw	r30, 0x01	; 1
    322c:	e0 32       	cpi	r30, 0x20	; 32
    322e:	f1 05       	cpc	r31, r1
    3230:	49 f0       	breq	.+18     	; 0x3244 <__mulsf3+0x12a>
    3232:	66 0c       	add	r6, r6
    3234:	77 1c       	adc	r7, r7
    3236:	88 1c       	adc	r8, r8
    3238:	99 1c       	adc	r9, r9
    323a:	56 94       	lsr	r5
    323c:	47 94       	ror	r4
    323e:	37 94       	ror	r3
    3240:	27 94       	ror	r2
    3242:	c3 cf       	rjmp	.-122    	; 0x31ca <__mulsf3+0xb0>
    3244:	fa 85       	ldd	r31, Y+10	; 0x0a
    3246:	ea 89       	ldd	r30, Y+18	; 0x12
    3248:	2b 89       	ldd	r18, Y+19	; 0x13
    324a:	3c 89       	ldd	r19, Y+20	; 0x14
    324c:	8b 85       	ldd	r24, Y+11	; 0x0b
    324e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3250:	28 0f       	add	r18, r24
    3252:	39 1f       	adc	r19, r25
    3254:	2e 5f       	subi	r18, 0xFE	; 254
    3256:	3f 4f       	sbci	r19, 0xFF	; 255
    3258:	17 c0       	rjmp	.+46     	; 0x3288 <__mulsf3+0x16e>
    325a:	ca 01       	movw	r24, r20
    325c:	81 70       	andi	r24, 0x01	; 1
    325e:	90 70       	andi	r25, 0x00	; 0
    3260:	89 2b       	or	r24, r25
    3262:	61 f0       	breq	.+24     	; 0x327c <__mulsf3+0x162>
    3264:	16 95       	lsr	r17
    3266:	07 95       	ror	r16
    3268:	f7 94       	ror	r15
    326a:	e7 94       	ror	r14
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	a0 e0       	ldi	r26, 0x00	; 0
    3272:	b0 e8       	ldi	r27, 0x80	; 128
    3274:	e8 2a       	or	r14, r24
    3276:	f9 2a       	or	r15, r25
    3278:	0a 2b       	or	r16, r26
    327a:	1b 2b       	or	r17, r27
    327c:	76 95       	lsr	r23
    327e:	67 95       	ror	r22
    3280:	57 95       	ror	r21
    3282:	47 95       	ror	r20
    3284:	2f 5f       	subi	r18, 0xFF	; 255
    3286:	3f 4f       	sbci	r19, 0xFF	; 255
    3288:	77 fd       	sbrc	r23, 7
    328a:	e7 cf       	rjmp	.-50     	; 0x325a <__mulsf3+0x140>
    328c:	0c c0       	rjmp	.+24     	; 0x32a6 <__mulsf3+0x18c>
    328e:	44 0f       	add	r20, r20
    3290:	55 1f       	adc	r21, r21
    3292:	66 1f       	adc	r22, r22
    3294:	77 1f       	adc	r23, r23
    3296:	17 fd       	sbrc	r17, 7
    3298:	41 60       	ori	r20, 0x01	; 1
    329a:	ee 0c       	add	r14, r14
    329c:	ff 1c       	adc	r15, r15
    329e:	00 1f       	adc	r16, r16
    32a0:	11 1f       	adc	r17, r17
    32a2:	21 50       	subi	r18, 0x01	; 1
    32a4:	30 40       	sbci	r19, 0x00	; 0
    32a6:	40 30       	cpi	r20, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	59 07       	cpc	r21, r25
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	69 07       	cpc	r22, r25
    32b0:	90 e4       	ldi	r25, 0x40	; 64
    32b2:	79 07       	cpc	r23, r25
    32b4:	60 f3       	brcs	.-40     	; 0x328e <__mulsf3+0x174>
    32b6:	2b 8f       	std	Y+27, r18	; 0x1b
    32b8:	3c 8f       	std	Y+28, r19	; 0x1c
    32ba:	db 01       	movw	r26, r22
    32bc:	ca 01       	movw	r24, r20
    32be:	8f 77       	andi	r24, 0x7F	; 127
    32c0:	90 70       	andi	r25, 0x00	; 0
    32c2:	a0 70       	andi	r26, 0x00	; 0
    32c4:	b0 70       	andi	r27, 0x00	; 0
    32c6:	80 34       	cpi	r24, 0x40	; 64
    32c8:	91 05       	cpc	r25, r1
    32ca:	a1 05       	cpc	r26, r1
    32cc:	b1 05       	cpc	r27, r1
    32ce:	61 f4       	brne	.+24     	; 0x32e8 <__mulsf3+0x1ce>
    32d0:	47 fd       	sbrc	r20, 7
    32d2:	0a c0       	rjmp	.+20     	; 0x32e8 <__mulsf3+0x1ce>
    32d4:	e1 14       	cp	r14, r1
    32d6:	f1 04       	cpc	r15, r1
    32d8:	01 05       	cpc	r16, r1
    32da:	11 05       	cpc	r17, r1
    32dc:	29 f0       	breq	.+10     	; 0x32e8 <__mulsf3+0x1ce>
    32de:	40 5c       	subi	r20, 0xC0	; 192
    32e0:	5f 4f       	sbci	r21, 0xFF	; 255
    32e2:	6f 4f       	sbci	r22, 0xFF	; 255
    32e4:	7f 4f       	sbci	r23, 0xFF	; 255
    32e6:	40 78       	andi	r20, 0x80	; 128
    32e8:	1a 8e       	std	Y+26, r1	; 0x1a
    32ea:	fe 17       	cp	r31, r30
    32ec:	11 f0       	breq	.+4      	; 0x32f2 <__mulsf3+0x1d8>
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	8a 8f       	std	Y+26, r24	; 0x1a
    32f2:	4d 8f       	std	Y+29, r20	; 0x1d
    32f4:	5e 8f       	std	Y+30, r21	; 0x1e
    32f6:	6f 8f       	std	Y+31, r22	; 0x1f
    32f8:	78 a3       	std	Y+32, r23	; 0x20
    32fa:	83 e0       	ldi	r24, 0x03	; 3
    32fc:	89 8f       	std	Y+25, r24	; 0x19
    32fe:	ce 01       	movw	r24, r28
    3300:	49 96       	adiw	r24, 0x19	; 25
    3302:	0e 94 df 1b 	call	0x37be	; 0x37be <__pack_f>
    3306:	a0 96       	adiw	r28, 0x20	; 32
    3308:	e2 e1       	ldi	r30, 0x12	; 18
    330a:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__epilogue_restores__>

0000330e <__divsf3>:
    330e:	a8 e1       	ldi	r26, 0x18	; 24
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	ed e8       	ldi	r30, 0x8D	; 141
    3314:	f9 e1       	ldi	r31, 0x19	; 25
    3316:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__prologue_saves__+0x10>
    331a:	69 83       	std	Y+1, r22	; 0x01
    331c:	7a 83       	std	Y+2, r23	; 0x02
    331e:	8b 83       	std	Y+3, r24	; 0x03
    3320:	9c 83       	std	Y+4, r25	; 0x04
    3322:	2d 83       	std	Y+5, r18	; 0x05
    3324:	3e 83       	std	Y+6, r19	; 0x06
    3326:	4f 83       	std	Y+7, r20	; 0x07
    3328:	58 87       	std	Y+8, r21	; 0x08
    332a:	b9 e0       	ldi	r27, 0x09	; 9
    332c:	eb 2e       	mov	r14, r27
    332e:	f1 2c       	mov	r15, r1
    3330:	ec 0e       	add	r14, r28
    3332:	fd 1e       	adc	r15, r29
    3334:	ce 01       	movw	r24, r28
    3336:	01 96       	adiw	r24, 0x01	; 1
    3338:	b7 01       	movw	r22, r14
    333a:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    333e:	8e 01       	movw	r16, r28
    3340:	0f 5e       	subi	r16, 0xEF	; 239
    3342:	1f 4f       	sbci	r17, 0xFF	; 255
    3344:	ce 01       	movw	r24, r28
    3346:	05 96       	adiw	r24, 0x05	; 5
    3348:	b8 01       	movw	r22, r16
    334a:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    334e:	29 85       	ldd	r18, Y+9	; 0x09
    3350:	22 30       	cpi	r18, 0x02	; 2
    3352:	08 f4       	brcc	.+2      	; 0x3356 <__divsf3+0x48>
    3354:	7e c0       	rjmp	.+252    	; 0x3452 <__divsf3+0x144>
    3356:	39 89       	ldd	r19, Y+17	; 0x11
    3358:	32 30       	cpi	r19, 0x02	; 2
    335a:	10 f4       	brcc	.+4      	; 0x3360 <__divsf3+0x52>
    335c:	b8 01       	movw	r22, r16
    335e:	7c c0       	rjmp	.+248    	; 0x3458 <__divsf3+0x14a>
    3360:	8a 85       	ldd	r24, Y+10	; 0x0a
    3362:	9a 89       	ldd	r25, Y+18	; 0x12
    3364:	89 27       	eor	r24, r25
    3366:	8a 87       	std	Y+10, r24	; 0x0a
    3368:	24 30       	cpi	r18, 0x04	; 4
    336a:	11 f0       	breq	.+4      	; 0x3370 <__divsf3+0x62>
    336c:	22 30       	cpi	r18, 0x02	; 2
    336e:	31 f4       	brne	.+12     	; 0x337c <__divsf3+0x6e>
    3370:	23 17       	cp	r18, r19
    3372:	09 f0       	breq	.+2      	; 0x3376 <__divsf3+0x68>
    3374:	6e c0       	rjmp	.+220    	; 0x3452 <__divsf3+0x144>
    3376:	65 ee       	ldi	r22, 0xE5	; 229
    3378:	70 e0       	ldi	r23, 0x00	; 0
    337a:	6e c0       	rjmp	.+220    	; 0x3458 <__divsf3+0x14a>
    337c:	34 30       	cpi	r19, 0x04	; 4
    337e:	39 f4       	brne	.+14     	; 0x338e <__divsf3+0x80>
    3380:	1d 86       	std	Y+13, r1	; 0x0d
    3382:	1e 86       	std	Y+14, r1	; 0x0e
    3384:	1f 86       	std	Y+15, r1	; 0x0f
    3386:	18 8a       	std	Y+16, r1	; 0x10
    3388:	1c 86       	std	Y+12, r1	; 0x0c
    338a:	1b 86       	std	Y+11, r1	; 0x0b
    338c:	04 c0       	rjmp	.+8      	; 0x3396 <__divsf3+0x88>
    338e:	32 30       	cpi	r19, 0x02	; 2
    3390:	21 f4       	brne	.+8      	; 0x339a <__divsf3+0x8c>
    3392:	84 e0       	ldi	r24, 0x04	; 4
    3394:	89 87       	std	Y+9, r24	; 0x09
    3396:	b7 01       	movw	r22, r14
    3398:	5f c0       	rjmp	.+190    	; 0x3458 <__divsf3+0x14a>
    339a:	2b 85       	ldd	r18, Y+11	; 0x0b
    339c:	3c 85       	ldd	r19, Y+12	; 0x0c
    339e:	8b 89       	ldd	r24, Y+19	; 0x13
    33a0:	9c 89       	ldd	r25, Y+20	; 0x14
    33a2:	28 1b       	sub	r18, r24
    33a4:	39 0b       	sbc	r19, r25
    33a6:	3c 87       	std	Y+12, r19	; 0x0c
    33a8:	2b 87       	std	Y+11, r18	; 0x0b
    33aa:	ed 84       	ldd	r14, Y+13	; 0x0d
    33ac:	fe 84       	ldd	r15, Y+14	; 0x0e
    33ae:	0f 85       	ldd	r16, Y+15	; 0x0f
    33b0:	18 89       	ldd	r17, Y+16	; 0x10
    33b2:	ad 88       	ldd	r10, Y+21	; 0x15
    33b4:	be 88       	ldd	r11, Y+22	; 0x16
    33b6:	cf 88       	ldd	r12, Y+23	; 0x17
    33b8:	d8 8c       	ldd	r13, Y+24	; 0x18
    33ba:	ea 14       	cp	r14, r10
    33bc:	fb 04       	cpc	r15, r11
    33be:	0c 05       	cpc	r16, r12
    33c0:	1d 05       	cpc	r17, r13
    33c2:	40 f4       	brcc	.+16     	; 0x33d4 <__divsf3+0xc6>
    33c4:	ee 0c       	add	r14, r14
    33c6:	ff 1c       	adc	r15, r15
    33c8:	00 1f       	adc	r16, r16
    33ca:	11 1f       	adc	r17, r17
    33cc:	21 50       	subi	r18, 0x01	; 1
    33ce:	30 40       	sbci	r19, 0x00	; 0
    33d0:	3c 87       	std	Y+12, r19	; 0x0c
    33d2:	2b 87       	std	Y+11, r18	; 0x0b
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	40 e0       	ldi	r20, 0x00	; 0
    33da:	50 e0       	ldi	r21, 0x00	; 0
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	a0 e0       	ldi	r26, 0x00	; 0
    33e2:	b0 e4       	ldi	r27, 0x40	; 64
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	70 e0       	ldi	r23, 0x00	; 0
    33e8:	ea 14       	cp	r14, r10
    33ea:	fb 04       	cpc	r15, r11
    33ec:	0c 05       	cpc	r16, r12
    33ee:	1d 05       	cpc	r17, r13
    33f0:	40 f0       	brcs	.+16     	; 0x3402 <__divsf3+0xf4>
    33f2:	28 2b       	or	r18, r24
    33f4:	39 2b       	or	r19, r25
    33f6:	4a 2b       	or	r20, r26
    33f8:	5b 2b       	or	r21, r27
    33fa:	ea 18       	sub	r14, r10
    33fc:	fb 08       	sbc	r15, r11
    33fe:	0c 09       	sbc	r16, r12
    3400:	1d 09       	sbc	r17, r13
    3402:	b6 95       	lsr	r27
    3404:	a7 95       	ror	r26
    3406:	97 95       	ror	r25
    3408:	87 95       	ror	r24
    340a:	ee 0c       	add	r14, r14
    340c:	ff 1c       	adc	r15, r15
    340e:	00 1f       	adc	r16, r16
    3410:	11 1f       	adc	r17, r17
    3412:	6f 5f       	subi	r22, 0xFF	; 255
    3414:	7f 4f       	sbci	r23, 0xFF	; 255
    3416:	6f 31       	cpi	r22, 0x1F	; 31
    3418:	71 05       	cpc	r23, r1
    341a:	31 f7       	brne	.-52     	; 0x33e8 <__divsf3+0xda>
    341c:	da 01       	movw	r26, r20
    341e:	c9 01       	movw	r24, r18
    3420:	8f 77       	andi	r24, 0x7F	; 127
    3422:	90 70       	andi	r25, 0x00	; 0
    3424:	a0 70       	andi	r26, 0x00	; 0
    3426:	b0 70       	andi	r27, 0x00	; 0
    3428:	80 34       	cpi	r24, 0x40	; 64
    342a:	91 05       	cpc	r25, r1
    342c:	a1 05       	cpc	r26, r1
    342e:	b1 05       	cpc	r27, r1
    3430:	61 f4       	brne	.+24     	; 0x344a <__divsf3+0x13c>
    3432:	27 fd       	sbrc	r18, 7
    3434:	0a c0       	rjmp	.+20     	; 0x344a <__divsf3+0x13c>
    3436:	e1 14       	cp	r14, r1
    3438:	f1 04       	cpc	r15, r1
    343a:	01 05       	cpc	r16, r1
    343c:	11 05       	cpc	r17, r1
    343e:	29 f0       	breq	.+10     	; 0x344a <__divsf3+0x13c>
    3440:	20 5c       	subi	r18, 0xC0	; 192
    3442:	3f 4f       	sbci	r19, 0xFF	; 255
    3444:	4f 4f       	sbci	r20, 0xFF	; 255
    3446:	5f 4f       	sbci	r21, 0xFF	; 255
    3448:	20 78       	andi	r18, 0x80	; 128
    344a:	2d 87       	std	Y+13, r18	; 0x0d
    344c:	3e 87       	std	Y+14, r19	; 0x0e
    344e:	4f 87       	std	Y+15, r20	; 0x0f
    3450:	58 8b       	std	Y+16, r21	; 0x10
    3452:	be 01       	movw	r22, r28
    3454:	67 5f       	subi	r22, 0xF7	; 247
    3456:	7f 4f       	sbci	r23, 0xFF	; 255
    3458:	cb 01       	movw	r24, r22
    345a:	0e 94 df 1b 	call	0x37be	; 0x37be <__pack_f>
    345e:	68 96       	adiw	r28, 0x18	; 24
    3460:	ea e0       	ldi	r30, 0x0A	; 10
    3462:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__epilogue_restores__+0x10>

00003466 <__gtsf2>:
    3466:	a8 e1       	ldi	r26, 0x18	; 24
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e9 e3       	ldi	r30, 0x39	; 57
    346c:	fa e1       	ldi	r31, 0x1A	; 26
    346e:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__+0x18>
    3472:	69 83       	std	Y+1, r22	; 0x01
    3474:	7a 83       	std	Y+2, r23	; 0x02
    3476:	8b 83       	std	Y+3, r24	; 0x03
    3478:	9c 83       	std	Y+4, r25	; 0x04
    347a:	2d 83       	std	Y+5, r18	; 0x05
    347c:	3e 83       	std	Y+6, r19	; 0x06
    347e:	4f 83       	std	Y+7, r20	; 0x07
    3480:	58 87       	std	Y+8, r21	; 0x08
    3482:	89 e0       	ldi	r24, 0x09	; 9
    3484:	e8 2e       	mov	r14, r24
    3486:	f1 2c       	mov	r15, r1
    3488:	ec 0e       	add	r14, r28
    348a:	fd 1e       	adc	r15, r29
    348c:	ce 01       	movw	r24, r28
    348e:	01 96       	adiw	r24, 0x01	; 1
    3490:	b7 01       	movw	r22, r14
    3492:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    3496:	8e 01       	movw	r16, r28
    3498:	0f 5e       	subi	r16, 0xEF	; 239
    349a:	1f 4f       	sbci	r17, 0xFF	; 255
    349c:	ce 01       	movw	r24, r28
    349e:	05 96       	adiw	r24, 0x05	; 5
    34a0:	b8 01       	movw	r22, r16
    34a2:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    34a6:	89 85       	ldd	r24, Y+9	; 0x09
    34a8:	82 30       	cpi	r24, 0x02	; 2
    34aa:	40 f0       	brcs	.+16     	; 0x34bc <__gtsf2+0x56>
    34ac:	89 89       	ldd	r24, Y+17	; 0x11
    34ae:	82 30       	cpi	r24, 0x02	; 2
    34b0:	28 f0       	brcs	.+10     	; 0x34bc <__gtsf2+0x56>
    34b2:	c7 01       	movw	r24, r14
    34b4:	b8 01       	movw	r22, r16
    34b6:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <__fpcmp_parts_f>
    34ba:	01 c0       	rjmp	.+2      	; 0x34be <__gtsf2+0x58>
    34bc:	8f ef       	ldi	r24, 0xFF	; 255
    34be:	68 96       	adiw	r28, 0x18	; 24
    34c0:	e6 e0       	ldi	r30, 0x06	; 6
    34c2:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__+0x18>

000034c6 <__gesf2>:
    34c6:	a8 e1       	ldi	r26, 0x18	; 24
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	e9 e6       	ldi	r30, 0x69	; 105
    34cc:	fa e1       	ldi	r31, 0x1A	; 26
    34ce:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__+0x18>
    34d2:	69 83       	std	Y+1, r22	; 0x01
    34d4:	7a 83       	std	Y+2, r23	; 0x02
    34d6:	8b 83       	std	Y+3, r24	; 0x03
    34d8:	9c 83       	std	Y+4, r25	; 0x04
    34da:	2d 83       	std	Y+5, r18	; 0x05
    34dc:	3e 83       	std	Y+6, r19	; 0x06
    34de:	4f 83       	std	Y+7, r20	; 0x07
    34e0:	58 87       	std	Y+8, r21	; 0x08
    34e2:	89 e0       	ldi	r24, 0x09	; 9
    34e4:	e8 2e       	mov	r14, r24
    34e6:	f1 2c       	mov	r15, r1
    34e8:	ec 0e       	add	r14, r28
    34ea:	fd 1e       	adc	r15, r29
    34ec:	ce 01       	movw	r24, r28
    34ee:	01 96       	adiw	r24, 0x01	; 1
    34f0:	b7 01       	movw	r22, r14
    34f2:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    34f6:	8e 01       	movw	r16, r28
    34f8:	0f 5e       	subi	r16, 0xEF	; 239
    34fa:	1f 4f       	sbci	r17, 0xFF	; 255
    34fc:	ce 01       	movw	r24, r28
    34fe:	05 96       	adiw	r24, 0x05	; 5
    3500:	b8 01       	movw	r22, r16
    3502:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    3506:	89 85       	ldd	r24, Y+9	; 0x09
    3508:	82 30       	cpi	r24, 0x02	; 2
    350a:	40 f0       	brcs	.+16     	; 0x351c <__gesf2+0x56>
    350c:	89 89       	ldd	r24, Y+17	; 0x11
    350e:	82 30       	cpi	r24, 0x02	; 2
    3510:	28 f0       	brcs	.+10     	; 0x351c <__gesf2+0x56>
    3512:	c7 01       	movw	r24, r14
    3514:	b8 01       	movw	r22, r16
    3516:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <__fpcmp_parts_f>
    351a:	01 c0       	rjmp	.+2      	; 0x351e <__gesf2+0x58>
    351c:	8f ef       	ldi	r24, 0xFF	; 255
    351e:	68 96       	adiw	r28, 0x18	; 24
    3520:	e6 e0       	ldi	r30, 0x06	; 6
    3522:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__+0x18>

00003526 <__ltsf2>:
    3526:	a8 e1       	ldi	r26, 0x18	; 24
    3528:	b0 e0       	ldi	r27, 0x00	; 0
    352a:	e9 e9       	ldi	r30, 0x99	; 153
    352c:	fa e1       	ldi	r31, 0x1A	; 26
    352e:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__+0x18>
    3532:	69 83       	std	Y+1, r22	; 0x01
    3534:	7a 83       	std	Y+2, r23	; 0x02
    3536:	8b 83       	std	Y+3, r24	; 0x03
    3538:	9c 83       	std	Y+4, r25	; 0x04
    353a:	2d 83       	std	Y+5, r18	; 0x05
    353c:	3e 83       	std	Y+6, r19	; 0x06
    353e:	4f 83       	std	Y+7, r20	; 0x07
    3540:	58 87       	std	Y+8, r21	; 0x08
    3542:	89 e0       	ldi	r24, 0x09	; 9
    3544:	e8 2e       	mov	r14, r24
    3546:	f1 2c       	mov	r15, r1
    3548:	ec 0e       	add	r14, r28
    354a:	fd 1e       	adc	r15, r29
    354c:	ce 01       	movw	r24, r28
    354e:	01 96       	adiw	r24, 0x01	; 1
    3550:	b7 01       	movw	r22, r14
    3552:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    3556:	8e 01       	movw	r16, r28
    3558:	0f 5e       	subi	r16, 0xEF	; 239
    355a:	1f 4f       	sbci	r17, 0xFF	; 255
    355c:	ce 01       	movw	r24, r28
    355e:	05 96       	adiw	r24, 0x05	; 5
    3560:	b8 01       	movw	r22, r16
    3562:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    3566:	89 85       	ldd	r24, Y+9	; 0x09
    3568:	82 30       	cpi	r24, 0x02	; 2
    356a:	40 f0       	brcs	.+16     	; 0x357c <__ltsf2+0x56>
    356c:	89 89       	ldd	r24, Y+17	; 0x11
    356e:	82 30       	cpi	r24, 0x02	; 2
    3570:	28 f0       	brcs	.+10     	; 0x357c <__ltsf2+0x56>
    3572:	c7 01       	movw	r24, r14
    3574:	b8 01       	movw	r22, r16
    3576:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <__fpcmp_parts_f>
    357a:	01 c0       	rjmp	.+2      	; 0x357e <__ltsf2+0x58>
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	68 96       	adiw	r28, 0x18	; 24
    3580:	e6 e0       	ldi	r30, 0x06	; 6
    3582:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__+0x18>

00003586 <__fixsfsi>:
    3586:	ac e0       	ldi	r26, 0x0C	; 12
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	e9 ec       	ldi	r30, 0xC9	; 201
    358c:	fa e1       	ldi	r31, 0x1A	; 26
    358e:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <__prologue_saves__+0x20>
    3592:	69 83       	std	Y+1, r22	; 0x01
    3594:	7a 83       	std	Y+2, r23	; 0x02
    3596:	8b 83       	std	Y+3, r24	; 0x03
    3598:	9c 83       	std	Y+4, r25	; 0x04
    359a:	ce 01       	movw	r24, r28
    359c:	01 96       	adiw	r24, 0x01	; 1
    359e:	be 01       	movw	r22, r28
    35a0:	6b 5f       	subi	r22, 0xFB	; 251
    35a2:	7f 4f       	sbci	r23, 0xFF	; 255
    35a4:	0e 94 b4 1c 	call	0x3968	; 0x3968 <__unpack_f>
    35a8:	8d 81       	ldd	r24, Y+5	; 0x05
    35aa:	82 30       	cpi	r24, 0x02	; 2
    35ac:	61 f1       	breq	.+88     	; 0x3606 <__fixsfsi+0x80>
    35ae:	82 30       	cpi	r24, 0x02	; 2
    35b0:	50 f1       	brcs	.+84     	; 0x3606 <__fixsfsi+0x80>
    35b2:	84 30       	cpi	r24, 0x04	; 4
    35b4:	21 f4       	brne	.+8      	; 0x35be <__fixsfsi+0x38>
    35b6:	8e 81       	ldd	r24, Y+6	; 0x06
    35b8:	88 23       	and	r24, r24
    35ba:	51 f1       	breq	.+84     	; 0x3610 <__fixsfsi+0x8a>
    35bc:	2e c0       	rjmp	.+92     	; 0x361a <__fixsfsi+0x94>
    35be:	2f 81       	ldd	r18, Y+7	; 0x07
    35c0:	38 85       	ldd	r19, Y+8	; 0x08
    35c2:	37 fd       	sbrc	r19, 7
    35c4:	20 c0       	rjmp	.+64     	; 0x3606 <__fixsfsi+0x80>
    35c6:	6e 81       	ldd	r22, Y+6	; 0x06
    35c8:	2f 31       	cpi	r18, 0x1F	; 31
    35ca:	31 05       	cpc	r19, r1
    35cc:	1c f0       	brlt	.+6      	; 0x35d4 <__fixsfsi+0x4e>
    35ce:	66 23       	and	r22, r22
    35d0:	f9 f0       	breq	.+62     	; 0x3610 <__fixsfsi+0x8a>
    35d2:	23 c0       	rjmp	.+70     	; 0x361a <__fixsfsi+0x94>
    35d4:	8e e1       	ldi	r24, 0x1E	; 30
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	82 1b       	sub	r24, r18
    35da:	93 0b       	sbc	r25, r19
    35dc:	29 85       	ldd	r18, Y+9	; 0x09
    35de:	3a 85       	ldd	r19, Y+10	; 0x0a
    35e0:	4b 85       	ldd	r20, Y+11	; 0x0b
    35e2:	5c 85       	ldd	r21, Y+12	; 0x0c
    35e4:	04 c0       	rjmp	.+8      	; 0x35ee <__fixsfsi+0x68>
    35e6:	56 95       	lsr	r21
    35e8:	47 95       	ror	r20
    35ea:	37 95       	ror	r19
    35ec:	27 95       	ror	r18
    35ee:	8a 95       	dec	r24
    35f0:	d2 f7       	brpl	.-12     	; 0x35e6 <__fixsfsi+0x60>
    35f2:	66 23       	and	r22, r22
    35f4:	b1 f0       	breq	.+44     	; 0x3622 <__fixsfsi+0x9c>
    35f6:	50 95       	com	r21
    35f8:	40 95       	com	r20
    35fa:	30 95       	com	r19
    35fc:	21 95       	neg	r18
    35fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3600:	4f 4f       	sbci	r20, 0xFF	; 255
    3602:	5f 4f       	sbci	r21, 0xFF	; 255
    3604:	0e c0       	rjmp	.+28     	; 0x3622 <__fixsfsi+0x9c>
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	40 e0       	ldi	r20, 0x00	; 0
    360c:	50 e0       	ldi	r21, 0x00	; 0
    360e:	09 c0       	rjmp	.+18     	; 0x3622 <__fixsfsi+0x9c>
    3610:	2f ef       	ldi	r18, 0xFF	; 255
    3612:	3f ef       	ldi	r19, 0xFF	; 255
    3614:	4f ef       	ldi	r20, 0xFF	; 255
    3616:	5f e7       	ldi	r21, 0x7F	; 127
    3618:	04 c0       	rjmp	.+8      	; 0x3622 <__fixsfsi+0x9c>
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e0       	ldi	r20, 0x00	; 0
    3620:	50 e8       	ldi	r21, 0x80	; 128
    3622:	b9 01       	movw	r22, r18
    3624:	ca 01       	movw	r24, r20
    3626:	2c 96       	adiw	r28, 0x0c	; 12
    3628:	e2 e0       	ldi	r30, 0x02	; 2
    362a:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__epilogue_restores__+0x20>

0000362e <__floatunsisf>:
    362e:	a8 e0       	ldi	r26, 0x08	; 8
    3630:	b0 e0       	ldi	r27, 0x00	; 0
    3632:	ed e1       	ldi	r30, 0x1D	; 29
    3634:	fb e1       	ldi	r31, 0x1B	; 27
    3636:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__prologue_saves__+0x10>
    363a:	7b 01       	movw	r14, r22
    363c:	8c 01       	movw	r16, r24
    363e:	61 15       	cp	r22, r1
    3640:	71 05       	cpc	r23, r1
    3642:	81 05       	cpc	r24, r1
    3644:	91 05       	cpc	r25, r1
    3646:	19 f4       	brne	.+6      	; 0x364e <__floatunsisf+0x20>
    3648:	82 e0       	ldi	r24, 0x02	; 2
    364a:	89 83       	std	Y+1, r24	; 0x01
    364c:	60 c0       	rjmp	.+192    	; 0x370e <__floatunsisf+0xe0>
    364e:	83 e0       	ldi	r24, 0x03	; 3
    3650:	89 83       	std	Y+1, r24	; 0x01
    3652:	8e e1       	ldi	r24, 0x1E	; 30
    3654:	c8 2e       	mov	r12, r24
    3656:	d1 2c       	mov	r13, r1
    3658:	dc 82       	std	Y+4, r13	; 0x04
    365a:	cb 82       	std	Y+3, r12	; 0x03
    365c:	ed 82       	std	Y+5, r14	; 0x05
    365e:	fe 82       	std	Y+6, r15	; 0x06
    3660:	0f 83       	std	Y+7, r16	; 0x07
    3662:	18 87       	std	Y+8, r17	; 0x08
    3664:	c8 01       	movw	r24, r16
    3666:	b7 01       	movw	r22, r14
    3668:	0e 94 90 1b 	call	0x3720	; 0x3720 <__clzsi2>
    366c:	fc 01       	movw	r30, r24
    366e:	31 97       	sbiw	r30, 0x01	; 1
    3670:	f7 ff       	sbrs	r31, 7
    3672:	3b c0       	rjmp	.+118    	; 0x36ea <__floatunsisf+0xbc>
    3674:	22 27       	eor	r18, r18
    3676:	33 27       	eor	r19, r19
    3678:	2e 1b       	sub	r18, r30
    367a:	3f 0b       	sbc	r19, r31
    367c:	57 01       	movw	r10, r14
    367e:	68 01       	movw	r12, r16
    3680:	02 2e       	mov	r0, r18
    3682:	04 c0       	rjmp	.+8      	; 0x368c <__floatunsisf+0x5e>
    3684:	d6 94       	lsr	r13
    3686:	c7 94       	ror	r12
    3688:	b7 94       	ror	r11
    368a:	a7 94       	ror	r10
    368c:	0a 94       	dec	r0
    368e:	d2 f7       	brpl	.-12     	; 0x3684 <__floatunsisf+0x56>
    3690:	40 e0       	ldi	r20, 0x00	; 0
    3692:	50 e0       	ldi	r21, 0x00	; 0
    3694:	60 e0       	ldi	r22, 0x00	; 0
    3696:	70 e0       	ldi	r23, 0x00	; 0
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	a0 e0       	ldi	r26, 0x00	; 0
    369e:	b0 e0       	ldi	r27, 0x00	; 0
    36a0:	04 c0       	rjmp	.+8      	; 0x36aa <__floatunsisf+0x7c>
    36a2:	88 0f       	add	r24, r24
    36a4:	99 1f       	adc	r25, r25
    36a6:	aa 1f       	adc	r26, r26
    36a8:	bb 1f       	adc	r27, r27
    36aa:	2a 95       	dec	r18
    36ac:	d2 f7       	brpl	.-12     	; 0x36a2 <__floatunsisf+0x74>
    36ae:	01 97       	sbiw	r24, 0x01	; 1
    36b0:	a1 09       	sbc	r26, r1
    36b2:	b1 09       	sbc	r27, r1
    36b4:	8e 21       	and	r24, r14
    36b6:	9f 21       	and	r25, r15
    36b8:	a0 23       	and	r26, r16
    36ba:	b1 23       	and	r27, r17
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	a1 05       	cpc	r26, r1
    36c0:	b1 05       	cpc	r27, r1
    36c2:	21 f0       	breq	.+8      	; 0x36cc <__floatunsisf+0x9e>
    36c4:	41 e0       	ldi	r20, 0x01	; 1
    36c6:	50 e0       	ldi	r21, 0x00	; 0
    36c8:	60 e0       	ldi	r22, 0x00	; 0
    36ca:	70 e0       	ldi	r23, 0x00	; 0
    36cc:	4a 29       	or	r20, r10
    36ce:	5b 29       	or	r21, r11
    36d0:	6c 29       	or	r22, r12
    36d2:	7d 29       	or	r23, r13
    36d4:	4d 83       	std	Y+5, r20	; 0x05
    36d6:	5e 83       	std	Y+6, r21	; 0x06
    36d8:	6f 83       	std	Y+7, r22	; 0x07
    36da:	78 87       	std	Y+8, r23	; 0x08
    36dc:	8e e1       	ldi	r24, 0x1E	; 30
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	8e 1b       	sub	r24, r30
    36e2:	9f 0b       	sbc	r25, r31
    36e4:	9c 83       	std	Y+4, r25	; 0x04
    36e6:	8b 83       	std	Y+3, r24	; 0x03
    36e8:	12 c0       	rjmp	.+36     	; 0x370e <__floatunsisf+0xe0>
    36ea:	30 97       	sbiw	r30, 0x00	; 0
    36ec:	81 f0       	breq	.+32     	; 0x370e <__floatunsisf+0xe0>
    36ee:	0e 2e       	mov	r0, r30
    36f0:	04 c0       	rjmp	.+8      	; 0x36fa <__floatunsisf+0xcc>
    36f2:	ee 0c       	add	r14, r14
    36f4:	ff 1c       	adc	r15, r15
    36f6:	00 1f       	adc	r16, r16
    36f8:	11 1f       	adc	r17, r17
    36fa:	0a 94       	dec	r0
    36fc:	d2 f7       	brpl	.-12     	; 0x36f2 <__floatunsisf+0xc4>
    36fe:	ed 82       	std	Y+5, r14	; 0x05
    3700:	fe 82       	std	Y+6, r15	; 0x06
    3702:	0f 83       	std	Y+7, r16	; 0x07
    3704:	18 87       	std	Y+8, r17	; 0x08
    3706:	ce 1a       	sub	r12, r30
    3708:	df 0a       	sbc	r13, r31
    370a:	dc 82       	std	Y+4, r13	; 0x04
    370c:	cb 82       	std	Y+3, r12	; 0x03
    370e:	1a 82       	std	Y+2, r1	; 0x02
    3710:	ce 01       	movw	r24, r28
    3712:	01 96       	adiw	r24, 0x01	; 1
    3714:	0e 94 df 1b 	call	0x37be	; 0x37be <__pack_f>
    3718:	28 96       	adiw	r28, 0x08	; 8
    371a:	ea e0       	ldi	r30, 0x0A	; 10
    371c:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__epilogue_restores__+0x10>

00003720 <__clzsi2>:
    3720:	ef 92       	push	r14
    3722:	ff 92       	push	r15
    3724:	0f 93       	push	r16
    3726:	1f 93       	push	r17
    3728:	7b 01       	movw	r14, r22
    372a:	8c 01       	movw	r16, r24
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	e8 16       	cp	r14, r24
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	f8 06       	cpc	r15, r24
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	08 07       	cpc	r16, r24
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	18 07       	cpc	r17, r24
    373c:	88 f4       	brcc	.+34     	; 0x3760 <__clzsi2+0x40>
    373e:	8f ef       	ldi	r24, 0xFF	; 255
    3740:	e8 16       	cp	r14, r24
    3742:	f1 04       	cpc	r15, r1
    3744:	01 05       	cpc	r16, r1
    3746:	11 05       	cpc	r17, r1
    3748:	31 f0       	breq	.+12     	; 0x3756 <__clzsi2+0x36>
    374a:	28 f0       	brcs	.+10     	; 0x3756 <__clzsi2+0x36>
    374c:	88 e0       	ldi	r24, 0x08	; 8
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	a0 e0       	ldi	r26, 0x00	; 0
    3752:	b0 e0       	ldi	r27, 0x00	; 0
    3754:	17 c0       	rjmp	.+46     	; 0x3784 <__clzsi2+0x64>
    3756:	80 e0       	ldi	r24, 0x00	; 0
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	a0 e0       	ldi	r26, 0x00	; 0
    375c:	b0 e0       	ldi	r27, 0x00	; 0
    375e:	12 c0       	rjmp	.+36     	; 0x3784 <__clzsi2+0x64>
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	e8 16       	cp	r14, r24
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	f8 06       	cpc	r15, r24
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	08 07       	cpc	r16, r24
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	18 07       	cpc	r17, r24
    3770:	28 f0       	brcs	.+10     	; 0x377c <__clzsi2+0x5c>
    3772:	88 e1       	ldi	r24, 0x18	; 24
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	a0 e0       	ldi	r26, 0x00	; 0
    3778:	b0 e0       	ldi	r27, 0x00	; 0
    377a:	04 c0       	rjmp	.+8      	; 0x3784 <__clzsi2+0x64>
    377c:	80 e1       	ldi	r24, 0x10	; 16
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	a0 e0       	ldi	r26, 0x00	; 0
    3782:	b0 e0       	ldi	r27, 0x00	; 0
    3784:	20 e2       	ldi	r18, 0x20	; 32
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e0       	ldi	r20, 0x00	; 0
    378a:	50 e0       	ldi	r21, 0x00	; 0
    378c:	28 1b       	sub	r18, r24
    378e:	39 0b       	sbc	r19, r25
    3790:	4a 0b       	sbc	r20, r26
    3792:	5b 0b       	sbc	r21, r27
    3794:	04 c0       	rjmp	.+8      	; 0x379e <__clzsi2+0x7e>
    3796:	16 95       	lsr	r17
    3798:	07 95       	ror	r16
    379a:	f7 94       	ror	r15
    379c:	e7 94       	ror	r14
    379e:	8a 95       	dec	r24
    37a0:	d2 f7       	brpl	.-12     	; 0x3796 <__clzsi2+0x76>
    37a2:	f7 01       	movw	r30, r14
    37a4:	e3 51       	subi	r30, 0x13	; 19
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	80 81       	ld	r24, Z
    37aa:	28 1b       	sub	r18, r24
    37ac:	31 09       	sbc	r19, r1
    37ae:	41 09       	sbc	r20, r1
    37b0:	51 09       	sbc	r21, r1
    37b2:	c9 01       	movw	r24, r18
    37b4:	1f 91       	pop	r17
    37b6:	0f 91       	pop	r16
    37b8:	ff 90       	pop	r15
    37ba:	ef 90       	pop	r14
    37bc:	08 95       	ret

000037be <__pack_f>:
    37be:	df 92       	push	r13
    37c0:	ef 92       	push	r14
    37c2:	ff 92       	push	r15
    37c4:	0f 93       	push	r16
    37c6:	1f 93       	push	r17
    37c8:	fc 01       	movw	r30, r24
    37ca:	e4 80       	ldd	r14, Z+4	; 0x04
    37cc:	f5 80       	ldd	r15, Z+5	; 0x05
    37ce:	06 81       	ldd	r16, Z+6	; 0x06
    37d0:	17 81       	ldd	r17, Z+7	; 0x07
    37d2:	d1 80       	ldd	r13, Z+1	; 0x01
    37d4:	80 81       	ld	r24, Z
    37d6:	82 30       	cpi	r24, 0x02	; 2
    37d8:	48 f4       	brcc	.+18     	; 0x37ec <__pack_f+0x2e>
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	a0 e1       	ldi	r26, 0x10	; 16
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	e8 2a       	or	r14, r24
    37e4:	f9 2a       	or	r15, r25
    37e6:	0a 2b       	or	r16, r26
    37e8:	1b 2b       	or	r17, r27
    37ea:	a5 c0       	rjmp	.+330    	; 0x3936 <__pack_f+0x178>
    37ec:	84 30       	cpi	r24, 0x04	; 4
    37ee:	09 f4       	brne	.+2      	; 0x37f2 <__pack_f+0x34>
    37f0:	9f c0       	rjmp	.+318    	; 0x3930 <__pack_f+0x172>
    37f2:	82 30       	cpi	r24, 0x02	; 2
    37f4:	21 f4       	brne	.+8      	; 0x37fe <__pack_f+0x40>
    37f6:	ee 24       	eor	r14, r14
    37f8:	ff 24       	eor	r15, r15
    37fa:	87 01       	movw	r16, r14
    37fc:	05 c0       	rjmp	.+10     	; 0x3808 <__pack_f+0x4a>
    37fe:	e1 14       	cp	r14, r1
    3800:	f1 04       	cpc	r15, r1
    3802:	01 05       	cpc	r16, r1
    3804:	11 05       	cpc	r17, r1
    3806:	19 f4       	brne	.+6      	; 0x380e <__pack_f+0x50>
    3808:	e0 e0       	ldi	r30, 0x00	; 0
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	96 c0       	rjmp	.+300    	; 0x393a <__pack_f+0x17c>
    380e:	62 81       	ldd	r22, Z+2	; 0x02
    3810:	73 81       	ldd	r23, Z+3	; 0x03
    3812:	9f ef       	ldi	r25, 0xFF	; 255
    3814:	62 38       	cpi	r22, 0x82	; 130
    3816:	79 07       	cpc	r23, r25
    3818:	0c f0       	brlt	.+2      	; 0x381c <__pack_f+0x5e>
    381a:	5b c0       	rjmp	.+182    	; 0x38d2 <__pack_f+0x114>
    381c:	22 e8       	ldi	r18, 0x82	; 130
    381e:	3f ef       	ldi	r19, 0xFF	; 255
    3820:	26 1b       	sub	r18, r22
    3822:	37 0b       	sbc	r19, r23
    3824:	2a 31       	cpi	r18, 0x1A	; 26
    3826:	31 05       	cpc	r19, r1
    3828:	2c f0       	brlt	.+10     	; 0x3834 <__pack_f+0x76>
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	40 e0       	ldi	r20, 0x00	; 0
    3830:	50 e0       	ldi	r21, 0x00	; 0
    3832:	2a c0       	rjmp	.+84     	; 0x3888 <__pack_f+0xca>
    3834:	b8 01       	movw	r22, r16
    3836:	a7 01       	movw	r20, r14
    3838:	02 2e       	mov	r0, r18
    383a:	04 c0       	rjmp	.+8      	; 0x3844 <__pack_f+0x86>
    383c:	76 95       	lsr	r23
    383e:	67 95       	ror	r22
    3840:	57 95       	ror	r21
    3842:	47 95       	ror	r20
    3844:	0a 94       	dec	r0
    3846:	d2 f7       	brpl	.-12     	; 0x383c <__pack_f+0x7e>
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	a0 e0       	ldi	r26, 0x00	; 0
    384e:	b0 e0       	ldi	r27, 0x00	; 0
    3850:	04 c0       	rjmp	.+8      	; 0x385a <__pack_f+0x9c>
    3852:	88 0f       	add	r24, r24
    3854:	99 1f       	adc	r25, r25
    3856:	aa 1f       	adc	r26, r26
    3858:	bb 1f       	adc	r27, r27
    385a:	2a 95       	dec	r18
    385c:	d2 f7       	brpl	.-12     	; 0x3852 <__pack_f+0x94>
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	a1 09       	sbc	r26, r1
    3862:	b1 09       	sbc	r27, r1
    3864:	8e 21       	and	r24, r14
    3866:	9f 21       	and	r25, r15
    3868:	a0 23       	and	r26, r16
    386a:	b1 23       	and	r27, r17
    386c:	00 97       	sbiw	r24, 0x00	; 0
    386e:	a1 05       	cpc	r26, r1
    3870:	b1 05       	cpc	r27, r1
    3872:	21 f0       	breq	.+8      	; 0x387c <__pack_f+0xbe>
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	a0 e0       	ldi	r26, 0x00	; 0
    387a:	b0 e0       	ldi	r27, 0x00	; 0
    387c:	9a 01       	movw	r18, r20
    387e:	ab 01       	movw	r20, r22
    3880:	28 2b       	or	r18, r24
    3882:	39 2b       	or	r19, r25
    3884:	4a 2b       	or	r20, r26
    3886:	5b 2b       	or	r21, r27
    3888:	da 01       	movw	r26, r20
    388a:	c9 01       	movw	r24, r18
    388c:	8f 77       	andi	r24, 0x7F	; 127
    388e:	90 70       	andi	r25, 0x00	; 0
    3890:	a0 70       	andi	r26, 0x00	; 0
    3892:	b0 70       	andi	r27, 0x00	; 0
    3894:	80 34       	cpi	r24, 0x40	; 64
    3896:	91 05       	cpc	r25, r1
    3898:	a1 05       	cpc	r26, r1
    389a:	b1 05       	cpc	r27, r1
    389c:	39 f4       	brne	.+14     	; 0x38ac <__pack_f+0xee>
    389e:	27 ff       	sbrs	r18, 7
    38a0:	09 c0       	rjmp	.+18     	; 0x38b4 <__pack_f+0xf6>
    38a2:	20 5c       	subi	r18, 0xC0	; 192
    38a4:	3f 4f       	sbci	r19, 0xFF	; 255
    38a6:	4f 4f       	sbci	r20, 0xFF	; 255
    38a8:	5f 4f       	sbci	r21, 0xFF	; 255
    38aa:	04 c0       	rjmp	.+8      	; 0x38b4 <__pack_f+0xf6>
    38ac:	21 5c       	subi	r18, 0xC1	; 193
    38ae:	3f 4f       	sbci	r19, 0xFF	; 255
    38b0:	4f 4f       	sbci	r20, 0xFF	; 255
    38b2:	5f 4f       	sbci	r21, 0xFF	; 255
    38b4:	e0 e0       	ldi	r30, 0x00	; 0
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	20 30       	cpi	r18, 0x00	; 0
    38ba:	a0 e0       	ldi	r26, 0x00	; 0
    38bc:	3a 07       	cpc	r19, r26
    38be:	a0 e0       	ldi	r26, 0x00	; 0
    38c0:	4a 07       	cpc	r20, r26
    38c2:	a0 e4       	ldi	r26, 0x40	; 64
    38c4:	5a 07       	cpc	r21, r26
    38c6:	10 f0       	brcs	.+4      	; 0x38cc <__pack_f+0x10e>
    38c8:	e1 e0       	ldi	r30, 0x01	; 1
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	79 01       	movw	r14, r18
    38ce:	8a 01       	movw	r16, r20
    38d0:	27 c0       	rjmp	.+78     	; 0x3920 <__pack_f+0x162>
    38d2:	60 38       	cpi	r22, 0x80	; 128
    38d4:	71 05       	cpc	r23, r1
    38d6:	64 f5       	brge	.+88     	; 0x3930 <__pack_f+0x172>
    38d8:	fb 01       	movw	r30, r22
    38da:	e1 58       	subi	r30, 0x81	; 129
    38dc:	ff 4f       	sbci	r31, 0xFF	; 255
    38de:	d8 01       	movw	r26, r16
    38e0:	c7 01       	movw	r24, r14
    38e2:	8f 77       	andi	r24, 0x7F	; 127
    38e4:	90 70       	andi	r25, 0x00	; 0
    38e6:	a0 70       	andi	r26, 0x00	; 0
    38e8:	b0 70       	andi	r27, 0x00	; 0
    38ea:	80 34       	cpi	r24, 0x40	; 64
    38ec:	91 05       	cpc	r25, r1
    38ee:	a1 05       	cpc	r26, r1
    38f0:	b1 05       	cpc	r27, r1
    38f2:	39 f4       	brne	.+14     	; 0x3902 <__pack_f+0x144>
    38f4:	e7 fe       	sbrs	r14, 7
    38f6:	0d c0       	rjmp	.+26     	; 0x3912 <__pack_f+0x154>
    38f8:	80 e4       	ldi	r24, 0x40	; 64
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	a0 e0       	ldi	r26, 0x00	; 0
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	04 c0       	rjmp	.+8      	; 0x390a <__pack_f+0x14c>
    3902:	8f e3       	ldi	r24, 0x3F	; 63
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	a0 e0       	ldi	r26, 0x00	; 0
    3908:	b0 e0       	ldi	r27, 0x00	; 0
    390a:	e8 0e       	add	r14, r24
    390c:	f9 1e       	adc	r15, r25
    390e:	0a 1f       	adc	r16, r26
    3910:	1b 1f       	adc	r17, r27
    3912:	17 ff       	sbrs	r17, 7
    3914:	05 c0       	rjmp	.+10     	; 0x3920 <__pack_f+0x162>
    3916:	16 95       	lsr	r17
    3918:	07 95       	ror	r16
    391a:	f7 94       	ror	r15
    391c:	e7 94       	ror	r14
    391e:	31 96       	adiw	r30, 0x01	; 1
    3920:	87 e0       	ldi	r24, 0x07	; 7
    3922:	16 95       	lsr	r17
    3924:	07 95       	ror	r16
    3926:	f7 94       	ror	r15
    3928:	e7 94       	ror	r14
    392a:	8a 95       	dec	r24
    392c:	d1 f7       	brne	.-12     	; 0x3922 <__pack_f+0x164>
    392e:	05 c0       	rjmp	.+10     	; 0x393a <__pack_f+0x17c>
    3930:	ee 24       	eor	r14, r14
    3932:	ff 24       	eor	r15, r15
    3934:	87 01       	movw	r16, r14
    3936:	ef ef       	ldi	r30, 0xFF	; 255
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	6e 2f       	mov	r22, r30
    393c:	67 95       	ror	r22
    393e:	66 27       	eor	r22, r22
    3940:	67 95       	ror	r22
    3942:	90 2f       	mov	r25, r16
    3944:	9f 77       	andi	r25, 0x7F	; 127
    3946:	d7 94       	ror	r13
    3948:	dd 24       	eor	r13, r13
    394a:	d7 94       	ror	r13
    394c:	8e 2f       	mov	r24, r30
    394e:	86 95       	lsr	r24
    3950:	49 2f       	mov	r20, r25
    3952:	46 2b       	or	r20, r22
    3954:	58 2f       	mov	r21, r24
    3956:	5d 29       	or	r21, r13
    3958:	b7 01       	movw	r22, r14
    395a:	ca 01       	movw	r24, r20
    395c:	1f 91       	pop	r17
    395e:	0f 91       	pop	r16
    3960:	ff 90       	pop	r15
    3962:	ef 90       	pop	r14
    3964:	df 90       	pop	r13
    3966:	08 95       	ret

00003968 <__unpack_f>:
    3968:	fc 01       	movw	r30, r24
    396a:	db 01       	movw	r26, r22
    396c:	40 81       	ld	r20, Z
    396e:	51 81       	ldd	r21, Z+1	; 0x01
    3970:	22 81       	ldd	r18, Z+2	; 0x02
    3972:	62 2f       	mov	r22, r18
    3974:	6f 77       	andi	r22, 0x7F	; 127
    3976:	70 e0       	ldi	r23, 0x00	; 0
    3978:	22 1f       	adc	r18, r18
    397a:	22 27       	eor	r18, r18
    397c:	22 1f       	adc	r18, r18
    397e:	93 81       	ldd	r25, Z+3	; 0x03
    3980:	89 2f       	mov	r24, r25
    3982:	88 0f       	add	r24, r24
    3984:	82 2b       	or	r24, r18
    3986:	28 2f       	mov	r18, r24
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	99 1f       	adc	r25, r25
    398c:	99 27       	eor	r25, r25
    398e:	99 1f       	adc	r25, r25
    3990:	11 96       	adiw	r26, 0x01	; 1
    3992:	9c 93       	st	X, r25
    3994:	11 97       	sbiw	r26, 0x01	; 1
    3996:	21 15       	cp	r18, r1
    3998:	31 05       	cpc	r19, r1
    399a:	a9 f5       	brne	.+106    	; 0x3a06 <__unpack_f+0x9e>
    399c:	41 15       	cp	r20, r1
    399e:	51 05       	cpc	r21, r1
    39a0:	61 05       	cpc	r22, r1
    39a2:	71 05       	cpc	r23, r1
    39a4:	11 f4       	brne	.+4      	; 0x39aa <__unpack_f+0x42>
    39a6:	82 e0       	ldi	r24, 0x02	; 2
    39a8:	37 c0       	rjmp	.+110    	; 0x3a18 <__unpack_f+0xb0>
    39aa:	82 e8       	ldi	r24, 0x82	; 130
    39ac:	9f ef       	ldi	r25, 0xFF	; 255
    39ae:	13 96       	adiw	r26, 0x03	; 3
    39b0:	9c 93       	st	X, r25
    39b2:	8e 93       	st	-X, r24
    39b4:	12 97       	sbiw	r26, 0x02	; 2
    39b6:	9a 01       	movw	r18, r20
    39b8:	ab 01       	movw	r20, r22
    39ba:	67 e0       	ldi	r22, 0x07	; 7
    39bc:	22 0f       	add	r18, r18
    39be:	33 1f       	adc	r19, r19
    39c0:	44 1f       	adc	r20, r20
    39c2:	55 1f       	adc	r21, r21
    39c4:	6a 95       	dec	r22
    39c6:	d1 f7       	brne	.-12     	; 0x39bc <__unpack_f+0x54>
    39c8:	83 e0       	ldi	r24, 0x03	; 3
    39ca:	8c 93       	st	X, r24
    39cc:	0d c0       	rjmp	.+26     	; 0x39e8 <__unpack_f+0x80>
    39ce:	22 0f       	add	r18, r18
    39d0:	33 1f       	adc	r19, r19
    39d2:	44 1f       	adc	r20, r20
    39d4:	55 1f       	adc	r21, r21
    39d6:	12 96       	adiw	r26, 0x02	; 2
    39d8:	8d 91       	ld	r24, X+
    39da:	9c 91       	ld	r25, X
    39dc:	13 97       	sbiw	r26, 0x03	; 3
    39de:	01 97       	sbiw	r24, 0x01	; 1
    39e0:	13 96       	adiw	r26, 0x03	; 3
    39e2:	9c 93       	st	X, r25
    39e4:	8e 93       	st	-X, r24
    39e6:	12 97       	sbiw	r26, 0x02	; 2
    39e8:	20 30       	cpi	r18, 0x00	; 0
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	38 07       	cpc	r19, r24
    39ee:	80 e0       	ldi	r24, 0x00	; 0
    39f0:	48 07       	cpc	r20, r24
    39f2:	80 e4       	ldi	r24, 0x40	; 64
    39f4:	58 07       	cpc	r21, r24
    39f6:	58 f3       	brcs	.-42     	; 0x39ce <__unpack_f+0x66>
    39f8:	14 96       	adiw	r26, 0x04	; 4
    39fa:	2d 93       	st	X+, r18
    39fc:	3d 93       	st	X+, r19
    39fe:	4d 93       	st	X+, r20
    3a00:	5c 93       	st	X, r21
    3a02:	17 97       	sbiw	r26, 0x07	; 7
    3a04:	08 95       	ret
    3a06:	2f 3f       	cpi	r18, 0xFF	; 255
    3a08:	31 05       	cpc	r19, r1
    3a0a:	79 f4       	brne	.+30     	; 0x3a2a <__unpack_f+0xc2>
    3a0c:	41 15       	cp	r20, r1
    3a0e:	51 05       	cpc	r21, r1
    3a10:	61 05       	cpc	r22, r1
    3a12:	71 05       	cpc	r23, r1
    3a14:	19 f4       	brne	.+6      	; 0x3a1c <__unpack_f+0xb4>
    3a16:	84 e0       	ldi	r24, 0x04	; 4
    3a18:	8c 93       	st	X, r24
    3a1a:	08 95       	ret
    3a1c:	64 ff       	sbrs	r22, 4
    3a1e:	03 c0       	rjmp	.+6      	; 0x3a26 <__unpack_f+0xbe>
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	8c 93       	st	X, r24
    3a24:	12 c0       	rjmp	.+36     	; 0x3a4a <__unpack_f+0xe2>
    3a26:	1c 92       	st	X, r1
    3a28:	10 c0       	rjmp	.+32     	; 0x3a4a <__unpack_f+0xe2>
    3a2a:	2f 57       	subi	r18, 0x7F	; 127
    3a2c:	30 40       	sbci	r19, 0x00	; 0
    3a2e:	13 96       	adiw	r26, 0x03	; 3
    3a30:	3c 93       	st	X, r19
    3a32:	2e 93       	st	-X, r18
    3a34:	12 97       	sbiw	r26, 0x02	; 2
    3a36:	83 e0       	ldi	r24, 0x03	; 3
    3a38:	8c 93       	st	X, r24
    3a3a:	87 e0       	ldi	r24, 0x07	; 7
    3a3c:	44 0f       	add	r20, r20
    3a3e:	55 1f       	adc	r21, r21
    3a40:	66 1f       	adc	r22, r22
    3a42:	77 1f       	adc	r23, r23
    3a44:	8a 95       	dec	r24
    3a46:	d1 f7       	brne	.-12     	; 0x3a3c <__unpack_f+0xd4>
    3a48:	70 64       	ori	r23, 0x40	; 64
    3a4a:	14 96       	adiw	r26, 0x04	; 4
    3a4c:	4d 93       	st	X+, r20
    3a4e:	5d 93       	st	X+, r21
    3a50:	6d 93       	st	X+, r22
    3a52:	7c 93       	st	X, r23
    3a54:	17 97       	sbiw	r26, 0x07	; 7
    3a56:	08 95       	ret

00003a58 <__fpcmp_parts_f>:
    3a58:	1f 93       	push	r17
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	fb 01       	movw	r30, r22
    3a5e:	9c 91       	ld	r25, X
    3a60:	92 30       	cpi	r25, 0x02	; 2
    3a62:	08 f4       	brcc	.+2      	; 0x3a66 <__fpcmp_parts_f+0xe>
    3a64:	47 c0       	rjmp	.+142    	; 0x3af4 <__fpcmp_parts_f+0x9c>
    3a66:	80 81       	ld	r24, Z
    3a68:	82 30       	cpi	r24, 0x02	; 2
    3a6a:	08 f4       	brcc	.+2      	; 0x3a6e <__fpcmp_parts_f+0x16>
    3a6c:	43 c0       	rjmp	.+134    	; 0x3af4 <__fpcmp_parts_f+0x9c>
    3a6e:	94 30       	cpi	r25, 0x04	; 4
    3a70:	51 f4       	brne	.+20     	; 0x3a86 <__fpcmp_parts_f+0x2e>
    3a72:	11 96       	adiw	r26, 0x01	; 1
    3a74:	1c 91       	ld	r17, X
    3a76:	84 30       	cpi	r24, 0x04	; 4
    3a78:	99 f5       	brne	.+102    	; 0x3ae0 <__fpcmp_parts_f+0x88>
    3a7a:	81 81       	ldd	r24, Z+1	; 0x01
    3a7c:	68 2f       	mov	r22, r24
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	61 1b       	sub	r22, r17
    3a82:	71 09       	sbc	r23, r1
    3a84:	3f c0       	rjmp	.+126    	; 0x3b04 <__fpcmp_parts_f+0xac>
    3a86:	84 30       	cpi	r24, 0x04	; 4
    3a88:	21 f0       	breq	.+8      	; 0x3a92 <__fpcmp_parts_f+0x3a>
    3a8a:	92 30       	cpi	r25, 0x02	; 2
    3a8c:	31 f4       	brne	.+12     	; 0x3a9a <__fpcmp_parts_f+0x42>
    3a8e:	82 30       	cpi	r24, 0x02	; 2
    3a90:	b9 f1       	breq	.+110    	; 0x3b00 <__fpcmp_parts_f+0xa8>
    3a92:	81 81       	ldd	r24, Z+1	; 0x01
    3a94:	88 23       	and	r24, r24
    3a96:	89 f1       	breq	.+98     	; 0x3afa <__fpcmp_parts_f+0xa2>
    3a98:	2d c0       	rjmp	.+90     	; 0x3af4 <__fpcmp_parts_f+0x9c>
    3a9a:	11 96       	adiw	r26, 0x01	; 1
    3a9c:	1c 91       	ld	r17, X
    3a9e:	11 97       	sbiw	r26, 0x01	; 1
    3aa0:	82 30       	cpi	r24, 0x02	; 2
    3aa2:	f1 f0       	breq	.+60     	; 0x3ae0 <__fpcmp_parts_f+0x88>
    3aa4:	81 81       	ldd	r24, Z+1	; 0x01
    3aa6:	18 17       	cp	r17, r24
    3aa8:	d9 f4       	brne	.+54     	; 0x3ae0 <__fpcmp_parts_f+0x88>
    3aaa:	12 96       	adiw	r26, 0x02	; 2
    3aac:	2d 91       	ld	r18, X+
    3aae:	3c 91       	ld	r19, X
    3ab0:	13 97       	sbiw	r26, 0x03	; 3
    3ab2:	82 81       	ldd	r24, Z+2	; 0x02
    3ab4:	93 81       	ldd	r25, Z+3	; 0x03
    3ab6:	82 17       	cp	r24, r18
    3ab8:	93 07       	cpc	r25, r19
    3aba:	94 f0       	brlt	.+36     	; 0x3ae0 <__fpcmp_parts_f+0x88>
    3abc:	28 17       	cp	r18, r24
    3abe:	39 07       	cpc	r19, r25
    3ac0:	bc f0       	brlt	.+46     	; 0x3af0 <__fpcmp_parts_f+0x98>
    3ac2:	14 96       	adiw	r26, 0x04	; 4
    3ac4:	8d 91       	ld	r24, X+
    3ac6:	9d 91       	ld	r25, X+
    3ac8:	0d 90       	ld	r0, X+
    3aca:	bc 91       	ld	r27, X
    3acc:	a0 2d       	mov	r26, r0
    3ace:	24 81       	ldd	r18, Z+4	; 0x04
    3ad0:	35 81       	ldd	r19, Z+5	; 0x05
    3ad2:	46 81       	ldd	r20, Z+6	; 0x06
    3ad4:	57 81       	ldd	r21, Z+7	; 0x07
    3ad6:	28 17       	cp	r18, r24
    3ad8:	39 07       	cpc	r19, r25
    3ada:	4a 07       	cpc	r20, r26
    3adc:	5b 07       	cpc	r21, r27
    3ade:	18 f4       	brcc	.+6      	; 0x3ae6 <__fpcmp_parts_f+0x8e>
    3ae0:	11 23       	and	r17, r17
    3ae2:	41 f0       	breq	.+16     	; 0x3af4 <__fpcmp_parts_f+0x9c>
    3ae4:	0a c0       	rjmp	.+20     	; 0x3afa <__fpcmp_parts_f+0xa2>
    3ae6:	82 17       	cp	r24, r18
    3ae8:	93 07       	cpc	r25, r19
    3aea:	a4 07       	cpc	r26, r20
    3aec:	b5 07       	cpc	r27, r21
    3aee:	40 f4       	brcc	.+16     	; 0x3b00 <__fpcmp_parts_f+0xa8>
    3af0:	11 23       	and	r17, r17
    3af2:	19 f0       	breq	.+6      	; 0x3afa <__fpcmp_parts_f+0xa2>
    3af4:	61 e0       	ldi	r22, 0x01	; 1
    3af6:	70 e0       	ldi	r23, 0x00	; 0
    3af8:	05 c0       	rjmp	.+10     	; 0x3b04 <__fpcmp_parts_f+0xac>
    3afa:	6f ef       	ldi	r22, 0xFF	; 255
    3afc:	7f ef       	ldi	r23, 0xFF	; 255
    3afe:	02 c0       	rjmp	.+4      	; 0x3b04 <__fpcmp_parts_f+0xac>
    3b00:	60 e0       	ldi	r22, 0x00	; 0
    3b02:	70 e0       	ldi	r23, 0x00	; 0
    3b04:	cb 01       	movw	r24, r22
    3b06:	1f 91       	pop	r17
    3b08:	08 95       	ret

00003b0a <itoa>:
    3b0a:	fb 01       	movw	r30, r22
    3b0c:	9f 01       	movw	r18, r30
    3b0e:	e8 94       	clt
    3b10:	42 30       	cpi	r20, 0x02	; 2
    3b12:	c4 f0       	brlt	.+48     	; 0x3b44 <itoa+0x3a>
    3b14:	45 32       	cpi	r20, 0x25	; 37
    3b16:	b4 f4       	brge	.+44     	; 0x3b44 <itoa+0x3a>
    3b18:	4a 30       	cpi	r20, 0x0A	; 10
    3b1a:	29 f4       	brne	.+10     	; 0x3b26 <itoa+0x1c>
    3b1c:	97 fb       	bst	r25, 7
    3b1e:	1e f4       	brtc	.+6      	; 0x3b26 <itoa+0x1c>
    3b20:	90 95       	com	r25
    3b22:	81 95       	neg	r24
    3b24:	9f 4f       	sbci	r25, 0xFF	; 255
    3b26:	64 2f       	mov	r22, r20
    3b28:	77 27       	eor	r23, r23
    3b2a:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__udivmodhi4>
    3b2e:	80 5d       	subi	r24, 0xD0	; 208
    3b30:	8a 33       	cpi	r24, 0x3A	; 58
    3b32:	0c f0       	brlt	.+2      	; 0x3b36 <itoa+0x2c>
    3b34:	89 5d       	subi	r24, 0xD9	; 217
    3b36:	81 93       	st	Z+, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	00 97       	sbiw	r24, 0x00	; 0
    3b3c:	a1 f7       	brne	.-24     	; 0x3b26 <itoa+0x1c>
    3b3e:	16 f4       	brtc	.+4      	; 0x3b44 <itoa+0x3a>
    3b40:	5d e2       	ldi	r21, 0x2D	; 45
    3b42:	51 93       	st	Z+, r21
    3b44:	10 82       	st	Z, r1
    3b46:	c9 01       	movw	r24, r18
    3b48:	0c 94 da 1d 	jmp	0x3bb4	; 0x3bb4 <strrev>

00003b4c <ltoa>:
    3b4c:	fa 01       	movw	r30, r20
    3b4e:	cf 93       	push	r28
    3b50:	ff 93       	push	r31
    3b52:	ef 93       	push	r30
    3b54:	22 30       	cpi	r18, 0x02	; 2
    3b56:	44 f1       	brlt	.+80     	; 0x3ba8 <ltoa+0x5c>
    3b58:	25 32       	cpi	r18, 0x25	; 37
    3b5a:	34 f5       	brge	.+76     	; 0x3ba8 <ltoa+0x5c>
    3b5c:	c2 2f       	mov	r28, r18
    3b5e:	e8 94       	clt
    3b60:	ca 30       	cpi	r28, 0x0A	; 10
    3b62:	49 f4       	brne	.+18     	; 0x3b76 <ltoa+0x2a>
    3b64:	97 fb       	bst	r25, 7
    3b66:	3e f4       	brtc	.+14     	; 0x3b76 <ltoa+0x2a>
    3b68:	90 95       	com	r25
    3b6a:	80 95       	com	r24
    3b6c:	70 95       	com	r23
    3b6e:	61 95       	neg	r22
    3b70:	7f 4f       	sbci	r23, 0xFF	; 255
    3b72:	8f 4f       	sbci	r24, 0xFF	; 255
    3b74:	9f 4f       	sbci	r25, 0xFF	; 255
    3b76:	2c 2f       	mov	r18, r28
    3b78:	33 27       	eor	r19, r19
    3b7a:	44 27       	eor	r20, r20
    3b7c:	55 27       	eor	r21, r21
    3b7e:	ff 93       	push	r31
    3b80:	ef 93       	push	r30
    3b82:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <__udivmodsi4>
    3b86:	ef 91       	pop	r30
    3b88:	ff 91       	pop	r31
    3b8a:	60 5d       	subi	r22, 0xD0	; 208
    3b8c:	6a 33       	cpi	r22, 0x3A	; 58
    3b8e:	0c f0       	brlt	.+2      	; 0x3b92 <ltoa+0x46>
    3b90:	69 5d       	subi	r22, 0xD9	; 217
    3b92:	61 93       	st	Z+, r22
    3b94:	b9 01       	movw	r22, r18
    3b96:	ca 01       	movw	r24, r20
    3b98:	60 50       	subi	r22, 0x00	; 0
    3b9a:	70 40       	sbci	r23, 0x00	; 0
    3b9c:	80 40       	sbci	r24, 0x00	; 0
    3b9e:	90 40       	sbci	r25, 0x00	; 0
    3ba0:	51 f7       	brne	.-44     	; 0x3b76 <ltoa+0x2a>
    3ba2:	16 f4       	brtc	.+4      	; 0x3ba8 <ltoa+0x5c>
    3ba4:	cd e2       	ldi	r28, 0x2D	; 45
    3ba6:	c1 93       	st	Z+, r28
    3ba8:	10 82       	st	Z, r1
    3baa:	8f 91       	pop	r24
    3bac:	9f 91       	pop	r25
    3bae:	cf 91       	pop	r28
    3bb0:	0c 94 da 1d 	jmp	0x3bb4	; 0x3bb4 <strrev>

00003bb4 <strrev>:
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	67 2f       	mov	r22, r23
    3bba:	71 91       	ld	r23, Z+
    3bbc:	77 23       	and	r23, r23
    3bbe:	e1 f7       	brne	.-8      	; 0x3bb8 <strrev+0x4>
    3bc0:	32 97       	sbiw	r30, 0x02	; 2
    3bc2:	04 c0       	rjmp	.+8      	; 0x3bcc <strrev+0x18>
    3bc4:	7c 91       	ld	r23, X
    3bc6:	6d 93       	st	X+, r22
    3bc8:	70 83       	st	Z, r23
    3bca:	62 91       	ld	r22, -Z
    3bcc:	ae 17       	cp	r26, r30
    3bce:	bf 07       	cpc	r27, r31
    3bd0:	c8 f3       	brcs	.-14     	; 0x3bc4 <strrev+0x10>
    3bd2:	08 95       	ret

00003bd4 <__udivmodsi4>:
    3bd4:	a1 e2       	ldi	r26, 0x21	; 33
    3bd6:	1a 2e       	mov	r1, r26
    3bd8:	aa 1b       	sub	r26, r26
    3bda:	bb 1b       	sub	r27, r27
    3bdc:	fd 01       	movw	r30, r26
    3bde:	0d c0       	rjmp	.+26     	; 0x3bfa <__udivmodsi4_ep>

00003be0 <__udivmodsi4_loop>:
    3be0:	aa 1f       	adc	r26, r26
    3be2:	bb 1f       	adc	r27, r27
    3be4:	ee 1f       	adc	r30, r30
    3be6:	ff 1f       	adc	r31, r31
    3be8:	a2 17       	cp	r26, r18
    3bea:	b3 07       	cpc	r27, r19
    3bec:	e4 07       	cpc	r30, r20
    3bee:	f5 07       	cpc	r31, r21
    3bf0:	20 f0       	brcs	.+8      	; 0x3bfa <__udivmodsi4_ep>
    3bf2:	a2 1b       	sub	r26, r18
    3bf4:	b3 0b       	sbc	r27, r19
    3bf6:	e4 0b       	sbc	r30, r20
    3bf8:	f5 0b       	sbc	r31, r21

00003bfa <__udivmodsi4_ep>:
    3bfa:	66 1f       	adc	r22, r22
    3bfc:	77 1f       	adc	r23, r23
    3bfe:	88 1f       	adc	r24, r24
    3c00:	99 1f       	adc	r25, r25
    3c02:	1a 94       	dec	r1
    3c04:	69 f7       	brne	.-38     	; 0x3be0 <__udivmodsi4_loop>
    3c06:	60 95       	com	r22
    3c08:	70 95       	com	r23
    3c0a:	80 95       	com	r24
    3c0c:	90 95       	com	r25
    3c0e:	9b 01       	movw	r18, r22
    3c10:	ac 01       	movw	r20, r24
    3c12:	bd 01       	movw	r22, r26
    3c14:	cf 01       	movw	r24, r30
    3c16:	08 95       	ret

00003c18 <__prologue_saves__>:
    3c18:	2f 92       	push	r2
    3c1a:	3f 92       	push	r3
    3c1c:	4f 92       	push	r4
    3c1e:	5f 92       	push	r5
    3c20:	6f 92       	push	r6
    3c22:	7f 92       	push	r7
    3c24:	8f 92       	push	r8
    3c26:	9f 92       	push	r9
    3c28:	af 92       	push	r10
    3c2a:	bf 92       	push	r11
    3c2c:	cf 92       	push	r12
    3c2e:	df 92       	push	r13
    3c30:	ef 92       	push	r14
    3c32:	ff 92       	push	r15
    3c34:	0f 93       	push	r16
    3c36:	1f 93       	push	r17
    3c38:	cf 93       	push	r28
    3c3a:	df 93       	push	r29
    3c3c:	cd b7       	in	r28, 0x3d	; 61
    3c3e:	de b7       	in	r29, 0x3e	; 62
    3c40:	ca 1b       	sub	r28, r26
    3c42:	db 0b       	sbc	r29, r27
    3c44:	0f b6       	in	r0, 0x3f	; 63
    3c46:	f8 94       	cli
    3c48:	de bf       	out	0x3e, r29	; 62
    3c4a:	0f be       	out	0x3f, r0	; 63
    3c4c:	cd bf       	out	0x3d, r28	; 61
    3c4e:	09 94       	ijmp

00003c50 <__epilogue_restores__>:
    3c50:	2a 88       	ldd	r2, Y+18	; 0x12
    3c52:	39 88       	ldd	r3, Y+17	; 0x11
    3c54:	48 88       	ldd	r4, Y+16	; 0x10
    3c56:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c58:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c60:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c62:	b9 84       	ldd	r11, Y+9	; 0x09
    3c64:	c8 84       	ldd	r12, Y+8	; 0x08
    3c66:	df 80       	ldd	r13, Y+7	; 0x07
    3c68:	ee 80       	ldd	r14, Y+6	; 0x06
    3c6a:	fd 80       	ldd	r15, Y+5	; 0x05
    3c6c:	0c 81       	ldd	r16, Y+4	; 0x04
    3c6e:	1b 81       	ldd	r17, Y+3	; 0x03
    3c70:	aa 81       	ldd	r26, Y+2	; 0x02
    3c72:	b9 81       	ldd	r27, Y+1	; 0x01
    3c74:	ce 0f       	add	r28, r30
    3c76:	d1 1d       	adc	r29, r1
    3c78:	0f b6       	in	r0, 0x3f	; 63
    3c7a:	f8 94       	cli
    3c7c:	de bf       	out	0x3e, r29	; 62
    3c7e:	0f be       	out	0x3f, r0	; 63
    3c80:	cd bf       	out	0x3d, r28	; 61
    3c82:	ed 01       	movw	r28, r26
    3c84:	08 95       	ret

00003c86 <__udivmodhi4>:
    3c86:	aa 1b       	sub	r26, r26
    3c88:	bb 1b       	sub	r27, r27
    3c8a:	51 e1       	ldi	r21, 0x11	; 17
    3c8c:	07 c0       	rjmp	.+14     	; 0x3c9c <__udivmodhi4_ep>

00003c8e <__udivmodhi4_loop>:
    3c8e:	aa 1f       	adc	r26, r26
    3c90:	bb 1f       	adc	r27, r27
    3c92:	a6 17       	cp	r26, r22
    3c94:	b7 07       	cpc	r27, r23
    3c96:	10 f0       	brcs	.+4      	; 0x3c9c <__udivmodhi4_ep>
    3c98:	a6 1b       	sub	r26, r22
    3c9a:	b7 0b       	sbc	r27, r23

00003c9c <__udivmodhi4_ep>:
    3c9c:	88 1f       	adc	r24, r24
    3c9e:	99 1f       	adc	r25, r25
    3ca0:	5a 95       	dec	r21
    3ca2:	a9 f7       	brne	.-22     	; 0x3c8e <__udivmodhi4_loop>
    3ca4:	80 95       	com	r24
    3ca6:	90 95       	com	r25
    3ca8:	bc 01       	movw	r22, r24
    3caa:	cd 01       	movw	r24, r26
    3cac:	08 95       	ret

00003cae <_exit>:
    3cae:	f8 94       	cli

00003cb0 <__stop_program>:
    3cb0:	ff cf       	rjmp	.-2      	; 0x3cb0 <__stop_program>
